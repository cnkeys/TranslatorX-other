<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="5.0.0_0_dev" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>"Synchronized" classes can be useful when you need to prevent all access to a collection via a single lock, at the expense of poorer scalability.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112256Z" creationid="pingfangx" creationdate="20191025T112256Z">
        <seg>需要通过单个锁不允许对 collection 的所有访问时，“同步”类是很有用的，其代价是较差的可伸缩性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(A &lt;t3&gt;null&lt;/t3&gt; return can also indicate that the map         previously associated &lt;t4&gt;null&lt;/t4&gt; with &lt;t5&gt;key&lt;/t5&gt;.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T092915Z" creationid="pingfangx" creationdate="20191026T092915Z">
        <seg>（返回 &lt;t3&gt;null&lt;/t3&gt; 还可能表示该映射之前将 &lt;t4&gt;null&lt;/t4&gt; 与 &lt;t5&gt;key&lt;/t5&gt; 关联。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(A &lt;t3&gt;null&lt;/t3&gt; return can also indicate that the map previously associated &lt;t4&gt;null&lt;/t4&gt; with &lt;t5&gt;key&lt;/t5&gt;.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141148Z" creationid="pingfangx" creationdate="20191025T141148Z">
        <seg>（返回 &lt;t3&gt;null&lt;/t3&gt; 还可能表示该映射之前将 &lt;t4&gt;null&lt;/t4&gt; 与 &lt;t5&gt;key&lt;/t5&gt; 关联。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134539Z" creationid="pingfangx" creationdate="20191025T134539Z">
        <seg>（结构上的修改是指添加或删除一个或多个映射关系的任何操作；仅改变与实例已经包含的键关联的值不是结构上的修改。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Among known examples are sets of Float keys holding consecutive whole numbers in small tables.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082935Z" creationid="pingfangx" creationdate="20191026T082935Z">
        <seg>（在已知的例子中有：在小表中，以 Float 为键的集合持有连续的整数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(And the value of the maximumPoolSize therefore doesn't have any effect.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125234Z" creationid="pingfangx" creationdate="20191025T125234Z">
        <seg>（因此，maximumPoolSize 的值也就无效了。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Because atomic variables are expected to be mutated, they are poor choices for hash table keys.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125318Z" creationid="pingfangx" creationdate="20191025T125318Z">
        <seg>（因为原子变量是可变的，所以对于哈希表键来说，它们不是好的选择。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Because atomic variables are expected to be mutated, they are poor choices for hash table keys.) Additionally, classes are provided only for those types that are commonly useful in intended applications.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122304Z" creationid="pingfangx" creationdate="20191025T122304Z">
        <seg>（因为原子变量是可变的，所以对于哈希表键来说，它们不是好的选择。）另外，仅为那些通常在预期应用程序中使用的类型提供类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Extraneous whitespace characters are not permitted.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094549Z" creationid="pingfangx" creationdate="20191014T094549Z">
        <seg>（不允许使用额外的空白字符。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(For more information on this topic, see Section 3.2.3 in Doug Lea's "Concurrent Programming in Java (Second Edition)" (Addison-Wesley, 2000), or Item 50 in Joshua Bloch's "Effective Java Programming Language Guide" (Addison-Wesley, 2001).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134701Z" creationid="pingfangx" creationdate="20191014T134701Z">
        <seg>（有关这一主题的更多信息，请参阅 Doug Lea 撰写的 Concurrent Programming in Java (Second Edition) (Addison-Wesley, 2000) 中的第 3.2.3 节或 Joshua Bloch 撰写的 Effective Java Programming Language Guide (Addison-Wesley, 2001) 中的第 50 项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(If neither of these apply, we may waste about a factor of two in time and space compared to taking no precautions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080734Z" creationid="pingfangx" creationdate="20191026T080734Z">
        <seg>（如果这些都不适用，那么与未采取预防措施相比，我们可能浪费大约两倍的时间和空间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(In the case of annotation member values, this is a recursive definition.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151722Z" creationid="pingfangx" creationdate="20191014T151722Z">
        <seg>（对于 annotation 成员值，这是一种递归定义。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Note that this definition is recursive for annotation typed members.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150335Z" creationid="pingfangx" creationdate="20191014T150335Z">
        <seg>（注意，此定义对于 annotation 类型的成员是递归的。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Otherwise the table is resized if too many nodes in a bin.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082546Z" creationid="pingfangx" creationdate="20191026T082546Z">
        <seg>（否则，如果 bin 中的节点太多，则调整表的大小。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Refer to the &lt;a4&gt;&lt;i5&gt; definition&lt;/i5&gt;&lt;/a4&gt; of the U+&lt;i6&gt;n&lt;/i6&gt; notation in the Unicode Standard.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143150Z" creationid="pingfangx" creationdate="20191013T143150Z">
        <seg>（请参阅 Unicode 标准中 U+&lt;i6&gt;n&lt;/i6&gt; 表示法的&lt;a4&gt;&lt;i5&gt;定义&lt;/i5&gt;&lt;/a4&gt;。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Returns an array of length zero if no annotations are directly present on this element.) The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161308Z" creationid="pingfangx" creationdate="20191014T161308Z">
        <seg>（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Returns an array of length zero if this element has no annotations.) The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161154Z" creationid="pingfangx" creationdate="20191014T161154Z">
        <seg>（如果此元素没有注释，则返回长度为零的数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(See ConcurrentModificationException).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084015Z" creationid="pingfangx" creationdate="20191026T084015Z">
        <seg>（请参阅 ConcurrentModificationException）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(See below for TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082658Z" creationid="pingfangx" creationdate="20191026T082658Z">
        <seg>（请参阅下面的 TreeNode 子类，以及 LinkedHashMap 中的 Entry 子类。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Such spurious failures may for example be due to memory contention effects that are unrelated to whether the expected and current values are equal.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125253Z" creationid="pingfangx" creationdate="20191025T125253Z">
        <seg>（例如，这样的虚假失败可能是由于内存争用的结果，该争用与期望值和当前值是否相等无关）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Such spurious failures may for example be due to memory contention effects that are unrelated to whether the expected and current values are equal.) Additionally &lt;c7&gt;weakCompareAndSet&lt;/c7&gt; does not provide ordering guarantees that are usually needed for synchronization control.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122101Z" creationid="pingfangx" creationdate="20191025T122052Z">
        <seg>（例如，这样的虚假失败可能是由于内存争用的结果，该争用与期望值和当前值是否相等无关）。此外，&lt;c7&gt;weakCompareAndSet&lt;/c7&gt; 不提供通常需要同步控制的排序保证。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The &lt;t3&gt;HashMap&lt;/t3&gt; class is roughly equivalent to &lt;t4&gt;Hashtable&lt;/t4&gt;, except that it is unsynchronized and permits nulls.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T131506Z" creationid="pingfangx" creationdate="20191025T131506Z">
        <seg>（除了非同步和允许使用 null 之外，&lt;t3&gt;HashMap&lt;/t3&gt; 类与 &lt;t4&gt;Hashtable&lt;/t4&gt; 大致相同。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The javadoc description is true upon serialization.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084050Z" creationid="pingfangx" creationdate="20191026T084050Z">
        <seg>（在序列化时，javadoc 描述是真实的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The specification for the persistent collection should indicate that it is capable of throwing such exceptions.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113351Z" creationid="pingfangx" creationdate="20191013T113351Z">
        <seg>（持久集合的规范应该指示它能够抛出这种异常。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The test triggers somewhere between 2 and 6 nodes, depending on tree structure).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100835Z" creationid="pingfangx" creationdate="20191026T100835Z">
        <seg>（测试触发 2 到 6 个节点之间，取决于树结构）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The value returned by this method may differ from the one returned by the &lt;c0&gt;&lt;a1&gt;getClass()&lt;/a1&gt;&lt;/c0&gt; method for enum constants with constant-specific class bodies.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094239Z" creationid="pingfangx" creationdate="20191014T094239Z">
        <seg>（由该方法返回的值不同于由 Object.getClass() 方法返回的值，&lt;c0&gt;&lt;a1&gt;getClass()&lt;/a1&gt;&lt;/c0&gt; 方法用于带有特定常量的类主体的枚举常量。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(There can be at most one such mapping.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140915Z" creationid="pingfangx" creationdate="20191025T140915Z">
        <seg>（最多只能有一个这样的映射关系。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(There is one overloading for each primitive type, and one for object reference types.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151728Z" creationid="pingfangx" creationdate="20191014T151728Z">
        <seg>（各种基本类型和对象引用类型分别对应一个重载。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(This also requires that a map instance be passed to some utility methods that may create new nodes.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081848Z" creationid="pingfangx" creationdate="20191026T081848Z">
        <seg>（这也要求映射实例被传递给可能创建新节点的一些实用方法。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(This implies that &lt;t3&gt;x.compareTo(y)&lt;/t3&gt; must throw an exception iff &lt;t4&gt;y.compareTo(x)&lt;/t4&gt; throws an exception.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103023Z" creationid="pingfangx" creationdate="20191014T103023Z">
        <seg>（这意味着如果 &lt;t3&gt;y.compareTo(x)&lt;/t3&gt; 抛出一个异常，则 &lt;t4&gt;x.compareTo(y)&lt;/t4&gt; 也要抛出一个异常。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;f1&gt;&lt;s2&gt;TM&lt;/s2&gt;&lt;/f1&gt; programming language.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132606Z" creationid="pingfangx" creationdate="20191014T132606Z">
        <seg>（这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 Java&lt;f1&gt;&lt;s2&gt;TM&lt;/s2&gt;&lt;/f1&gt; 编程语言不需要这种实现技巧。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(This sequence will be lengthened to accommodate the specified String if necessary.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041343Z" creationid="pingfangx" creationdate="20191014T041343Z">
        <seg>（如果需要，序列将延长，以适应指定的字符串。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Unlike the &lt;t4&gt;==&lt;/t4&gt; operator, NaN is considered equal to itself, and &lt;t5&gt;0.0&lt;/t5&gt; unequal to &lt;t6&gt;-0.0&lt;/t6&gt;.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150323Z" creationid="pingfangx" creationdate="20191014T150323Z">
        <seg>（与 &lt;t4&gt;==&lt;/t4&gt; 运算符不同，NaN 被认为等于其自身，并且 &lt;t5&gt;0.0&lt;/t5&gt; 不等于 &lt;t6&gt;-0.0&lt;/t6&gt;。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Unlike the &lt;t4&gt;==&lt;/t4&gt; operator, NaN is considered equal to itself, and &lt;t5&gt;0.0f&lt;/t5&gt; unequal to &lt;t6&gt;-0.0f&lt;/t6&gt;.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150303Z" creationid="pingfangx" creationdate="20191014T150303Z">
        <seg>（与 &lt;t4&gt;==&lt;/t4&gt; 运算符不同，NaN 被认为等于其自身，并且 &lt;t5&gt;0.0f&lt;/t5&gt; 不等于 &lt;t6&gt;-0.0f&lt;/t6&gt;。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(We also tolerate length zero in some operations to allow bootstrapping mechanics that are currently not needed.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083605Z" creationid="pingfangx" creationdate="20191026T083605Z">
        <seg>(在某些操作中，我们还允许长度为零，以允许当前不需要的引导机制。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(We conservatively check generic types via reflection to validate this -- see method comparableClassFor).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080441Z" creationid="pingfangx" creationdate="20191026T080441Z">
        <seg>我们保守地通过反射检查泛型类型来验证是否是 Comparable，见 comparableClassFor 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(else is already treeified)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101050Z" creationid="pingfangx" creationdate="20191026T101050Z">
        <seg>(否则已经 treeified)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(if zero, use defaults)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095516Z" creationid="pingfangx" creationdate="20191026T095516Z">
        <seg>(如果为零，则使用默认值)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>*</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114422Z" creationid="pingfangx" creationdate="20191011T114422Z">
        <seg>*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/a0&gt;&lt;a2&gt;Characters&lt;/a2&gt; whose code points are greater than U+FFFF are called &lt;e3&gt;supplementary character&lt;/e3&gt;s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143257Z" creationid="pingfangx" creationdate="20191013T143257Z">
        <seg>&lt;/a0&gt;代码点大于 U+FFFF 的&lt;a2&gt;字符&lt;/a2&gt;称为&lt;e3&gt;增补字符&lt;/e3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt; Chapter 17 of &lt;c1&gt;The Java™ Language Specification&lt;/c1&gt;&lt;/a0&gt; defines the &lt;i2&gt;happens-before&lt;/i2&gt; relation on memory operations such as reads and writes of shared variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112923Z" creationid="pingfangx" creationdate="20191025T112911Z">
        <seg>&lt;a0&gt;&lt;c1&gt;The Java™ Language Specification&lt;/c1&gt; 第 17 章&lt;/a0&gt; 定义了内存操作（如共享变量的读写）的 &lt;i2&gt;happen-before&lt;/i2&gt; 关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;i1&gt;Buffers&lt;/i1&gt;&lt;/a0&gt;, which are containers for data;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083707Z" creationid="pingfangx" creationdate="20191011T083707Z">
        <seg>&lt;a0&gt;&lt;i1&gt;缓冲区&lt;/i1&gt;&lt;/a0&gt;，它们是数据容器；</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;i1&gt;Channels&lt;/i1&gt;&lt;/a0&gt; of various types, which represent connections</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T101820Z" creationid="pingfangx" creationdate="20191011T101756Z">
        <seg>各种类型的 &lt;a0&gt;&lt;i1&gt;通道&lt;/i1&gt;&lt;/a0&gt;，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;&lt;i1&gt;Charsets&lt;/i1&gt;&lt;/a0&gt; and their associated &lt;i2&gt;decoders&lt;/i2&gt; and &lt;i3&gt;encoders&lt;/i3&gt;,</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083730Z" creationid="pingfangx" creationdate="20191011T083730Z">
        <seg>&lt;a0&gt;&lt;i1&gt;字符集&lt;/i1&gt;&lt;/a0&gt; 及其相关 &lt;i2&gt;解码器&lt;/i2&gt; 和 &lt;i3&gt;编码器&lt;/i3&gt;，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;About Android&lt;/a0&gt; &lt;a1&gt;Auto&lt;/a1&gt; &lt;a2&gt;TV&lt;/a2&gt; &lt;a3&gt;Wear&lt;/a3&gt; &lt;a4&gt;Legal&lt;/a4&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114412Z" creationid="pingfangx" creationdate="20191011T114412Z">
        <seg>&lt;a0&gt;About Android&lt;/a0&gt; &lt;a1&gt;Auto&lt;/a1&gt; &lt;a2&gt;TV&lt;/a2&gt; &lt;a3&gt;Wear&lt;/a3&gt; &lt;a4&gt;Legal&lt;/a4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;Blog&lt;/a0&gt; &lt;a1&gt;Support&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114409Z" creationid="pingfangx" creationdate="20191011T114409Z">
        <seg>&lt;a0&gt;Blog&lt;/a0&gt; &lt;a1&gt;Support&lt;/a1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt;The set of characters from U+0000 to U+FFFF is sometimes referred to as the &lt;e1&gt;Basic Multilingual Plane (BMP)&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143224Z" creationid="pingfangx" creationdate="20191013T143207Z">
        <seg>&lt;a0&gt;从 U+0000 到 U+FFFF 的字符集有时也称为 &lt;e1&gt;Basic Multilingual Plane (BMP)&lt;/e1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b0&gt;Extension example&lt;/b0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125834Z" creationid="pingfangx" creationdate="20191025T125834Z">
        <seg>&lt;b0&gt;扩展示例&lt;/b0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b0&gt;Implementations.&lt;/b0&gt; Classes &lt;c1&gt;&lt;a2&gt;ThreadPoolExecutor&lt;/a2&gt;&lt;/c1&gt; and &lt;c3&gt;&lt;a4&gt;ScheduledThreadPoolExecutor&lt;/a4&gt;&lt;/c3&gt; provide tunable, flexible thread pools.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110729Z" creationid="pingfangx" creationdate="20191025T110729Z">
        <seg>&lt;b0&gt;实现。&lt;/b0&gt;类 &lt;c1&gt;&lt;a2&gt;ThreadPoolExecutor&lt;/a2&gt;&lt;/c1&gt; 和 &lt;c3&gt;&lt;a4&gt;ScheduledThreadPoolExecutor&lt;/a4&gt;&lt;/c3&gt; 提供可调的、灵活的线程池。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b0&gt;Interfaces.&lt;/b0&gt; &lt;c1&gt;&lt;a2&gt;Executor&lt;/a2&gt;&lt;/c1&gt; is a simple standardized interface for defining custom thread-like subsystems, including thread pools, asynchronous I/O, and lightweight task frameworks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110352Z" creationid="pingfangx" creationdate="20191025T110352Z">
        <seg>&lt;b0&gt;接口。&lt;/b0&gt;&lt;c1&gt;&lt;a2&gt;Executor&lt;/a2&gt;&lt;/c1&gt; 是一个简单的标准化接口，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b0&gt;Most programmers should use the &lt;c1&gt;&lt;a2&gt;toString()&lt;/a2&gt;&lt;/c1&gt; method in preference to this one, as the toString method may return a more user-friendly name.&lt;/b0&gt; This method is designed primarily for use in specialized situations where correctness depends on getting the exact name, which will not vary from release to release.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094517Z" creationid="pingfangx" creationdate="20191014T094504Z">
        <seg>&lt;b0&gt;与此方法相比，大多数程序员应该优先考虑使用 &lt;c1&gt;&lt;a2&gt;toString()&lt;/a2&gt;&lt;/c1&gt; 方法，因为 toString 方法返回更加用户友好的名称。&lt;/b0&gt;该方法主要设计用于特殊情形，其正确性取决于获取正确的名称，其名称不会随版本的改变而改变。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b0&gt;The actual result type is &lt;c1&gt;Class&lt;? extends |X|&gt;&lt;/c1&gt; where &lt;c2&gt;|X|&lt;/c2&gt; is the erasure of the static type of the expression on which &lt;c3&gt;getClass&lt;/c3&gt; is called.&lt;/b0&gt; For example, no cast is required in this code fragment:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T131446Z" creationid="pingfangx" creationdate="20191014T131433Z">
        <seg>&lt;b0&gt;实际结果类型是 &lt;c1&gt;Class&lt;? extends |X|&gt;&lt;/c1&gt;，其中 &lt;c2&gt;|X|&lt;/c2&gt; 表示清除表达式中的静态类型，该表达式调用 &lt;c3&gt;getClass&lt;/c3&gt;&lt;/b0&gt;。例如，以下代码片段中不需要强制转换：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;CountDownLatch&lt;/a1&gt;&lt;/c0&gt; is a very simple yet very common utility for blocking until a given number of signals, events, or conditions hold.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111757Z" creationid="pingfangx" creationdate="20191025T111542Z">
        <seg>&lt;c0&gt;&lt;a1&gt;CountDownLatch&lt;/a1&gt;&lt;/c0&gt; 是一个极其简单但又极其常用的实用工具，用于在保持给定数目的信号、事件或条件前阻塞执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;DatagramSocket&lt;/a1&gt;&lt;/c0&gt; is a UDP endpoint API and is used to &lt;a2&gt;send&lt;/a2&gt;&lt;/a3&gt; and &lt;a4&gt;receive&lt;/a4&gt;&lt;/a5&gt; &lt;a6&gt;datagram packets&lt;/a6&gt;&lt;/a7&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080744Z" creationid="pingfangx" creationdate="20191011T080744Z">
        <seg>&lt;c0&gt;&lt;a1&gt;DatagramSocket&lt;/a1&gt;&lt;/c0&gt; 是 UDP 端点 API，用于 &lt;a2&gt;发送&lt;/a2&gt;&lt;/a3&gt; 和 &lt;a4&gt;接收&lt;/a4&gt;&lt;/a5&gt; &lt;a6&gt;数据包&lt;/a6&gt;&lt;/a7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;HttpURLConnection&lt;/a1&gt;&lt;/c0&gt; is a subclass of URLConnection and provides some additional functionalities specific to the HTTP protocol.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082050Z" creationid="pingfangx" creationdate="20191011T082050Z">
        <seg>&lt;c0&gt;&lt;a1&gt;HttpURLConnection&lt;/a1&gt;&lt;/c0&gt; 是 URLConnection 的子类，提供一些特定于 HTTP 协议的附加功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;Inet4Address&lt;/a1&gt;&lt;/c0&gt; for IPv4 addresses.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080250Z" creationid="pingfangx" creationdate="20191011T080250Z">
        <seg>用于 IPv4 地址的 &lt;c0&gt;&lt;a1&gt;Inet4Address&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;Inet6Address&lt;/a1&gt;&lt;/c0&gt; for IPv6 addresses.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080417Z" creationid="pingfangx" creationdate="20191011T080417Z">
        <seg>用于 IPv6 地址的 &lt;c0&gt;&lt;a1&gt;Inet6Address&lt;/a1&gt;&lt;/c0&gt; 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;MulticastSocket&lt;/a1&gt;&lt;/c0&gt; is a subclass of &lt;c2&gt;DatagramSocket&lt;/c2&gt; used when dealing with multicast groups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080837Z" creationid="pingfangx" creationdate="20191011T080837Z">
        <seg>&lt;c0&gt;&lt;a1&gt;MulticastSocket&lt;/a1&gt;&lt;/c0&gt; 是 &lt;c2&gt;DatagramSocket&lt;/c2&gt; 的子类，在处理多播组时使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;Object.wait&lt;/a1&gt;&lt;/c0&gt; with no timeout</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104604Z" creationid="pingfangx" creationdate="20191014T104604Z">
        <seg>不带超时值的 &lt;c0&gt;&lt;a1&gt;Object.wait&lt;/a1&gt;&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;Semaphore&lt;/a1&gt;&lt;/c0&gt; is a classic concurrency tool.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111506Z" creationid="pingfangx" creationdate="20191025T111506Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Semaphore&lt;/a1&gt;&lt;/c0&gt; 是一个经典的并发工具。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;ServerSocket&lt;/a1&gt;&lt;/c0&gt; is a TCP server API, and will typically &lt;a2&gt;accept&lt;/a2&gt;&lt;/a3&gt; connections from client sockets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080619Z" creationid="pingfangx" creationdate="20191011T080619Z">
        <seg>&lt;c0&gt;&lt;a1&gt;ServerSocket&lt;/a1&gt;&lt;/c0&gt; 是 TCP 服务器 API，通常 &lt;a2&gt;接受&lt;/a2&gt;&lt;/a3&gt; 源于客户端套接字的连接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;Socket&lt;/a1&gt;&lt;/c0&gt; is a TCP client API, and will typically be used to &lt;a2&gt;connect&lt;/a2&gt;&lt;/a3&gt; to a remote host.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080545Z" creationid="pingfangx" creationdate="20191011T080519Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Socket&lt;/a1&gt;&lt;/c0&gt; 是 TCP 客户端 API，通常用于 &lt;a2&gt;连接&lt;/a2&gt;&lt;/a3&gt; 远程主机。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;Thread.join&lt;/a1&gt;&lt;/c0&gt; with no timeout</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104559Z" creationid="pingfangx" creationdate="20191014T104559Z">
        <seg>不带超时值的 &lt;c0&gt;&lt;a1&gt;Thread.join&lt;/a1&gt;&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;URI&lt;/a1&gt;&lt;/c0&gt; is the class representing a Universal Resource Identifier, as specified in RFC 2396.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081106Z" creationid="pingfangx" creationdate="20191011T081106Z">
        <seg>&lt;c0&gt;&lt;a1&gt;URI&lt;/a1&gt;&lt;/c0&gt; 是表示在 RFC 2396 中指定的统一资料标识符的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;URL&lt;/a1&gt;&lt;/c0&gt; is the class representing a Universal Resource Locator, which is both an older concept for URIs and a means to access the resources.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081122Z" creationid="pingfangx" creationdate="20191011T081122Z">
        <seg>&lt;c0&gt;&lt;a1&gt;URL&lt;/a1&gt;&lt;/c0&gt; 是表示统一资源定位符的类，它既是 URI 的旧式概念又是访问资源的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;&lt;a1&gt;URLConnection&lt;/a1&gt;&lt;/c0&gt; is created from a URL and is the communication link used to access the resource pointed by the URL.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081140Z" creationid="pingfangx" creationdate="20191011T081140Z">
        <seg>&lt;c0&gt;&lt;a1&gt;URLConnection&lt;/a1&gt;&lt;/c0&gt; 是根据 URL 创建的，是用于访问 URL 所指向资源的通信链接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;AccessibleObject&lt;/c0&gt; allows suppression of access checks if the necessary &lt;c1&gt;ReflectPermission&lt;/c1&gt; is available.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091021Z" creationid="pingfangx" creationdate="20191012T091021Z">
        <seg>如果必需的 &lt;c0&gt;ReflectPermission&lt;/c0&gt; 可用，则 &lt;c1&gt;AccessibleObject&lt;/c1&gt; 允许抑制访问检查。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Array&lt;/c0&gt; permits widening conversions to occur during a get or set operation, but throws an &lt;c1&gt;IllegalArgumentException&lt;/c1&gt; if a narrowing conversion would occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103417Z" creationid="pingfangx" creationdate="20191015T103406Z">
        <seg>&lt;c0&gt;Array&lt;/c0&gt; 允许在执行 get 或 set 操作期间进行扩展转换，但如果发生收缩转换，则抛出 &lt;c1&gt;IllegalArgumentException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Array&lt;/c0&gt; provides static methods to dynamically create and access arrays.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091028Z" creationid="pingfangx" creationdate="20191012T091028Z">
        <seg>&lt;c0&gt;Array&lt;/c0&gt; 提供动态创建和访问数组的静态方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Builder&lt;/c0&gt; is used to build instances of &lt;c1&gt;Locale&lt;/c1&gt; from values configured by the setters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045816Z" creationid="pingfangx" creationdate="20191012T045816Z">
        <seg>&lt;c0&gt;Builder&lt;/c0&gt; 用于根据 setters 配置的值构建 &lt;c1&gt;Locale&lt;/c1&gt; 的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Class&lt;/c0&gt; has no public constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T024732Z" creationid="pingfangx" creationdate="20191013T024732Z">
        <seg>&lt;c0&gt;Class&lt;/c0&gt; 没有公共构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Condition&lt;/c0&gt; factors out the &lt;c1&gt;Object&lt;/c1&gt; monitor methods (&lt;c2&gt;&lt;a3&gt;wait&lt;/a3&gt;&lt;/c2&gt;, &lt;c4&gt;&lt;a5&gt;notify&lt;/a5&gt;&lt;/c4&gt; and &lt;c6&gt;&lt;a7&gt;notifyAll&lt;/a7&gt;&lt;/c6&gt;) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary &lt;c8&gt;&lt;a9&gt;Lock&lt;/a9&gt;&lt;/c8&gt; implementations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122907Z" creationid="pingfangx" creationdate="20191025T122907Z">
        <seg>&lt;c0&gt;Condition&lt;/c0&gt; 将 &lt;c1&gt;Object&lt;/c1&gt; 监视器方法（&lt;c2&gt;&lt;a3&gt;wait&lt;/a3&gt;&lt;/c2&gt;、&lt;c4&gt;&lt;a5&gt;notify&lt;/a5&gt;&lt;/c4&gt; 和 &lt;c6&gt;&lt;a7&gt;notifyAll&lt;/a7&gt;&lt;/c6&gt;）分解成截然不同的对象，以便通过将这些对象与任意 &lt;c8&gt;&lt;a9&gt;Lock&lt;/a9&gt;&lt;/c8&gt; 实现组合使用，为每个对象提供多个等待 set（wait-set）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Constructor&lt;/c0&gt; permits widening conversions to occur when matching the actual parameters to newInstance() with the underlying constructor's formal parameters, but throws an &lt;c1&gt;IllegalArgumentException&lt;/c1&gt; if a narrowing conversion would occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103944Z" creationid="pingfangx" creationdate="20191015T103944Z">
        <seg>&lt;c0&gt;Constructor&lt;/c0&gt; 允许在将实参与带有底层构造方法的形参的 newInstance() 匹配时进行扩展转换，但是如果发生收缩转换，则抛出 &lt;c1&gt;IllegalArgumentException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Constructor&lt;/c0&gt; provides information about, and access to, a single constructor for a class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092056Z" creationid="pingfangx" creationdate="20191012T092056Z">
        <seg>&lt;c0&gt;Constructor&lt;/c0&gt; 提供关于类的单个构造方法的信息以及对它的访问权限。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;DateFormat&lt;/c0&gt; is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033417Z" creationid="pingfangx" creationdate="20191012T033417Z">
        <seg>&lt;c0&gt;DateFormat&lt;/c0&gt; 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;DateFormatSymbols&lt;/c0&gt; is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033420Z" creationid="pingfangx" creationdate="20191012T033420Z">
        <seg>&lt;c0&gt;DateFormatSymbols&lt;/c0&gt; 是一个公共类，用于封装可本地化的日期-时间格式化数据，如月名、星期几的名称和时区数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;DecimalFormat&lt;/c0&gt; is a concrete subclass of &lt;c1&gt;NumberFormat&lt;/c1&gt; that formats decimal numbers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033423Z" creationid="pingfangx" creationdate="20191012T033423Z">
        <seg>&lt;c0&gt;DecimalFormat&lt;/c0&gt; 是 &lt;c1&gt;NumberFormat&lt;/c1&gt; 的一个具体子类，用于格式化十进制数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;FieldPosition&lt;/c0&gt; is a simple class used by &lt;c1&gt;Format&lt;/c1&gt; and its subclasses to identify fields in formatted output.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033427Z" creationid="pingfangx" creationdate="20191012T033427Z">
        <seg>&lt;c0&gt;FieldPosition&lt;/c0&gt; 是 &lt;c1&gt;Format&lt;/c1&gt; 及其子类用于在格式输出中标识字段的简单类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Format&lt;/c0&gt; is an abstract base class for formatting locale-sensitive information such as dates, messages, and numbers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033429Z" creationid="pingfangx" creationdate="20191012T033429Z">
        <seg>&lt;c0&gt;Format&lt;/c0&gt; 是一个用于格式化语言环境敏感的信息（如日期、消息和数字）的抽象基类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;GenericArrayType&lt;/c0&gt; represents an array type whose component type is either a parameterized type or a type variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091053Z" creationid="pingfangx" creationdate="20191012T091053Z">
        <seg>&lt;c0&gt;GenericArrayType&lt;/c0&gt; 表示一种数组类型，其组件类型为参数化类型或类型变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;GregorianCalendar&lt;/c0&gt; is a concrete subclass of &lt;c1&gt;Calendar&lt;/c1&gt; and provides the standard calendar system used by most of the world.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045627Z" creationid="pingfangx" creationdate="20191012T045627Z">
        <seg>&lt;c0&gt;GregorianCalendar&lt;/c0&gt; 是 &lt;c1&gt;Calendar&lt;/c1&gt; 的一个具体子类，提供了世界上大多数国家/地区使用的标准日历系统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;InvocationHandler&lt;/c0&gt; is the interface implemented by the &lt;i1&gt;invocation handler&lt;/i1&gt; of a proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091104Z" creationid="pingfangx" creationdate="20191012T091104Z">
        <seg>&lt;c0&gt;InvocationHandler&lt;/c0&gt; 是代理实例的 &lt;i1&gt;调用处理程序&lt;/i1&gt; 实现的接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;ListResourceBundle&lt;/c0&gt; is an abstract subclass of &lt;c1&gt;ResourceBundle&lt;/c1&gt; that manages resources for a locale in a convenient and easy to use list.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045747Z" creationid="pingfangx" creationdate="20191012T045747Z">
        <seg>&lt;c0&gt;ListResourceBundle&lt;/c0&gt; 是 &lt;c1&gt;ResourceBundle&lt;/c1&gt; 的一个抽象类，用于管理方便而又易于使用的列表中的语言环境资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Lock&lt;/c0&gt; implementations provide more extensive locking operations than can be obtained using &lt;c1&gt;synchronized&lt;/c1&gt; methods and statements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122911Z" creationid="pingfangx" creationdate="20191025T122911Z">
        <seg>&lt;c0&gt;Lock&lt;/c0&gt; 实现提供了比使用 &lt;c1&gt;synchronized&lt;/c1&gt; 方法和语句可获得的更广泛的锁定操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;MessageFormat&lt;/c0&gt; provides a means to produce concatenated messages in a language-neutral way.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033437Z" creationid="pingfangx" creationdate="20191012T033437Z">
        <seg>&lt;c0&gt;MessageFormat&lt;/c0&gt; 提供了以与语言无关方式生成连接消息的方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;NumberFormat&lt;/c0&gt; is the abstract base class for all number formats.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033442Z" creationid="pingfangx" creationdate="20191012T033442Z">
        <seg>&lt;c0&gt;NumberFormat&lt;/c0&gt; 是所有数值格式的抽象基类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Package&lt;/c0&gt; objects contain version information about the implementation and specification of a Java package.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071502Z" creationid="pingfangx" creationdate="20191012T071502Z">
        <seg>&lt;c0&gt;Package&lt;/c0&gt; 对象包含有关 Java 包的实现和规范的版本信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;ParsePosition&lt;/c0&gt; is a simple class used by &lt;c1&gt;Format&lt;/c1&gt; and its subclasses to keep track of the current position during parsing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033445Z" creationid="pingfangx" creationdate="20191012T033445Z">
        <seg>&lt;c0&gt;ParsePosition&lt;/c0&gt; 是 &lt;c1&gt;Format&lt;/c1&gt; 及其子类所使用的简单类，用来在解析过程中跟踪当前位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;PropertyResourceBundle&lt;/c0&gt; is a concrete subclass of &lt;c1&gt;ResourceBundle&lt;/c1&gt; that manages resources for a locale using a set of static strings from a property file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050048Z" creationid="pingfangx" creationdate="20191012T050048Z">
        <seg>&lt;c0&gt;PropertyResourceBundle&lt;/c0&gt; 是 &lt;c1&gt;ResourceBundle&lt;/c1&gt; 的一个具体子类，它使用属性文件中的静态字符串集来管理语言环境资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Proxy.newProxyInstance&lt;/c0&gt; throws &lt;c1&gt;IllegalArgumentException&lt;/c1&gt; for the same reasons that &lt;c2&gt;Proxy.getProxyClass&lt;/c2&gt; does.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120904Z" creationid="pingfangx" creationdate="20191015T120904Z">
        <seg>&lt;c0&gt;Proxy.newProxyInstance&lt;/c0&gt; 抛出 &lt;c1&gt;IllegalArgumentException&lt;/c1&gt;，原因与 &lt;c2&gt;Proxy.getProxyClass&lt;/c2&gt; 相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;Proxy&lt;/c0&gt; provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092149Z" creationid="pingfangx" creationdate="20191012T092149Z">
        <seg>&lt;c0&gt;Proxy&lt;/c0&gt; 提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;ResourceBundle.Control&lt;/c0&gt; defines a set of callback methods that are invoked by the &lt;c1&gt;&lt;a2&gt;ResourceBundle.getBundle&lt;/a2&gt;&lt;/c1&gt; factory methods during the bundle loading process.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050054Z" creationid="pingfangx" creationdate="20191012T050054Z">
        <seg>&lt;c0&gt;ResourceBundle.Control&lt;/c0&gt; 定义一个回调方法集，它在包加载进程中由 &lt;c1&gt;&lt;a2&gt;ResourceBundle.getBundle&lt;/a2&gt;&lt;/c1&gt; 工厂方法调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;RuntimeException&lt;/c0&gt; is the superclass of those exceptions that can be thrown during the normal operation of the Java Virtual Machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073123Z" creationid="pingfangx" creationdate="20191012T073123Z">
        <seg>&lt;c0&gt;RuntimeException&lt;/c0&gt; 是那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;SimpleDateFormat&lt;/c0&gt; is a concrete class for formatting and parsing dates in a locale-sensitive manner.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033447Z" creationid="pingfangx" creationdate="20191012T033447Z">
        <seg>&lt;c0&gt;SimpleDateFormat&lt;/c0&gt; 是一个以与语言环境有关的方式来格式化和解析日期的具体类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;SimpleTimeZone&lt;/c0&gt; is a concrete subclass of &lt;c1&gt;TimeZone&lt;/c1&gt; that represents a time zone for use with a Gregorian calendar.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050110Z" creationid="pingfangx" creationdate="20191012T050110Z">
        <seg>&lt;c0&gt;SimpleTimeZone&lt;/c0&gt; 是 &lt;c1&gt;TimeZone&lt;/c1&gt; 的具体子类，表示一个使用格里高利历的时区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;StringJoiner&lt;/c0&gt; is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050707Z" creationid="pingfangx" creationdate="20191012T050707Z">
        <seg>&lt;c0&gt;StringJoiner&lt;/c0&gt; 用于构建由分隔符隔开并任选地开始与供给前缀和使用所提供的后缀结束的字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;TimeZone&lt;/c0&gt; represents a time zone offset, and also figures out daylight savings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050213Z" creationid="pingfangx" creationdate="20191012T050213Z">
        <seg>&lt;c0&gt;TimeZone&lt;/c0&gt; 表示时区偏移量，也可以计算夏令时。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;compareAndSet&lt;/c0&gt; and all other read-and-update operations such as &lt;c1&gt;getAndIncrement&lt;/c1&gt; have the memory effects of both reading and writing &lt;c2&gt;volatile&lt;/c2&gt; variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120929Z" creationid="pingfangx" creationdate="20191025T120929Z">
        <seg>&lt;c0&gt;compareAndSet&lt;/c0&gt; 和所有其他的读取和更新操作（如 &lt;c1&gt;getAndIncrement&lt;/c1&gt;）都有读取和写入 &lt;c2&gt;volatile&lt;/c2&gt; 变量的内存效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;get&lt;/c0&gt; has the memory effects of reading a &lt;c1&gt;volatile&lt;/c1&gt; variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120900Z" creationid="pingfangx" creationdate="20191025T120900Z">
        <seg>&lt;c0&gt;get&lt;/c0&gt; 具有读取 &lt;c1&gt;volatile&lt;/c1&gt; 变量的内存效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;lazySet&lt;/c0&gt; has the memory effects of writing (assigning) a &lt;c1&gt;volatile&lt;/c1&gt; variable except that it permits reorderings with subsequent (but not previous) memory actions that do not themselves impose reordering constraints with ordinary non-&lt;c2&gt;volatile&lt;/c2&gt; writes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120910Z" creationid="pingfangx" creationdate="20191025T120910Z">
        <seg>除了允许使用后续（但不是以前的）内存操作，其自身不施加带有普通的非 &lt;c0&gt;volatile&lt;/c0&gt; 写入的重新排序约束，&lt;c1&gt;lazySet&lt;/c1&gt; 具有写入（分配）&lt;c2&gt;volatile&lt;/c2&gt; 变量的内存效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;set&lt;/c0&gt; has the memory effects of writing (assigning) a &lt;c1&gt;volatile&lt;/c1&gt; variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120907Z" creationid="pingfangx" creationdate="20191025T120907Z">
        <seg>&lt;c0&gt;set&lt;/c0&gt; 具有写入（分配）&lt;c1&gt;volatile&lt;/c1&gt; 变量的内存效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the class is a proxy class and &lt;c1&gt;false&lt;/c1&gt; otherwise</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120825Z" creationid="pingfangx" creationdate="20191015T120825Z">
        <seg>如该类为代理类，则为 &lt;c0&gt;true&lt;/c0&gt;，否则为 &lt;c1&gt;false&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the value was replaced</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141259Z" creationid="pingfangx" creationdate="20191025T141259Z">
        <seg>&lt;c0&gt;true&lt;/c0&gt; 如果该值被替换</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c0&gt;weakCompareAndSet&lt;/c0&gt; atomically reads and conditionally writes a variable but does &lt;e1&gt;not&lt;/e1&gt; create any happens-before orderings, so provides no guarantees with respect to previous or subsequent reads and writes of any variables other than the target of the &lt;c2&gt;weakCompareAndSet&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120924Z" creationid="pingfangx" creationdate="20191025T120924Z">
        <seg>&lt;c0&gt;weakCompareAndSet&lt;/c0&gt; 以原子方式读取和有条件地写入变量但&lt;e1&gt;不&lt;/e1&gt; 创建任何 happen-before 排序，因此不提供与除 &lt;c2&gt;weakCompareAndSet&lt;/c2&gt; 目标外任何变量以前或后续读取或写入操作有关的任何保证。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c1&gt;NullPointerException&lt;/c1&gt; objects may be constructed by the virtual machine as if &lt;a2&gt;suppression were disabled and/or the stack trace was not writable&lt;/a2&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104937Z" creationid="pingfangx" creationdate="20191014T104937Z">
        <seg>&lt;c1&gt;NullPointerException&lt;/c1&gt; 对象可以由虚拟机被构造为如果 &lt;a2&gt;抑制被禁用和/或堆栈跟踪是不可写&lt;/a2&gt;&lt;/a3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c2&gt;UndeclaredThrowableException&lt;/c2&gt; extends &lt;c3&gt;RuntimeException&lt;/c3&gt;, so it is an unchecked exception that wraps a checked exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111057Z" creationid="pingfangx" creationdate="20191015T111057Z">
        <seg>&lt;c2&gt;UndeclaredThrowableException&lt;/c2&gt; 扩展了 &lt;c3&gt;RuntimeException&lt;/c3&gt;，因此它是一个包装已检查异常的未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c3&gt;&lt;a4&gt;AtomicReferenceFieldUpdater&lt;/a4&gt;&lt;/c3&gt;, &lt;c5&gt;&lt;a6&gt;AtomicIntegerFieldUpdater&lt;/a6&gt;&lt;/c5&gt;, and &lt;c7&gt;&lt;a8&gt;AtomicLongFieldUpdater&lt;/a8&gt;&lt;/c7&gt; are reflection-based utilities that provide access to the associated field types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121845Z" creationid="pingfangx" creationdate="20191025T121845Z">
        <seg>&lt;c3&gt;&lt;a4&gt;AtomicReferenceFieldUpdater&lt;/a4&gt;&lt;/c3&gt;、&lt;c5&gt;&lt;a6&gt;AtomicIntegerFieldUpdater&lt;/a6&gt;&lt;/c5&gt; 和 &lt;c7&gt;&lt;a8&gt;AtomicLongFieldUpdater&lt;/a8&gt;&lt;/c7&gt; 是基于反射的实用工具，可以提供对关联字段类型的访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;c5&gt;&lt;a6&gt;ExecutorService&lt;/a6&gt;&lt;/c5&gt; provides a more complete asynchronous task execution framework.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110500Z" creationid="pingfangx" creationdate="20191025T110500Z">
        <seg>&lt;c5&gt;&lt;a6&gt;ExecutorService&lt;/a6&gt;&lt;/c5&gt; 提供了多个完整的异步任务执行框架。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;e0&gt; Direct handoffs.&lt;/e0&gt; A good default choice for a work queue is a &lt;c1&gt;&lt;a2&gt;SynchronousQueue&lt;/a2&gt;&lt;/c1&gt; that hands off tasks to threads without otherwise holding them.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125003Z" creationid="pingfangx" creationdate="20191025T125003Z">
        <seg>&lt;e0&gt; 直接提交。&lt;/e0&gt;工作队列的默认选项是 &lt;c1&gt;&lt;a2&gt;SynchronousQueue&lt;/a2&gt;&lt;/c1&gt;，它将任务直接提交给线程而不保持它们。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;e0&gt; This class was deprecated in API level 1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T031502Z" creationid="pingfangx" creationdate="20191012T031502Z">
        <seg>&lt;e0&gt; 此类在 API 级别 17 中已弃用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;e0&gt; Unbounded queues.&lt;/e0&gt; Using an unbounded queue (for example a &lt;c1&gt;&lt;a2&gt;LinkedBlockingQueue&lt;/a2&gt;&lt;/c1&gt; without a predefined capacity) will cause new tasks to wait in the queue when all corePoolSize threads are busy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125049Z" creationid="pingfangx" creationdate="20191025T125049Z">
        <seg>&lt;e0&gt; 无界队列。&lt;/e0&gt;使用无界队列（例如，不具有预定义容量的 &lt;c1&gt;&lt;a2&gt;LinkedBlockingQueue&lt;/a2&gt;&lt;/c1&gt;）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;e0&gt;Bounded queues.&lt;/e0&gt; A bounded queue (for example, an &lt;c1&gt;&lt;a2&gt;ArrayBlockingQueue&lt;/a2&gt;&lt;/c1&gt;) helps prevent resource exhaustion when used with finite maximumPoolSizes, but can be more difficult to tune and control.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125427Z" creationid="pingfangx" creationdate="20191025T125427Z">
        <seg>&lt;e0&gt;有界队列。&lt;/e0&gt;当使用有限的 maximumPoolSizes 时，有界队列（如 &lt;c1&gt;&lt;a2&gt;ArrayBlockingQueue&lt;/a2&gt;&lt;/c1&gt;）有助于防止资源耗尽，但是可能较难调整和控制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;A High Level API&lt;/i0&gt;, which deals with the following abstractions:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074517Z" creationid="pingfangx" creationdate="20191011T074517Z">
        <seg>&lt;i0&gt;高级 API&lt;/i0&gt;，用于处理以下抽象：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;A Low Level API&lt;/i0&gt;, which deals with the following abstractions:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074500Z" creationid="pingfangx" creationdate="20191011T074500Z">
        <seg>&lt;i0&gt;低级 API&lt;/i0&gt;，用于处理以下抽象：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;Addresses&lt;/i0&gt;, which are networking identifiers, like IP addresses.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074510Z" creationid="pingfangx" creationdate="20191011T074510Z">
        <seg>&lt;i0&gt;地址&lt;/i0&gt;，也就是网络标识符，如 IP 地址。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;Connections&lt;/i0&gt;, which represents connections to the resource pointed to by &lt;i1&gt;URLs&lt;/i1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074525Z" creationid="pingfangx" creationdate="20191011T074525Z">
        <seg>&lt;i0&gt;连接&lt;/i0&gt;，表示到 &lt;i1&gt;URL&lt;/i1&gt;所指向资源的连接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;Interfaces&lt;/i0&gt;, which describe network interfaces.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074515Z" creationid="pingfangx" creationdate="20191011T074515Z">
        <seg>&lt;i0&gt;接口&lt;/i0&gt;，用于描述网络接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;Selectors&lt;/i0&gt; and &lt;i1&gt;selection keys&lt;/i1&gt;, which together with</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T101927Z" creationid="pingfangx" creationdate="20191011T101901Z">
        <seg>&lt;i0&gt;选择器&lt;/i0&gt; 和 &lt;i1&gt;选择键&lt;/i1&gt;，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;Sockets&lt;/i0&gt;, which are basic bidirectional data communication mechanisms.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074512Z" creationid="pingfangx" creationdate="20191011T074512Z">
        <seg>&lt;i0&gt;套接字&lt;/i0&gt;，也就是基本双向数据通信机制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;URIs&lt;/i0&gt;, which represent Universal Resource Identifiers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074519Z" creationid="pingfangx" creationdate="20191011T074519Z">
        <seg>&lt;i0&gt;URI&lt;/i0&gt;，表示统一资源标识符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;URLs&lt;/i0&gt;, which represent Universal Resource Locators.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074520Z" creationid="pingfangx" creationdate="20191011T074520Z">
        <seg>&lt;i0&gt;URL&lt;/i0&gt;，表示统一资源定位符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;i0&gt;selectable channels&lt;/i0&gt; define a &lt;a1&gt;multiplexed, non-blocking</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102110Z" creationid="pingfangx" creationdate="20191011T101947Z">
        <seg>它们与 &lt;i0&gt;可选择信道&lt;/i0&gt; 一起定义了 &lt;a1&gt;多路复用、非阻塞 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Note that this class is not synchronized.&lt;/s0&gt; If multiple threads access a &lt;c1&gt;ProcessBuilder&lt;/c1&gt; instance concurrently, and at least one of the threads modifies one of the attributes structurally, it &lt;i2&gt;must&lt;/i2&gt; be synchronized externally.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075851Z" creationid="pingfangx" creationdate="20191014T075851Z">
        <seg>&lt;s0&gt;注意，此类不是同步的。&lt;/s0&gt;如果多个线程同时访问一个 &lt;c1&gt;ProcessBuilder&lt;/c1&gt;，而其中至少一个线程从结构上修改了其中一个属性，它&lt;i2&gt;必须&lt;/i2&gt; 保持外部同步。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Note that this implementation is not synchronized.&lt;/s0&gt; If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it &lt;i1&gt;must&lt;/i1&gt; be synchronized externally.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134529Z" creationid="pingfangx" creationdate="20191025T134529Z">
        <seg>&lt;s0&gt;注意，此实现不是同步的。&lt;/s0&gt;如果多个线程同时访问一个哈希映射，而其中至少一个线程从结构上修改了该映射，则它&lt;i1&gt;必须&lt;/i1&gt; 保持外部同步。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Which best describes your business:&lt;/s0&gt;&lt;s1&gt;*&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114425Z" creationid="pingfangx" creationdate="20191011T114425Z">
        <seg>&lt;s0&gt;Which best describes your business:&lt;/s0&gt;&lt;s1&gt;*&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;t0&gt;Class&lt;/t0&gt; objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071607Z" creationid="pingfangx" creationdate="20191014T071607Z">
        <seg>数组类的 &lt;t0&gt;Class&lt;/t0&gt; 对象不是由类加载器创建的，而是由 Java 运行时根据需要自动创建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;t0&gt;true&lt;/t0&gt; if this map contains a mapping for the specified key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140557Z" creationid="pingfangx" creationdate="20191025T140557Z">
        <seg>如果此映射包含对于指定键的映射关系，则返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;t0&gt;true&lt;/t0&gt; if this map contains no key-value mappings</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141109Z" creationid="pingfangx" creationdate="20191025T141109Z">
        <seg>如果此映射不包含键-值映射关系，则返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;t0&gt;true&lt;/t0&gt; if this map maps one or more keys to the         specified value</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095020Z" creationid="pingfangx" creationdate="20191026T095020Z">
        <seg>如果此映射将一个或多个键映射到指定值，则返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;t0&gt;true&lt;/t0&gt; if this map maps one or more keys to the specified value</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140617Z" creationid="pingfangx" creationdate="20191025T140617Z">
        <seg>如果此映射将一个或多个键映射到指定值，则返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;t2&gt;ThreadLocal&lt;/t2&gt; instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095852Z" creationid="pingfangx" creationdate="20191014T095852Z">
        <seg>&lt;t2&gt;ThreadLocal&lt;/t2&gt; 实例通常是类中的 private static 字段，它们希望将状态与某一个线程（例如，用户 ID 或事务 ID）相关联。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;a0&gt;blocking queue&lt;/a0&gt;&lt;/a1&gt; in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114151Z" creationid="pingfangx" creationdate="20191025T114151Z">
        <seg>一种&lt;a0&gt;阻塞队列&lt;/a0&gt;&lt;/a1&gt;，其中每个插入操作必须等待另一个线程的对应移除操作 ，反之亦然。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;BlockingQueue&lt;/a1&gt;&lt;/c0&gt; in which producers may wait for consumers to receive elements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115754Z" creationid="pingfangx" creationdate="20191025T115754Z">
        <seg>&lt;c0&gt;&lt;a1&gt;BlockingQueue&lt;/a1&gt;&lt;/c0&gt; 是生产者可以等待消费者接收元素的一种阻塞队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;CompletionService&lt;/a1&gt;&lt;/c0&gt; that uses a supplied &lt;c2&gt;&lt;a3&gt;Executor&lt;/a3&gt;&lt;/c2&gt; to execute tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114120Z" creationid="pingfangx" creationdate="20191025T114120Z">
        <seg>使用提供的 &lt;c0&gt;&lt;a1&gt;Executor&lt;/a1&gt;&lt;/c0&gt; 来执行任务的 &lt;c2&gt;&lt;a3&gt;CompletionService&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;ConcurrentMap&lt;/a1&gt;&lt;/c0&gt; supporting &lt;c2&gt;&lt;a3&gt;NavigableMap&lt;/a3&gt;&lt;/c2&gt; operations, and recursively so for its navigable sub-maps.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113932Z" creationid="pingfangx" creationdate="20191025T113932Z">
        <seg>支持 &lt;c0&gt;&lt;a1&gt;NavigableMap&lt;/a1&gt;&lt;/c0&gt; 操作，且以递归方式支持其可导航子映射的 &lt;c2&gt;&lt;a3&gt;ConcurrentMap&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;CyclicBarrier&lt;/a1&gt;&lt;/c0&gt; is a resettable multiway synchronization point useful in some styles of parallel programming.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111826Z" creationid="pingfangx" creationdate="20191025T111826Z">
        <seg>&lt;c0&gt;&lt;a1&gt;CyclicBarrier&lt;/a1&gt;&lt;/c0&gt; 是一个可重置的多路同步点，在某些并行编程风格中很有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Deque&lt;/a1&gt;&lt;/c0&gt; that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113857Z" creationid="pingfangx" creationdate="20191025T113857Z">
        <seg>支持两个附加操作的 &lt;c0&gt;&lt;a1&gt;Queue&lt;/a1&gt;&lt;/c0&gt;，这两个操作是：获取元素时等待双端队列变为非空；存储元素时等待双端队列中的空间变得可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;ForkJoinTask&lt;/a1&gt;&lt;/c0&gt; with a completion action performed when triggered and there are no remaining pending actions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120129Z" creationid="pingfangx" creationdate="20191025T120129Z">
        <seg>&lt;c0&gt;&lt;a1&gt;ForkJoinTask&lt;/a1&gt;&lt;/c0&gt; 触发时执行完成操作，并且没有剩余的挂起操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Future&lt;/a1&gt;&lt;/c0&gt; that is &lt;c2&gt;&lt;a3&gt;Runnable&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113959Z" creationid="pingfangx" creationdate="20191025T113959Z">
        <seg>作为 &lt;c0&gt;&lt;a1&gt;Runnable&lt;/a1&gt;&lt;/c0&gt; 的 &lt;c2&gt;&lt;a3&gt;Future&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Future&lt;/a1&gt;&lt;/c0&gt; that may be explicitly completed (setting its value and status), and may be used as a &lt;c2&gt;&lt;a3&gt;CompletionStage&lt;/a3&gt;&lt;/c2&gt;, supporting dependent functions and actions that trigger upon its completion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115806Z" creationid="pingfangx" creationdate="20191025T115806Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Future&lt;/a1&gt;&lt;/c0&gt; 可以被显式地完成(设定其值和状态)，并且可以被用作 &lt;c2&gt;&lt;a3&gt;CompletionStage&lt;/a3&gt;&lt;/c2&gt;，支持有关的功能，并在完成时触发动作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt; providing thread safety and atomicity guarantees.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115549Z" creationid="pingfangx" creationdate="20191025T115549Z">
        <seg>提供线程安全和原子性保证的 &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt; that further provides a &lt;e2&gt;total ordering&lt;/e2&gt; on its keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T044815Z" creationid="pingfangx" creationdate="20191012T044815Z">
        <seg>进一步提供关于键的 &lt;e2&gt;总体排序&lt;/e2&gt; 的 &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;NavigableSet&lt;/a1&gt;&lt;/c0&gt; implementation based on a &lt;c2&gt;&lt;a3&gt;TreeMap&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050221Z" creationid="pingfangx" creationdate="20191012T050221Z">
        <seg>基于 &lt;c0&gt;&lt;a1&gt;TreeMap&lt;/a1&gt;&lt;/c0&gt; 的 &lt;c2&gt;&lt;a3&gt;NavigableSet&lt;/a3&gt;&lt;/c2&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Phaser&lt;/a1&gt;&lt;/c0&gt; provides a more flexible form of barrier that may be used to control phased computation among multiple threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111838Z" creationid="pingfangx" creationdate="20191025T111838Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Phaser&lt;/a1&gt;&lt;/c0&gt; 提供了可用于控制在多个线程之间分阶段计算屏障的更灵活的形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Queue&lt;/a1&gt;&lt;/c0&gt; that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113901Z" creationid="pingfangx" creationdate="20191025T113901Z">
        <seg>支持两个附加操作的 &lt;c0&gt;&lt;a1&gt;Queue&lt;/a1&gt;&lt;/c0&gt;，这两个操作是：获取元素时等待队列变为非空，以及存储元素时等待空间变得可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;ScheduledFuture&lt;/a1&gt;&lt;/c0&gt; that is &lt;c2&gt;&lt;a3&gt;Runnable&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114002Z" creationid="pingfangx" creationdate="20191025T114002Z">
        <seg>作为 &lt;c0&gt;&lt;a1&gt;Runnable&lt;/a1&gt;&lt;/c0&gt; 的 &lt;c2&gt;&lt;a3&gt;ScheduledFuture&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; that further provides a &lt;i2&gt;total ordering&lt;/i2&gt; on its elements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T044827Z" creationid="pingfangx" creationdate="20191012T044827Z">
        <seg>进一步提供关于元素的 &lt;i2&gt;总体排序&lt;/i2&gt; 的 &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; that uses an internal &lt;c2&gt;&lt;a3&gt;CopyOnWriteArrayList&lt;/a3&gt;&lt;/c2&gt; for all of its operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114052Z" creationid="pingfangx" creationdate="20191025T114052Z">
        <seg>对其所有操作使用内部 &lt;c0&gt;&lt;a1&gt;CopyOnWriteArrayList&lt;/a1&gt;&lt;/c0&gt; 的 &lt;c2&gt;&lt;a3&gt;Set&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;SortedMap&lt;/a1&gt;&lt;/c0&gt; extended with navigation methods returning the closest matches for given search targets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034530Z" creationid="pingfangx" creationdate="20191012T034530Z">
        <seg>扩展的 &lt;c0&gt;&lt;a1&gt;SortedMap&lt;/a1&gt;&lt;/c0&gt;，具有了针对给定搜索目标返回最接近匹配项的导航方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;SortedSet&lt;/a1&gt;&lt;/c0&gt; extended with navigation methods reporting closest matches for given search targets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034536Z" creationid="pingfangx" creationdate="20191012T034536Z">
        <seg>扩展的 &lt;c0&gt;&lt;a1&gt;SortedSet&lt;/a1&gt;&lt;/c0&gt;，具有了为给定搜索目标报告最接近匹配项的导航方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor&lt;/a1&gt;&lt;/c0&gt; that can additionally schedule commands to run after a given delay, or to execute periodically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114141Z" creationid="pingfangx" creationdate="20191025T114141Z">
        <seg>&lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor&lt;/a1&gt;&lt;/c0&gt;，它可另行安排在给定的延迟后运行命令，或者定期执行命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;BufferedInputStream&lt;/c0&gt; adds functionality to another input stream-namely, the ability to buffer the input and to support the &lt;c1&gt;mark&lt;/c1&gt; and &lt;c2&gt;reset&lt;/c2&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094613Z" creationid="pingfangx" creationdate="20191010T094613Z">
        <seg>&lt;c0&gt;BufferedInputStream&lt;/c0&gt; 为另一个输入流添加一些功能，即缓冲输入以及支持 &lt;c1&gt;mark&lt;/c1&gt; 和 &lt;c2&gt;reset&lt;/c2&gt; 方法的能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;ByteArrayInputStream&lt;/c0&gt; contains an internal buffer that contains bytes that may be read from the stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094643Z" creationid="pingfangx" creationdate="20191010T094643Z">
        <seg>&lt;c0&gt;ByteArrayInputStream&lt;/c0&gt; 包含一个内部缓冲区，该缓冲区包含从流中读取的字节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;ChoiceFormat&lt;/c0&gt; allows you to attach a format to a range of numbers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033209Z" creationid="pingfangx" creationdate="20191012T033209Z">
        <seg>&lt;c0&gt;ChoiceFormat&lt;/c0&gt; 允许将格式应用到某个范围的数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;Closeable&lt;/c0&gt; is a source or destination of data that can be closed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094018Z" creationid="pingfangx" creationdate="20191010T094018Z">
        <seg>&lt;c0&gt;Closeable&lt;/c0&gt; 是可以关闭的数据源或目标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;CollationKey&lt;/c0&gt; represents a &lt;c1&gt;String&lt;/c1&gt; under the rules of a specific &lt;c2&gt;Collator&lt;/c2&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033217Z" creationid="pingfangx" creationdate="20191012T033217Z">
        <seg>&lt;c0&gt;CollationKey&lt;/c0&gt; 表示遵守特定 &lt;c1&gt;Collator&lt;/c1&gt; 对象规则的 &lt;c2&gt;String&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;Field&lt;/c0&gt; permits widening conversions to occur during a get or set access operation, but throws an &lt;c1&gt;IllegalArgumentException&lt;/c1&gt; if a narrowing conversion would occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104503Z" creationid="pingfangx" creationdate="20191015T104503Z">
        <seg>&lt;c0&gt;Array&lt;/c0&gt; 允许在执行 get 或 set 访问操作期间进行扩展转换，但如果将发生收缩转换，则抛出一个 &lt;c1&gt;IllegalArgumentException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;Field&lt;/c0&gt; provides information about, and dynamic access to, a single field of a class or an interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092107Z" creationid="pingfangx" creationdate="20191012T092107Z">
        <seg>&lt;c0&gt;Field&lt;/c0&gt; 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;FileInputStream&lt;/c0&gt; obtains input bytes from a file in a file system.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094748Z" creationid="pingfangx" creationdate="20191010T094748Z">
        <seg>&lt;c0&gt;FileInputStream&lt;/c0&gt; 从文件系统中的某个文件中获得输入字节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;FilterInputStream&lt;/c0&gt; contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100738Z" creationid="pingfangx" creationdate="20191010T100738Z">
        <seg>&lt;c0&gt;FilterInputStream&lt;/c0&gt; 包含其他一些输入流，它将这些流用作其基本数据源，它可以直接传输数据或提供一些额外的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;Future&lt;/c0&gt; represents the result of an asynchronous computation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113954Z" creationid="pingfangx" creationdate="20191025T113954Z">
        <seg>&lt;c0&gt;Future&lt;/c0&gt; 表示异步计算的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;KeyStore&lt;/c0&gt; entry that holds a &lt;c1&gt;PrivateKey&lt;/c1&gt; and corresponding certificate chain.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032404Z" creationid="pingfangx" creationdate="20191012T032404Z">
        <seg>保存 &lt;c0&gt;PrivateKey&lt;/c0&gt; 和相应证书链的 &lt;c1&gt;KeyStore&lt;/c1&gt; 项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;KeyStore&lt;/c0&gt; entry that holds a &lt;c1&gt;SecretKey&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032406Z" creationid="pingfangx" creationdate="20191012T032406Z">
        <seg>保存 &lt;c0&gt;SecretKey&lt;/c0&gt; 的 &lt;c1&gt;KeyStore&lt;/c1&gt; 项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;KeyStore&lt;/c0&gt; entry that holds a trusted &lt;c1&gt;Certificate&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032409Z" creationid="pingfangx" creationdate="20191012T032409Z">
        <seg>保存可信的 &lt;c0&gt;Certificate&lt;/c0&gt; 的 &lt;c1&gt;KeyStore&lt;/c1&gt; 项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;Locale&lt;/c0&gt; object represents a specific geographical, political, or cultural region.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045753Z" creationid="pingfangx" creationdate="20191012T045753Z">
        <seg>&lt;c0&gt;Locale&lt;/c0&gt; 对象表示了特定的地理、政治和文化地区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;Method&lt;/c0&gt; permits widening conversions to occur when matching the actual parameters to invoke with the underlying method's formal parameters, but it throws an &lt;c1&gt;IllegalArgumentException&lt;/c1&gt; if a narrowing conversion would occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110139Z" creationid="pingfangx" creationdate="20191015T110139Z">
        <seg>&lt;c0&gt;Method&lt;/c0&gt; 允许在匹配要调用的实参与底层方法的形参时进行扩展转换；但如果要进行收缩转换，则会抛出 &lt;c1&gt;IllegalArgumentException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;Method&lt;/c0&gt; provides information about, and access to, a single method on a class or interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092140Z" creationid="pingfangx" creationdate="20191012T092140Z">
        <seg>&lt;c0&gt;Method&lt;/c0&gt; 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;PrintStream&lt;/c0&gt; adds functionality to another output stream, namely the ability to print representations of various data values conveniently.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102725Z" creationid="pingfangx" creationdate="20191010T102725Z">
        <seg>&lt;c0&gt;PrintStream&lt;/c0&gt; 为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;PushbackInputStream&lt;/c0&gt; adds functionality to another input stream, namely the ability to "push back" or "unread" one byte.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102733Z" creationid="pingfangx" creationdate="20191010T102733Z">
        <seg>&lt;c0&gt;PushbackInputStream&lt;/c0&gt; 为另一个输入流添加性能，即“推回 (push back)”或“取消读取 (unread)”一个字节的能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;ReadWriteLock&lt;/c0&gt; maintains a pair of associated &lt;c1&gt;&lt;a2&gt;locks&lt;/a2&gt;&lt;/c1&gt;, one for read-only operations and one for writing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122917Z" creationid="pingfangx" creationdate="20191025T122917Z">
        <seg>&lt;c0&gt;ReadWriteLock&lt;/c0&gt; 维护了一对相关的&lt;c1&gt;&lt;a2&gt;锁&lt;/a2&gt;&lt;/c1&gt;，一个用于只读操作，另一个用于写入操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;SecurityException&lt;/c0&gt; is raised if &lt;c1&gt;flag&lt;/c1&gt; is &lt;c2&gt;true&lt;/c2&gt; but accessibility of any of the elements of the input &lt;c3&gt;array&lt;/c3&gt; may not be changed (for example, if the element object is a &lt;c4&gt;&lt;a5&gt;Constructor&lt;/a5&gt;&lt;/c4&gt; object for the class &lt;c6&gt;&lt;a7&gt;Class&lt;/a7&gt;&lt;/c6&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T091220Z" creationid="pingfangx" creationdate="20191015T091117Z">
        <seg>如果 &lt;c1&gt;flag&lt;/c1&gt; 为 &lt;c2&gt;true&lt;/c2&gt;，但是不能更改输入 &lt;c3&gt;array&lt;/c3&gt; 的任何元素的可访问性（例如，如果元素对象是 &lt;c6&gt;&lt;a7&gt;Class&lt;/a7&gt;&lt;/c6&gt; 类的 &lt;c4&gt;&lt;a5&gt;Constructor&lt;/a5&gt;&lt;/c4&gt; 对象），则会引发 &lt;c0&gt;SecurityException&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;SecurityException&lt;/c0&gt; is raised if &lt;c1&gt;flag&lt;/c1&gt; is &lt;c2&gt;true&lt;/c2&gt; but accessibility of this object may not be changed (for example, if this element object is a &lt;c3&gt;&lt;a4&gt;Constructor&lt;/a4&gt;&lt;/c3&gt; object for the class &lt;c5&gt;&lt;a6&gt;Class&lt;/a6&gt;&lt;/c5&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T091000Z" creationid="pingfangx" creationdate="20191015T090726Z">
        <seg>如果 &lt;c1&gt;flag&lt;/c1&gt; 为 &lt;c2&gt;true&lt;/c2&gt;，并且不能更改此对象的可访问性（例如，如果此元素对象是 &lt;c5&gt;&lt;a6&gt;Class&lt;/a6&gt;&lt;/c5&gt; 类的 &lt;c3&gt;&lt;a4&gt;Constructor&lt;/a4&gt;&lt;/c3&gt; 对象），则会引发 &lt;c0&gt;SecurityException&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;SecurityException&lt;/c0&gt; is raised if this object is a &lt;c1&gt;&lt;a2&gt;Constructor&lt;/a2&gt;&lt;/c1&gt; object for the class &lt;c3&gt;java.lang.Class&lt;/c3&gt;, and &lt;c4&gt;flag&lt;/c4&gt; is true.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090728Z" creationid="pingfangx" creationdate="20191015T090728Z">
        <seg>如果此对象是 &lt;c0&gt;java.lang.Class&lt;/c0&gt; 类的 &lt;c1&gt;&lt;a2&gt;Constructor&lt;/a2&gt;&lt;/c1&gt; 对象，并且 &lt;c3&gt;flag&lt;/c3&gt; 为 true，则会引发 &lt;c4&gt;SecurityException&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;SequenceInputStream&lt;/c0&gt; represents the logical concatenation of other input streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102802Z" creationid="pingfangx" creationdate="20191010T102802Z">
        <seg>&lt;c0&gt;SequenceInputStream&lt;/c0&gt; 表示其他输入流的逻辑串联。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;String&lt;/c0&gt; represents a string in the UTF-16 format in which &lt;e1&gt;supplementary characters&lt;/e1&gt; are represented by &lt;e2&gt;surrogate pairs&lt;/e2&gt; (see the section &lt;a3&gt;Unicode Character Representations&lt;/a3&gt; in the &lt;c4&gt;Character&lt;/c4&gt; class for more information).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022332Z" creationid="pingfangx" creationdate="20191014T022256Z">
        <seg>&lt;c0&gt;String&lt;/c0&gt; 表示一个 UTF-16 格式的字符串，其中的&lt;e1&gt;增补字符&lt;/e1&gt; 由&lt;e2&gt;代理项对&lt;/e2&gt; 表示（有关详细信息，请参阅 &lt;a3&gt;Character&lt;/a3&gt; 类中的 &lt;c4&gt;Unicode 字符表示形式&lt;/c4&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; will automatically adjust the pool size (see &lt;c1&gt;&lt;a2&gt;getPoolSize()&lt;/a2&gt;&lt;/c1&gt;) according to the bounds set by corePoolSize (see &lt;c3&gt;&lt;a4&gt;getCorePoolSize()&lt;/a4&gt;&lt;/c3&gt;) and maximumPoolSize (see &lt;c5&gt;&lt;a6&gt;getMaximumPoolSize()&lt;/a6&gt;&lt;/c5&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123911Z" creationid="pingfangx" creationdate="20191025T123701Z">
        <seg>&lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; 将根据 corePoolSize（参见 &lt;c3&gt;&lt;a4&gt;getCorePoolSize()&lt;/a4&gt;&lt;/c3&gt;）和 maximumPoolSize（参见 &lt;c5&gt;&lt;a6&gt;getMaximumPoolSize()&lt;/a6&gt;&lt;/c5&gt;）设置的边界自动调整池大小（参见 &lt;c1&gt;&lt;a2&gt;getPoolSize()&lt;/a2&gt;&lt;/c1&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;TimeUnit&lt;/c0&gt; represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114221Z" creationid="pingfangx" creationdate="20191025T114221Z">
        <seg>&lt;c0&gt;TimeUnit&lt;/c0&gt; 表示给定单元粒度的时间段，它提供在这些单元中进行跨单元转换和执行计时及延迟操作的实用工具方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;boolean&lt;/c0&gt; value that may be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122443Z" creationid="pingfangx" creationdate="20191025T122443Z">
        <seg>可以用原子方式更新的 &lt;c0&gt;boolean&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;char&lt;/c0&gt; value, therefore, represents Basic Multilingual Plane (BMP) code points, including the surrogate code points, or code units of the UTF-16 encoding.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143427Z" creationid="pingfangx" creationdate="20191013T143427Z">
        <seg>所以，&lt;c0&gt;char&lt;/c0&gt; 值表示 Basic Multilingual Plane (BMP) 代码点，其中包括代理项代码点，或 UTF-16 编码的代码单元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;long&lt;/c0&gt; array in which elements may be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122449Z" creationid="pingfangx" creationdate="20191025T122449Z">
        <seg>可以用原子方式更新其元素的 &lt;c0&gt;long&lt;/c0&gt; 数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c0&gt;long&lt;/c0&gt; value that may be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122449Z" creationid="pingfangx" creationdate="20191025T122449Z">
        <seg>可以用原子方式更新的 &lt;c0&gt;long&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c13&gt;&lt;a14&gt;Future&lt;/a14&gt;&lt;/c13&gt; returns the results of a function, allows determination of whether execution has completed, and provides a means to cancel execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110547Z" creationid="pingfangx" creationdate="20191025T110547Z">
        <seg>&lt;c13&gt;&lt;a14&gt;Future&lt;/a14&gt;&lt;/c13&gt; 返回函数的结果，允许确定执行是否完成，并提供取消执行的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c14&gt;CopyOnWriteArrayList&lt;/c14&gt; is preferable to a synchronized &lt;c15&gt;ArrayList&lt;/c15&gt; when the expected number of reads and traversals greatly outnumber the number of updates to a list.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111956Z" creationid="pingfangx" creationdate="20191025T111956Z">
        <seg>当期望的读数和遍历远远大于列表的更新数时，&lt;c14&gt;CopyOnWriteArrayList&lt;/c14&gt; 优于同步的 &lt;c15&gt;ArrayList&lt;/c15&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c15&gt;&lt;a16&gt;RunnableFuture&lt;/a16&gt;&lt;/c15&gt; is a &lt;c17&gt;Future&lt;/c17&gt; that possesses a &lt;c18&gt;run&lt;/c18&gt; method that upon execution, sets its results.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110716Z" creationid="pingfangx" creationdate="20191025T110716Z">
        <seg>&lt;c15&gt;&lt;a16&gt;RunnableFuture&lt;/a16&gt;&lt;/c15&gt; 是拥有 &lt;c18&gt;run&lt;/c18&gt; 方法的 &lt;c17&gt;Future&lt;/c17&gt;，run 方法执行时将设置其结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c3&gt;char&lt;/c3&gt; value represents a character in the &lt;i4&gt;Basic Multilingual Plane (BMP)&lt;/i4&gt; or a surrogate.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070345Z" creationid="pingfangx" creationdate="20191014T070345Z">
        <seg>&lt;c3&gt;char&lt;/c3&gt; 值表示 &lt;i4&gt;Basic Multilingual Plane (BMP)&lt;/i4&gt; 或代理项中的一个字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;c5&gt;false&lt;/c5&gt; return means only that the operation may be retried if desired, relying on the guarantee that repeated invocation when the variable holds &lt;c6&gt;expectedValue&lt;/c6&gt; and no other thread is also attempting to set the variable will eventually succeed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122013Z" creationid="pingfangx" creationdate="20191025T121956Z">
        <seg>返回 &lt;c5&gt;false&lt;/c5&gt; 仅意味着可以在需要时重新尝试操作，具体取决于重复执行调用的保证，当该变量保持 &lt;c6&gt;expectedValue&lt;/c6&gt; 并且没有其他线程也在尝试设置该变量时，最终将获得成功。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;e0&gt;reference object&lt;/e0&gt; encapsulates a reference to some other object so that the reference itself may be examined and manipulated like any other object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085509Z" creationid="pingfangx" creationdate="20191012T085509Z">
        <seg>&lt;e0&gt;引用对象&lt;/e0&gt; 封装了对另一个对象的引用，这样就可以像其他任何对象一样检查和操作引用自身。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;i0&gt;buffer&lt;/i0&gt; is a container for a fixed amount of data of a specific primitive type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102835Z" creationid="pingfangx" creationdate="20191011T102835Z">
        <seg>&lt;i0&gt;缓冲区&lt;/i0&gt; 是一个固定数据量的指定基本类型的数据容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;i0&gt;dynamic proxy class&lt;/i0&gt; (simply referred to as a &lt;i1&gt;proxy class&lt;/i1&gt; below) is a class that implements a list of interfaces specified at runtime when the class is created, with behavior as described below.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111925Z" creationid="pingfangx" creationdate="20191015T111925Z">
        <seg>&lt;i0&gt;动态代理类&lt;/i0&gt;（以下简称为&lt;i1&gt;代理类&lt;/i1&gt;）是一个实现在创建类时在运行时指定的接口列表的类，该类具有下面描述的行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;i0&gt;thread&lt;/i0&gt; is a thread of execution in a program.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071721Z" creationid="pingfangx" creationdate="20191012T071721Z">
        <seg>&lt;i0&gt;线程&lt;/i0&gt; 是程序中的执行线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;i2&gt;proxy interface&lt;/i2&gt; is such an interface that is implemented by a proxy class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112139Z" creationid="pingfangx" creationdate="20191015T112139Z">
        <seg>&lt;i2&gt;代理接口&lt;/i2&gt; 是代理类实现的一个接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;i3&gt;proxy instance&lt;/i3&gt; is an instance of a proxy class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112147Z" creationid="pingfangx" creationdate="20191015T112147Z">
        <seg>&lt;i3&gt;代理实例&lt;/i3&gt; 是代理类的一个实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;t0&gt;CharSequence&lt;/t0&gt; is a readable sequence of &lt;c1&gt;char&lt;/c1&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065701Z" creationid="pingfangx" creationdate="20191012T065701Z">
        <seg>&lt;t0&gt;CharSequence&lt;/t0&gt; 是 &lt;c1&gt;char&lt;/c1&gt; 值的一个可读序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;t0&gt;Flushable&lt;/t0&gt; is a destination of data that can be flushed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094538Z" creationid="pingfangx" creationdate="20191010T094538Z">
        <seg>&lt;t0&gt;Flushable&lt;/t0&gt; 是可刷新数据的目标地。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;t0&gt;Readable&lt;/t0&gt; is a source of characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065920Z" creationid="pingfangx" creationdate="20191012T065920Z">
        <seg>&lt;t0&gt;Readable&lt;/t0&gt; 是一个字符源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Comparator that orders &lt;c0&gt;String&lt;/c0&gt; objects as by &lt;c1&gt;compareToIgnoreCase&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022420Z" creationid="pingfangx" creationdate="20191014T022420Z">
        <seg>一个对 &lt;c0&gt;String&lt;/c0&gt; 对象进行排序的 Comparator，作用与 &lt;c1&gt;compareToIgnoreCase&lt;/c1&gt; 相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A CookieHandler object provides a callback mechanism to hook up a HTTP state management policy implementation into the HTTP protocol handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083142Z" creationid="pingfangx" creationdate="20191011T083142Z">
        <seg>CookieHandler 对象提供一种回调机制以将 HTTP 状态管理策略实现挂钩到 HTTP 协议处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A CookieStore object represents a storage for cookie.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083040Z" creationid="pingfangx" creationdate="20191011T083040Z">
        <seg>表示 cookie 存储区的 CookieStore 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A GuardedObject is an object that is used to protect access to another object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T031440Z" creationid="pingfangx" creationdate="20191012T031427Z">
        <seg>GuardedObject 是一个用来保护对另一个对象的访问的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A ProtectionParameter encapsulating a CallbackHandler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032303Z" creationid="pingfangx" creationdate="20191012T032303Z">
        <seg>封装 CallbackHandler 的 ProtectionParameter。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Red-Black tree based &lt;c0&gt;&lt;a1&gt;NavigableMap&lt;/a1&gt;&lt;/c0&gt; implementation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050219Z" creationid="pingfangx" creationdate="20191012T050219Z">
        <seg>基于红黑树（Red-Black tree）的 &lt;c0&gt;&lt;a1&gt;NavigableMap&lt;/a1&gt;&lt;/c0&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Retention meta-annotation has effect only if the meta-annotated type is used directly for annotation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152219Z" creationid="pingfangx" creationdate="20191014T152219Z">
        <seg>只有元注释类型直接用于注释时，Retention 元注释才有效。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Spliterator specialized for &lt;c0&gt;double&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T044904Z" creationid="pingfangx" creationdate="20191012T044904Z">
        <seg>一个专用于 &lt;c0&gt;double&lt;/c0&gt; 值的 Spliterator。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Spliterator specialized for &lt;c0&gt;int&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T044922Z" creationid="pingfangx" creationdate="20191012T044922Z">
        <seg>一个专用于 &lt;c0&gt;int&lt;/c0&gt; 值的 Spliterator。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Spliterator specialized for &lt;c0&gt;long&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T044949Z" creationid="pingfangx" creationdate="20191012T044949Z">
        <seg>一个专用于 &lt;c0&gt;long&lt;/c0&gt; 值的 Spliterator。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Spliterator specialized for primitive values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045018Z" creationid="pingfangx" creationdate="20191012T045018Z">
        <seg>专门用于基本类型值的 Spliterator。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083322Z" creationid="pingfangx" creationdate="20191011T083322Z">
        <seg>连接到 Java ARchive (JAR) 文件或 JAR 文件中条目的 URL Connection。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A URLConnection with support for HTTP-specific features.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083200Z" creationid="pingfangx" creationdate="20191011T083200Z">
        <seg>支持 HTTP 特定功能的 URLConnection。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A base type for primitive specializations of &lt;c0&gt;Iterator&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034730Z" creationid="pingfangx" creationdate="20191012T034730Z">
        <seg>基本类型专用的 &lt;c0&gt;Iterator&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A bounded &lt;a0&gt;blocking queue&lt;/a0&gt;&lt;/a1&gt; backed by an array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114026Z" creationid="pingfangx" creationdate="20191025T114026Z">
        <seg>一个由数组支持的有界&lt;a0&gt;阻塞队列&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A buffered character-input stream that keeps track of line numbers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102616Z" creationid="pingfangx" creationdate="20191010T102616Z">
        <seg>跟踪行号的缓冲字符输入流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A byte buffer can be allocated as a &lt;a0&gt; &lt;i1&gt;direct&lt;/i1&gt;&lt;/a0&gt; buffer, in which case the Java virtual machine will make a best effort to perform native I/O operations directly upon it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T111837Z" creationid="pingfangx" creationdate="20191011T111837Z">
        <seg>可以将字节缓冲区分配为一个 &lt;a0&gt; &lt;i1&gt;直接&lt;/i1&gt;&lt;/a0&gt; 缓冲区，在这种情况下，Java 虚拟机将最大限度地直接在缓冲区上执行本机 I/O 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A byte buffer can be created by &lt;c0&gt;&lt;a1&gt;&lt;/a1&gt;&lt;/c0&gt;&lt;i2&gt;mapping&lt;/i2&gt;&lt;c3&gt;&lt;/a4&gt;&lt;/c3&gt; a region of a file directly into memory, in which case a few additional file-related operations defined in the &lt;c5&gt;&lt;a6&gt;MappedByteBuffer&lt;/a6&gt;&lt;/c5&gt; class are available.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T112409Z" creationid="pingfangx" creationdate="20191011T112409Z">
        <seg>可以通过 &lt;c0&gt;&lt;a1&gt;&lt;/a1&gt;&lt;/c0&gt;&lt;i2&gt;mapping&lt;/i2&gt;&lt;c3&gt;&lt;/a4&gt;&lt;/c3&gt; 将文件区域直接包装到内存中来创建字节缓冲区，在这种情况下，可以使用 &lt;c5&gt;&lt;a6&gt;MappedByteBuffer&lt;/a6&gt;&lt;/c5&gt; 类中定义的几个其他文件相关的操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A byte buffer mapped to a file</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102739Z" creationid="pingfangx" creationdate="20191011T102739Z">
        <seg>映射到文件的字节缓冲区</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A byte buffer provides access to its content as either a heterogeneous or homogeneous sequence of &lt;a0&gt;binary data&lt;/i1&gt;&lt;/a0&gt; of any non-boolean primitive type, in either big-endian or little-endian &lt;a2&gt;byte order&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T112134Z" creationid="pingfangx" creationdate="20191011T112101Z">
        <seg>字节缓冲区提供了对其内容的访问（其内容作为任何非布尔基本类型的异类或同类 &lt;a0&gt;二进制数据&lt;/i1&gt;&lt;/a0&gt; 序列），访问要么是以 big-endian 字节顺序进行，要么是以 little-endian &lt;a2&gt;字节顺序&lt;/a2&gt;进行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A byte buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114309Z" creationid="pingfangx" creationdate="20191011T114309Z">
        <seg>字节缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A call to &lt;c0&gt;start&lt;/c0&gt; on a thread &lt;i1&gt;happens-before&lt;/i1&gt; any action in the started thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113321Z" creationid="pingfangx" creationdate="20191025T113321Z">
        <seg>在线程上调用 &lt;c0&gt;start&lt;/c0&gt;&lt;i1&gt;happen-before&lt;/i1&gt; 已启动的线程中的任何线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A cancellable asynchronous computation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114132Z" creationid="pingfangx" creationdate="20191025T114132Z">
        <seg>可取消的异步计算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A capability-based lock with three modes for controlling read/write access.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123117Z" creationid="pingfangx" creationdate="20191025T123117Z">
        <seg>一种基于功能的锁，有三种控制读写访问的模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A cause can be associated with a throwable in two ways: via a constructor that takes the cause as an argument, or via the &lt;c0&gt;&lt;a1&gt;initCause(Throwable)&lt;/a1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113929Z" creationid="pingfangx" creationdate="20191013T113929Z">
        <seg>Cause 可以通过两种方式与 throwable 关联起来：通过一个将 cause 看作参数的构造方法；或者通过 &lt;c0&gt;&lt;a1&gt;initCause(Throwable)&lt;/a1&gt;&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A char buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114334Z" creationid="pingfangx" creationdate="20191011T114334Z">
        <seg>字符缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A character is contained by at most one Unicode block.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093630Z" creationid="pingfangx" creationdate="20191014T093630Z">
        <seg>一个字符至多可以包含在一个 Unicode 块中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A character stream that collects its output in a string buffer, which can then be used to construct a string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065334Z" creationid="pingfangx" creationdate="20191011T065334Z">
        <seg>一个字符流，可以用其回收在字符串缓冲区中的输出来构造字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A character stream whose source is a string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T053027Z" creationid="pingfangx" creationdate="20191011T053027Z">
        <seg>其源为一个字符串的字符流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A character-stream reader that allows characters to be pushed back into the stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102741Z" creationid="pingfangx" creationdate="20191010T102741Z">
        <seg>允许将字符推回到流的字符流 reader。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class can implement the &lt;c0&gt;Observer&lt;/c0&gt; interface when it wants to be informed of changes in observable objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034543Z" creationid="pingfangx" creationdate="20191012T034543Z">
        <seg>一个可在观察者要得到 observable 对象更改通知时可实现 &lt;c0&gt;Observer&lt;/c0&gt; 接口的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class implements the &lt;c0&gt;Cloneable&lt;/c0&gt; interface to indicate to the &lt;c1&gt;&lt;a2&gt;clone()&lt;/a2&gt;&lt;/c1&gt; method that it is legal for that method to make a field-for-field copy of instances of that class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065730Z" creationid="pingfangx" creationdate="20191012T065730Z">
        <seg>此类实现了 &lt;c0&gt;Cloneable&lt;/c0&gt; 接口，以指示 &lt;c1&gt;&lt;a2&gt;clone()&lt;/a2&gt;&lt;/c1&gt; 方法可以合法地对该类实例进行按字段复制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class loader is an object that is responsible for loading classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071234Z" creationid="pingfangx" creationdate="20191012T071234Z">
        <seg>类加载器是负责加载类的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that implements &lt;c2&gt;Runnable&lt;/c2&gt; can run without subclassing &lt;c3&gt;Thread&lt;/c3&gt; by instantiating a &lt;c4&gt;Thread&lt;/c4&gt; instance and passing itself in as the target.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154722Z" creationid="pingfangx" creationdate="20191013T154722Z">
        <seg>通过实例化某个 &lt;c2&gt;Thread&lt;/c2&gt; 实例并将自身作为运行目标，就可以运行实现 &lt;c3&gt;Runnable&lt;/c3&gt; 的类而无需创建 &lt;c4&gt;Thread&lt;/c4&gt; 的子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that represents an immutable universally unique identifier (UUID).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050227Z" creationid="pingfangx" creationdate="20191012T050227Z">
        <seg>表示通用唯一标识符 (UUID) 的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection designed for holding elements prior to processing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034824Z" creationid="pingfangx" creationdate="20191012T034824Z">
        <seg>在处理元素前用于保存元素的 collection。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that contains no duplicate elements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T035109Z" creationid="pingfangx" creationdate="20191012T035109Z">
        <seg>一个不包含重复元素的 collection。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common interface for all entities that declare type variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091059Z" creationid="pingfangx" creationdate="20191012T091059Z">
        <seg>声明类型变量的所有实体的公共接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comparison function, which imposes a &lt;i0&gt;total ordering&lt;/i0&gt; on some collection of objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034340Z" creationid="pingfangx" creationdate="20191012T034340Z">
        <seg>强行对某个对象 collection 进行 &lt;i0&gt;整体排序&lt;/i0&gt; 的比较函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A concurrent collection is thread-safe, but not governed by a single exclusion lock.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112215Z" creationid="pingfangx" creationdate="20191025T112215Z">
        <seg>并发 collection 是线程安全的，但是不受单个排他锁的管理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding a Not-a-Number (NaN) value of type &lt;c0&gt;double&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132614Z" creationid="pingfangx" creationdate="20191013T132614Z">
        <seg>保存 &lt;c0&gt;double&lt;/c0&gt; 类型的 NaN 值的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding a Not-a-Number (NaN) value of type &lt;c0&gt;float&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132019Z" creationid="pingfangx" creationdate="20191013T132019Z">
        <seg>保存 &lt;c0&gt;float&lt;/c0&gt; 类型的非数字 (NaN) 值的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the largest positive finite value of type &lt;c0&gt;double&lt;/c0&gt;, (2-2&lt;s1&gt;-52&lt;/s1&gt;)·2&lt;s2&gt;1023&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132607Z" creationid="pingfangx" creationdate="20191013T132607Z">
        <seg>保存 &lt;c0&gt;double&lt;/c0&gt; 类型的最大正有限值的常量，最大正有限值为 (2-2&lt;s1&gt;-52&lt;/s1&gt;)·2&lt;s2&gt;1023&lt;/s2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the largest positive finite value of type &lt;c0&gt;float&lt;/c0&gt;, (2-2&lt;s1&gt;-23&lt;/s1&gt;)·2&lt;s2&gt;127&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T131912Z" creationid="pingfangx" creationdate="20191013T131912Z">
        <seg>保存 &lt;c0&gt;float&lt;/c0&gt; 类型的最大正有限值的常量，即 (2-2&lt;s1&gt;-23&lt;/s1&gt;)·2&lt;s2&gt;127&lt;/s2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the maximum value a &lt;c0&gt;byte&lt;/c0&gt; can have, 2&lt;s1&gt;7&lt;/s1&gt;-1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121322Z" creationid="pingfangx" creationdate="20191013T121322Z">
        <seg>一个常量，保存 &lt;c0&gt;byte&lt;/c0&gt; 类型可取的最大值，即 2&lt;s1&gt;7&lt;/s1&gt;-1。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the maximum value a &lt;c0&gt;long&lt;/c0&gt; can have, 2&lt;s1&gt;63&lt;/s1&gt;-1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124913Z" creationid="pingfangx" creationdate="20191013T124913Z">
        <seg>保持 &lt;c0&gt;long&lt;/c0&gt; 类型的最大值的常量，该值为 2&lt;s1&gt;63&lt;/s1&gt;-1。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the maximum value a &lt;c0&gt;short&lt;/c0&gt; can have, 2&lt;s1&gt;15&lt;/s1&gt;-1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122021Z" creationid="pingfangx" creationdate="20191013T122021Z">
        <seg>保存 &lt;c0&gt;short&lt;/c0&gt; 可取的最大值的常量，最大值为 2&lt;s1&gt;15&lt;/s1&gt;-1。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the maximum value an &lt;c0&gt;int&lt;/c0&gt; can have, 2&lt;s1&gt;31&lt;/s1&gt;-1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123245Z" creationid="pingfangx" creationdate="20191013T123245Z">
        <seg>值为 2&lt;s1&gt;31&lt;/s1&gt;－1 的常量，它表示 &lt;c0&gt;int&lt;/c0&gt; 类型能够表示的最大值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the minimum value a &lt;c0&gt;byte&lt;/c0&gt; can have, -2&lt;s1&gt;7&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121324Z" creationid="pingfangx" creationdate="20191013T121324Z">
        <seg>一个常量，保存 &lt;c0&gt;byte&lt;/c0&gt; 类型可取的最小值，即 -2&lt;s1&gt;7&lt;/s1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the minimum value a &lt;c0&gt;long&lt;/c0&gt; can have, -2&lt;s1&gt;63&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124915Z" creationid="pingfangx" creationdate="20191013T124915Z">
        <seg>保持 &lt;c0&gt;long&lt;/c0&gt; 类型的最小值的常量，该值为 -2&lt;s1&gt;63&lt;/s1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the minimum value a &lt;c0&gt;short&lt;/c0&gt; can have, -2&lt;s1&gt;15&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122023Z" creationid="pingfangx" creationdate="20191013T122023Z">
        <seg>保存 &lt;c0&gt;short&lt;/c0&gt; 可取的最小值的常量，最小值为 -2&lt;s1&gt;15&lt;/s1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the minimum value an &lt;c0&gt;int&lt;/c0&gt; can have, -2&lt;s1&gt;31&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123247Z" creationid="pingfangx" creationdate="20191013T123247Z">
        <seg>值为 －2&lt;s1&gt;31&lt;/s1&gt; 的常量，它表示 &lt;c0&gt;int&lt;/c0&gt; 类型能够表示的最小值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the negative infinity of type &lt;c0&gt;double&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132613Z" creationid="pingfangx" creationdate="20191013T132613Z">
        <seg>保存 &lt;c0&gt;double&lt;/c0&gt; 类型的负无穷大值的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the negative infinity of type &lt;c0&gt;float&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132014Z" creationid="pingfangx" creationdate="20191013T132014Z">
        <seg>保存 &lt;c0&gt;float&lt;/c0&gt; 类型的负无穷大值的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the positive infinity of type &lt;c0&gt;double&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132615Z" creationid="pingfangx" creationdate="20191013T132615Z">
        <seg>保存 &lt;c0&gt;double&lt;/c0&gt; 类型的正无穷大值的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the positive infinity of type &lt;c0&gt;float&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132025Z" creationid="pingfangx" creationdate="20191013T132025Z">
        <seg>保存 &lt;c0&gt;float&lt;/c0&gt; 类型的正无穷大值的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the smallest positive nonzero value of type &lt;c0&gt;double&lt;/c0&gt;, 2&lt;s1&gt;-1074&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132612Z" creationid="pingfangx" creationdate="20191013T132612Z">
        <seg>保存 &lt;c0&gt;double&lt;/c0&gt; 类型的最小正非零值的常量，最小正非零值为 2&lt;s1&gt;-1074&lt;/s1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the smallest positive nonzero value of type &lt;c0&gt;float&lt;/c0&gt;, 2&lt;s1&gt;-149&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132009Z" creationid="pingfangx" creationdate="20191013T132009Z">
        <seg>保存 &lt;c0&gt;float&lt;/c0&gt; 类型数据的最小正非零值的常量，即 2&lt;s1&gt;-149&lt;/s1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the smallest positive normal value of type &lt;c0&gt;double&lt;/c0&gt;, 2&lt;s1&gt;-1022&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132610Z" creationid="pingfangx" creationdate="20191013T132610Z">
        <seg>保存 &lt;c0&gt;double&lt;/c0&gt; 类型的最小正标准值的常量，最小正标准值为 2&lt;s1&gt;-1022&lt;/s1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant holding the smallest positive normal value of type &lt;c0&gt;float&lt;/c0&gt;, 2&lt;s1&gt;-126&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132001Z" creationid="pingfangx" creationdate="20191013T132001Z">
        <seg>保存 &lt;c0&gt;float&lt;/c0&gt; 类型数据的最小正标准值的常量，即 2&lt;s1&gt;-126&lt;/s1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A container for data of a specific primitive type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114308Z" creationid="pingfangx" creationdate="20191011T114308Z">
        <seg>一个用于特定基本类型数据的容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A container object which may or may not contain a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045937Z" creationid="pingfangx" creationdate="20191012T045937Z">
        <seg>可能包含也可能不包含 &lt;c0&gt;double&lt;/c0&gt; 值的容器对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A container object which may or may not contain a &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045942Z" creationid="pingfangx" creationdate="20191012T045942Z">
        <seg>可能包含也可能不包含 &lt;c0&gt;int&lt;/c0&gt; 值的容器对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A container object which may or may not contain a &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045949Z" creationid="pingfangx" creationdate="20191012T045949Z">
        <seg>可能包含也可能不包含 &lt;c0&gt;long&lt;/c0&gt; 值的容器对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A container object which may or may not contain a non-null value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045914Z" creationid="pingfangx" creationdate="20191012T045914Z">
        <seg>可能包含也可能不包含非空值的容器对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A correctly rounded method is generally the best a floating-point approximation can be; however, it is impractical for many floating-point methods to be correctly rounded.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151258Z" creationid="pingfangx" creationdate="20191013T151258Z">
        <seg>一个正确舍入的方法通常能得到最佳的浮点近似值；然而，对于许多浮点方法，进行正确舍入有些不切实际。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A counting semaphore.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114142Z" creationid="pingfangx" creationdate="20191025T114142Z">
        <seg>一个计数信号量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094716Z" creationid="pingfangx" creationdate="20191010T094716Z">
        <seg>数据输入流允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data output stream lets an application write primitive Java data types to an output stream in a portable way.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094724Z" creationid="pingfangx" creationdate="20191010T094724Z">
        <seg>数据输出流允许应用程序以适当方式将基本 Java 数据类型写入输出流中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A delayed result-bearing action that can be cancelled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114007Z" creationid="pingfangx" creationdate="20191025T114007Z">
        <seg>一个延迟的、结果可接受的操作，可将其取消。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A description of a Serializable field from a Serializable class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102649Z" creationid="pingfangx" creationdate="20191010T102649Z">
        <seg>Serializable 类中 Serializable 字段的描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A description of a to-be-instantiated KeyStore object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032301Z" creationid="pingfangx" creationdate="20191012T032301Z">
        <seg>将被实例化的 KeyStore 对象的描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A direct byte buffer whose content is a memory-mapped region of a file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114341Z" creationid="pingfangx" creationdate="20191011T114341Z">
        <seg>直接字节缓冲区，其内容是文件的内存映射区域。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A double buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114335Z" creationid="pingfangx" creationdate="20191011T114335Z">
        <seg>double 缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A facility for threads to schedule tasks for future execution in a background thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050210Z" creationid="pingfangx" creationdate="20191012T050210Z">
        <seg>一种工具，线程用其安排以后在后台线程中执行的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A family of character subsets representing the character blocks in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071223Z" creationid="pingfangx" creationdate="20191012T071223Z">
        <seg>表示 Unicode 规范中字符块的一系列字符子集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A family of character subsets representing the character scripts defined in the &lt;a0&gt; &lt;i1&gt;Unicode Standard Annex #24: Script Names&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071956Z" creationid="pingfangx" creationdate="20191012T071956Z">
        <seg>表示 &lt;a0&gt; &lt;i1&gt;Unicode Standard Annex #24: Script Names&lt;/i1&gt;&lt;/a0&gt; 中定义的字符块的一系列字符子集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A file output stream is an output stream for writing data to a &lt;c0&gt;File&lt;/c0&gt; or to a &lt;c1&gt;FileDescriptor&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100316Z" creationid="pingfangx" creationdate="20191010T100316Z">
        <seg>文件输出流是用于将数据写入 &lt;c0&gt;File&lt;/c0&gt; 或 &lt;c1&gt;FileDescriptor&lt;/c1&gt; 的输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A filter for abstract pathnames.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094038Z" creationid="pingfangx" creationdate="20191010T094038Z">
        <seg>用于抽象路径名的过滤器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A float buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114336Z" creationid="pingfangx" creationdate="20191011T114336Z">
        <seg>float 缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A generator of uniform pseudorandom values applicable for use in (among other contexts) isolated parallel computations that may generate subtasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050700Z" creationid="pingfangx" creationdate="20191012T050700Z">
        <seg>一种均匀伪随机值的生成器，适用于(在其它上下文中)可能生成子任务的独立并行计算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A handler for rejected tasks that discards the oldest unhandled request and then retries &lt;c0&gt;execute&lt;/c0&gt;, unless the executor is shut down, in which case the task is discarded.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114215Z" creationid="pingfangx" creationdate="20191025T114215Z">
        <seg>用于被拒绝任务的处理程序，它放弃最旧的未处理请求，然后重试 &lt;c0&gt;execute&lt;/c0&gt;；如果执行程序已关闭，则会丢弃该任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A handler for rejected tasks that runs the rejected task directly in the calling thread of the &lt;c0&gt;execute&lt;/c0&gt; method, unless the executor has been shut down, in which case the task is discarded.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114213Z" creationid="pingfangx" creationdate="20191025T114213Z">
        <seg>用于被拒绝任务的处理程序，它直接在 &lt;c0&gt;execute&lt;/c0&gt; 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A handler for rejected tasks that silently discards the rejected task.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114217Z" creationid="pingfangx" creationdate="20191025T114217Z">
        <seg>用于被拒绝任务的处理程序，默认情况下它将丢弃被拒绝的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A handler for rejected tasks that throws a &lt;c0&gt;RejectedExecutionException&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114210Z" creationid="pingfangx" creationdate="20191025T114210Z">
        <seg>用于被拒绝任务的处理程序，它将抛出 &lt;c0&gt;RejectedExecutionException&lt;/c0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A handler for tasks that cannot be executed by a &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113957Z" creationid="pingfangx" creationdate="20191025T113957Z">
        <seg>无法由 &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor&lt;/a1&gt;&lt;/c0&gt; 执行的任务的处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hash table supporting full concurrency of retrievals and high expected concurrency for updates.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115906Z" creationid="pingfangx" creationdate="20191025T115906Z">
        <seg>支持获取的完全并发和更新的高期望并发的哈希表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hint to the scheduler that the current thread is willing to yield its current use of a processor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082916Z" creationid="pingfangx" creationdate="20191014T082916Z">
        <seg>向调度程序提示当前线程愿意放弃当前对处理器的使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A linear collection that supports element insertion and removal at both ends.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034342Z" creationid="pingfangx" creationdate="20191012T034342Z">
        <seg>一个线性 collection，支持在两端插入和移除元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A long buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114339Z" creationid="pingfangx" creationdate="20191011T114339Z">
        <seg>long 缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A map entry (key-value pair).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034524Z" creationid="pingfangx" creationdate="20191012T034524Z">
        <seg>映射项（键-值对）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A marker interface for &lt;c0&gt;KeyStore&lt;/c0&gt; &lt;c1&gt;&lt;a2&gt;load&lt;/a2&gt;&lt;/c1&gt; and &lt;c3&gt;&lt;a4&gt;store&lt;/a4&gt;&lt;/c3&gt; parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152413Z" creationid="pingfangx" creationdate="20191011T152413Z">
        <seg>用于 &lt;c0&gt;KeyStore&lt;/c0&gt; &lt;c1&gt;&lt;a2&gt;load&lt;/a2&gt;&lt;/c1&gt; 和 &lt;c3&gt;&lt;a4&gt;store&lt;/a4&gt;&lt;/c3&gt; 参数的标记接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A marker interface for &lt;c0&gt;KeyStore&lt;/c0&gt; entry types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152410Z" creationid="pingfangx" creationdate="20191011T152410Z">
        <seg>用于 &lt;c0&gt;KeyStore&lt;/c0&gt; 项类型的标记接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A marker interface for keystore protection parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152414Z" creationid="pingfangx" creationdate="20191011T152414Z">
        <seg>用于 keystore 保护参数的标记接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A marker interface identifying asynchronous tasks produced by &lt;c0&gt;async&lt;/c0&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115503Z" creationid="pingfangx" creationdate="20191025T115503Z">
        <seg>标识由 &lt;c0&gt;async&lt;/c0&gt; 方法产生的异步任务的标记接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method invocation on a proxy instance through one of its proxy interfaces will be dispatched to the &lt;c7&gt;&lt;a8&gt;invoke&lt;/a8&gt;&lt;/c7&gt; method of the instance's invocation handler, passing the proxy instance, a &lt;c9&gt;java.lang.reflect.Method&lt;/c9&gt; object identifying the method that was invoked, and an array of type &lt;c10&gt;Object&lt;/c10&gt; containing the arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112240Z" creationid="pingfangx" creationdate="20191015T112240Z">
        <seg>通过其中一个代理接口的代理实例上的方法调用将被指派到实例的调用处理程序的 &lt;c7&gt;&lt;a8&gt;Invoke&lt;/a8&gt;&lt;/c7&gt; 方法，并传递代理实例、识别调用方法的 &lt;c9&gt;java.lang.reflect.Method&lt;/c9&gt; 对象以及包含参数的 &lt;c10&gt;Object&lt;/c10&gt; 类型的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method is not required to declare in its &lt;c0&gt;throws&lt;/c0&gt; clause any subclasses of &lt;c1&gt;Error&lt;/c1&gt; that might be thrown during the execution of the method but not caught, since these errors are abnormal conditions that should never occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115601Z" creationid="pingfangx" creationdate="20191013T115601Z">
        <seg>在执行该方法期间，无需在其 &lt;c0&gt;throws&lt;/c0&gt; 子句中声明可能抛出但是未能捕获的 &lt;c1&gt;Error&lt;/c1&gt; 的任何子类，因为这些错误可能是再也不会发生的异常条件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A minimal set of system dependent environment variables may be required to start a process on some operating systems.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080327Z" creationid="pingfangx" creationdate="20191014T080327Z">
        <seg>在某些操作系统上启动进程可能需要一组最小的系统相关环境变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mix-in style interface for marking objects that should be acted upon after a given delay.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113935Z" creationid="pingfangx" creationdate="20191025T113935Z">
        <seg>一种混合风格的接口，用来标记那些应该在给定延迟时间之后执行的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mutable sequence of characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T061557Z" creationid="pingfangx" creationdate="20191012T071710Z">
        <seg>一个可变的字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new &lt;c0&gt;String&lt;/c0&gt; object is allocated and initialized to contain the character sequence currently represented by this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041727Z" creationid="pingfangx" creationdate="20191014T041727Z">
        <seg>将分配一个新的 &lt;c0&gt;String&lt;/c0&gt; 对象，并将它初始化，以包含当前由此对象表示的字符串序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new certificate handling package is created in the Java platform.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152059Z" creationid="pingfangx" creationdate="20191011T152059Z">
        <seg>在 Java 平台中创建了新的证书处理包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A newly-created object is strongly reachable by the thread that created it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090546Z" creationid="pingfangx" creationdate="20191012T090546Z">
        <seg>新创建的对象对于创建它的线程而言是强可到达对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A number of classes in the java.net package do provide for a much higher level of abstraction and allow for easy access to resources on the network.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081019Z" creationid="pingfangx" creationdate="20191011T081019Z">
        <seg>java.net 包中的许多类可以提供更加高级的抽象，允许方便地访问网络上的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A parameterized type is created the first time it is needed by a reflective method, as specified in this package.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071622Z" creationid="pingfangx" creationdate="20191015T071622Z">
        <seg>参数化类型在反射方法首次需要时创建（在此包中指定）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A password-based implementation of &lt;c0&gt;ProtectionParameter&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032304Z" creationid="pingfangx" creationdate="20191012T032304Z">
        <seg>&lt;c0&gt;ProtectionParameter&lt;/c0&gt; 的一个基于密码的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102713Z" creationid="pingfangx" creationdate="20191010T102713Z">
        <seg>管道输入流应该连接到管道输出流；管道输入流提供要写入管道输出流的所有数据字节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piped output stream can be connected to a piped input stream to create a communications pipe.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102715Z" creationid="pingfangx" creationdate="20191010T102715Z">
        <seg>可以将管道输出流连接到管道输入流来创建通信管道。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pool that is no longer referenced in a program &lt;e0&gt;AND&lt;/e0&gt; has no remaining threads will be &lt;c1&gt;shutdown&lt;/c1&gt; automatically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125805Z" creationid="pingfangx" creationdate="20191025T125805Z">
        <seg>程序 &lt;e0&gt;AND&lt;/e0&gt; 不再引用的池没有剩余线程会自动 &lt;c1&gt;shutdown&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A private key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152422Z" creationid="pingfangx" creationdate="20191011T152422Z">
        <seg>私钥。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A program element annotated @Deprecated is one that programmers are discouraged from using, typically because it is dangerous, or because a better alternative exists.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T064828Z" creationid="pingfangx" creationdate="20191012T064828Z">
        <seg>用 @Deprecated 注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A program element type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082759Z" creationid="pingfangx" creationdate="20191012T082759Z">
        <seg>程序元素类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A program may also arrange to be notified some time after the collector has determined that the reachability of a given object has changed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085457Z" creationid="pingfangx" creationdate="20191012T085457Z">
        <seg>程序还可以安排在回收器确定某一给定对象的可到达性已经更改之后的某个时间得到通知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A program may further subclass these subclasses, adding whatever fields and methods are required for its purposes, or it may use these subclasses without change.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085702Z" creationid="pingfangx" creationdate="20191012T085702Z">
        <seg>通过添加任何所需的字段和方法，程序可以为这些子类进一步创建子类，或者可以不加更改地使用这些子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A program may request to be notified of changes in an object's reachability by &lt;e0&gt;registering&lt;/e0&gt; an appropriate reference object with a &lt;e1&gt;reference queue&lt;/e1&gt; at the time the reference object is created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085757Z" creationid="pingfangx" creationdate="20191012T085757Z">
        <seg>在创建引用对象时，通过向引用队列 &lt;e0&gt;注册&lt;/e0&gt; 一个适当的 &lt;e1&gt;引用对象&lt;/e1&gt;，程序可以请求在对象可到达性更改时获得通知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A program may use a reference object to maintain a reference to some other object in such a way that the latter object may still be reclaimed by the collector.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085454Z" creationid="pingfangx" creationdate="20191012T085454Z">
        <seg>程序可以使用一个引用对象来维持对另外某一对象的引用，所采用的方式是使后者仍然可以被回收器回收。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A programmer assertion that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065053Z" creationid="pingfangx" creationdate="20191012T065053Z">
        <seg>程序员断言注解的方法或构造函数体不对其可变参数参数来执行潜在的不安全操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A proxy class extends &lt;c0&gt;java.lang.reflect.Proxy&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112335Z" creationid="pingfangx" creationdate="20191015T112335Z">
        <seg>代理类扩展 &lt;c0&gt;java.lang.reflect.Proxy&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A proxy class has the following properties:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112255Z" creationid="pingfangx" creationdate="20191015T112255Z">
        <seg>代理类具用以下属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A proxy class implements exactly the interfaces specified at its creation, in the same order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112345Z" creationid="pingfangx" creationdate="20191015T112345Z">
        <seg>代理类会按同一顺序准确地实现其创建时指定的接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A proxy instance has the following properties:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112624Z" creationid="pingfangx" creationdate="20191015T112624Z">
        <seg>代理实例具有以下属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A public key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152426Z" creationid="pingfangx" creationdate="20191011T152426Z">
        <seg>公钥。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A random number generator isolated to the current thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120538Z" creationid="pingfangx" creationdate="20191025T120538Z">
        <seg>与当前线程隔离的随机数生成器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A recursive result-bearing &lt;c0&gt;&lt;a1&gt;ForkJoinTask&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120511Z" creationid="pingfangx" creationdate="20191025T120511Z">
        <seg>递归结果承载 &lt;c0&gt;&lt;a1&gt;ForkJoinTask&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A recursive resultless &lt;c0&gt;&lt;a1&gt;ForkJoinTask&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120503Z" creationid="pingfangx" creationdate="20191025T120503Z">
        <seg>递归无结果的 &lt;c0&gt;&lt;a1&gt;ForkJoinTask&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reentrant mutual exclusion &lt;c0&gt;&lt;a1&gt;Lock&lt;/a1&gt;&lt;/c0&gt; with the same basic behavior and semantics as the implicit monitor lock accessed using &lt;c2&gt;synchronized&lt;/c2&gt; methods and statements, but with extended capabilities.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123042Z" creationid="pingfangx" creationdate="20191025T123042Z">
        <seg>一个可重入的互斥锁 &lt;c0&gt;&lt;a1&gt;Lock&lt;/a1&gt;&lt;/c0&gt;，它具有与使用 &lt;c2&gt;synchronized&lt;/c2&gt; 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reflection-based utility that enables atomic updates to designated &lt;c0&gt;volatile int&lt;/c0&gt; fields of designated classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122448Z" creationid="pingfangx" creationdate="20191025T122448Z">
        <seg>基于反射的实用工具，可以对指定类的指定 &lt;c0&gt;volatile int&lt;/c0&gt; 字段进行原子更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reflection-based utility that enables atomic updates to designated &lt;c0&gt;volatile long&lt;/c0&gt; fields of designated classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122451Z" creationid="pingfangx" creationdate="20191025T122451Z">
        <seg>基于反射的实用工具，可以对指定类的指定 &lt;c0&gt;volatile long&lt;/c0&gt; 字段进行原子更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reflection-based utility that enables atomic updates to designated &lt;c0&gt;volatile&lt;/c0&gt; reference fields of designated classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122454Z" creationid="pingfangx" creationdate="20191025T122454Z">
        <seg>基于反射的实用工具，可以对指定类的指定 &lt;c0&gt;volatile&lt;/c0&gt; 字段进行原子更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A resource that must be closed when it is no longer needed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065658Z" creationid="pingfangx" creationdate="20191012T065658Z">
        <seg>不再需要时必须关闭的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A return value of &lt;c0&gt;null&lt;/c0&gt; does not &lt;i1&gt;necessarily&lt;/i1&gt; indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to &lt;c2&gt;null&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140918Z" creationid="pingfangx" creationdate="20191025T140918Z">
        <seg>返回 &lt;c0&gt;null&lt;/c0&gt; 值并不&lt;i1&gt;一定&lt;/i1&gt; 表明该映射不包含该键的映射关系；也可能该映射将该键显示地映射为 &lt;c2&gt;null&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reusable synchronization barrier, similar in functionality to &lt;c0&gt;&lt;a1&gt;CyclicBarrier&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;CountDownLatch&lt;/a3&gt;&lt;/c2&gt; but supporting more flexible usage.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120456Z" creationid="pingfangx" creationdate="20191025T120456Z">
        <seg>可重复使用的屏障同步，在功能上类似于 &lt;c0&gt;&lt;a1&gt;CyclicBarrier&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;CountDownLatch&lt;/a3&gt;&lt;/c2&gt; 但支撑更灵活的使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A runtime exception for Provider exceptions (such as misconfiguration errors or unrecoverable internal errors), which may be subclassed by Providers to throw specialized, provider-specific runtime errors.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032647Z" creationid="pingfangx" creationdate="20191012T032647Z">
        <seg>用于 Provider 异常(例如误配置错误或不可恢复的内部错误）的运行时异常，Provider 可以为它创建子类以抛出特殊的、特定于 provider 的运行时错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sample implementation is:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072336Z" creationid="pingfangx" creationdate="20191014T072336Z">
        <seg>示例实现如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A scalable concurrent &lt;c0&gt;&lt;a1&gt;ConcurrentNavigableMap&lt;/a1&gt;&lt;/c0&gt; implementation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114044Z" creationid="pingfangx" creationdate="20191025T114044Z">
        <seg>可缩放的并发 &lt;c0&gt;&lt;a1&gt;ConcurrentNavigableMap&lt;/a1&gt;&lt;/c0&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A scalable concurrent &lt;c0&gt;&lt;a1&gt;NavigableSet&lt;/a1&gt;&lt;/c0&gt; implementation based on a &lt;c2&gt;&lt;a3&gt;ConcurrentSkipListMap&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114046Z" creationid="pingfangx" creationdate="20191025T114046Z">
        <seg>一个基于 &lt;c0&gt;&lt;a1&gt;ConcurrentSkipListMap&lt;/a1&gt;&lt;/c0&gt; 的可缩放并发 &lt;c2&gt;&lt;a3&gt;NavigableSet&lt;/a3&gt;&lt;/c2&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A second reason that a throwable may have a cause is that the method that throws it must conform to a general-purpose interface that does not permit the method to throw the cause directly.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113323Z" creationid="pingfangx" creationdate="20191013T113323Z">
        <seg>导致 throwable cause 的另一个 cause 是，抛出它的方法必须符合通用接口，而通用接口不允许方法直接抛出 cause。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113918Z" creationid="pingfangx" creationdate="20191025T113918Z">
        <seg>将生产新的异步任务与使用已完成任务的结果分离开来的服务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A short buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114353Z" creationid="pingfangx" creationdate="20191011T114353Z">
        <seg>short 缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A simple interface which provides a mechanism to map between a file name and a MIME type string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083043Z" creationid="pingfangx" creationdate="20191011T083043Z">
        <seg>提供在文件名和 MIME 类型字符串之间进行映射的机制的简单接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A simple service-provider loading facility.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050105Z" creationid="pingfangx" creationdate="20191012T050105Z">
        <seg>一个简单的服务提供者加载设施。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A simple text scanner which can parse primitive types and strings using regular expressions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050057Z" creationid="pingfangx" creationdate="20191012T050057Z">
        <seg>一个可以使用正则表达式来解析基本类型和字符串的简单文本扫描器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A small toolkit of classes that support lock-free thread-safe programming on single variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120723Z" creationid="pingfangx" creationdate="20191025T120723Z">
        <seg>类的小工具包，支持在单个变量上解除锁的线程安全编程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A socket option associated with a socket.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083122Z" creationid="pingfangx" creationdate="20191011T083122Z">
        <seg>与套接字关联的套接字选项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt; implementation for use with enum type keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045530Z" creationid="pingfangx" creationdate="20191012T045530Z">
        <seg>与枚举类型键一起使用的专用 &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; implementation for use with enum types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045535Z" creationid="pingfangx" creationdate="20191012T045535Z">
        <seg>与枚举类型一起使用的专用 &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stage of a possibly asynchronous computation, that performs an action or computes a value when another CompletionStage completes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115522Z" creationid="pingfangx" creationdate="20191025T115522Z">
        <seg>可能是异步计算的一个阶段，在另一个 completionstage 完成时执行操作或计算值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A state object for collecting statistics such as count, min, max, sum, and average.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045528Z" creationid="pingfangx" creationdate="20191012T045528Z">
        <seg>一个状态对象，用于收集统计信息，如计数、最小值、最大值、总和和平均值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string buffer is like a &lt;c0&gt;&lt;a1&gt;String&lt;/a1&gt;&lt;/c0&gt;, but can be modified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063808Z" creationid="pingfangx" creationdate="20191014T063808Z">
        <seg>一个类似于 &lt;c0&gt;&lt;a1&gt;String&lt;/a1&gt;&lt;/c0&gt; 的字符串缓冲区，但不能修改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subclass overrides the &lt;c0&gt;finalize&lt;/c0&gt; method to dispose of system resources or to perform other cleanup.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140035Z" creationid="pingfangx" creationdate="20191014T140035Z">
        <seg>子类重写 &lt;c0&gt;finalize&lt;/c0&gt; 方法，以配置系统资源或执行其他清除。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114101Z" creationid="pingfangx" creationdate="20191025T114101Z">
        <seg>一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114056Z" creationid="pingfangx" creationdate="20191025T114056Z">
        <seg>一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A synchronization point at which threads can pair and swap elements within pairs.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114118Z" creationid="pingfangx" creationdate="20191025T114118Z">
        <seg>可以在对中对元素进行配对和交换的线程的同步点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A synchronizer that may be exclusively owned by a thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122920Z" creationid="pingfangx" creationdate="20191025T122920Z">
        <seg>可以由线程以独占方式拥有的同步器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A system may not allow modifications to environment variables or may forbid certain variable names or values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080050Z" creationid="pingfangx" creationdate="20191014T080050Z">
        <seg>系统可能不允许修改环境变量或禁止某些变量名或变量值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tactic that often works well is to examine a reference queue in the course of performing some other fairly-frequent action.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090252Z" creationid="pingfangx" creationdate="20191012T090252Z">
        <seg>一种通常很有用的策略是：在执行另一个相当频繁的操作期间检查引用队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tagging interface that all event listener interfaces must extend.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034345Z" creationid="pingfangx" creationdate="20191012T034345Z">
        <seg>所有事件侦听器接口必须扩展的标记接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A task that can be scheduled for one-time or repeated execution by a Timer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050211Z" creationid="pingfangx" creationdate="20191012T050211Z">
        <seg>由 Timer 安排为一次执行或重复执行的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A task that returns a result and may throw an exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113905Z" creationid="pingfangx" creationdate="20191025T113905Z">
        <seg>返回结果并且可能抛出异常的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread becomes the owner of the object's monitor in one of three ways:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132830Z" creationid="pingfangx" creationdate="20191014T132830Z">
        <seg>通过以下三种方法之一，线程可以成为此对象监视器的所有者：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread can also wake up without being notified, interrupted, or timing out, a so-called &lt;i0&gt;spurious wakeup&lt;/i0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134634Z" creationid="pingfangx" creationdate="20191014T134634Z">
        <seg>在没有被通知、中断或超时的情况下，线程还可以唤醒一个所谓的&lt;i0&gt;虚假唤醒&lt;/i0&gt; (spurious wakeup)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread can be in one of the following states:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103842Z" creationid="pingfangx" creationdate="20191014T103842Z">
        <seg>线程可以处于下列状态之一：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread can be in only one state at a given point in time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104503Z" creationid="pingfangx" creationdate="20191014T104503Z">
        <seg>在给定时间点上，一个线程只能处于一种状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread executing in the Java virtual machine is in this state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104237Z" creationid="pingfangx" creationdate="20191014T104237Z">
        <seg>正在 Java 虚拟机中执行的线程处于这种状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread group represents a set of threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071725Z" creationid="pingfangx" creationdate="20191012T071725Z">
        <seg>线程组表示一个线程的集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling &lt;c0&gt;&lt;a1&gt;Object.wait&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104531Z" creationid="pingfangx" creationdate="20191014T104531Z">
        <seg>处于受阻塞状态的某一线程正在等待监视器锁，以便进入一个同步的块/方法，或者在调用 &lt;c0&gt;&lt;a1&gt;Object.wait&lt;/a1&gt;&lt;/c0&gt; 之后再次进入同步的块/方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as processor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104534Z" creationid="pingfangx" creationdate="20191014T104534Z">
        <seg>处于可运行状态的某一线程正在 Java 虚拟机中运行，但它可能正在等待操作系统中的其他资源，比如处理器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread in the waiting state is waiting for another thread to perform a particular action.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104607Z" creationid="pingfangx" creationdate="20191014T104607Z">
        <seg>处于等待状态的线程正等待另一个线程，以执行特定操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084738Z" creationid="pingfangx" creationdate="20191014T084738Z">
        <seg>线程中断被忽略，因为在中断时不处于活动状态的线程将由此返回 false 的方法反映出来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread is alive if it has been started and has not yet died.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084731Z" creationid="pingfangx" creationdate="20191014T084731Z">
        <seg>如果线程已经启动且尚未终止，则为活动状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread is allowed to access information about its own thread group, but not to access information about its thread group's parent thread group or any other thread groups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093056Z" creationid="pingfangx" creationdate="20191014T093056Z">
        <seg>允许线程访问有关自己的线程组的信息，但是不允许它访问有关其线程组的父线程组或其他任何线程组的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104547Z" creationid="pingfangx" creationdate="20191014T104547Z">
        <seg>某一线程因为调用以下带有指定正等待时间的方法之一而处于定时等待状态：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread is in the waiting state due to calling one of the following methods:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104555Z" creationid="pingfangx" creationdate="20191014T104555Z">
        <seg>某一线程因为调用下列方法之一而处于等待状态：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread managed by a &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt;, which executes &lt;c2&gt;&lt;a3&gt;ForkJoinTask&lt;/a3&gt;&lt;/c2&gt;s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120317Z" creationid="pingfangx" creationdate="20191025T120317Z">
        <seg>由 &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt; 管理的线程，它执行 &lt;c2&gt;&lt;a3&gt;ForkJoinTask&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071958Z" creationid="pingfangx" creationdate="20191012T071958Z">
        <seg>线程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread that has called &lt;t3&gt;Thread.join()&lt;/t3&gt; is waiting for a specified thread to terminate.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104611Z" creationid="pingfangx" creationdate="20191014T104611Z">
        <seg>已经调用了 &lt;t3&gt;Thread.join()&lt;/t3&gt; 的线程正在等待指定线程终止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread that has exited is in this state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104502Z" creationid="pingfangx" creationdate="20191014T104502Z">
        <seg>已退出的线程处于这种状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread that has not yet started is in this state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104235Z" creationid="pingfangx" creationdate="20191014T104235Z">
        <seg>至今尚未启动的线程处于这种状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread that is blocked waiting for a monitor lock is in this state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104307Z" creationid="pingfangx" creationdate="20191014T104307Z">
        <seg>受阻塞并等待某个监视器锁的线程处于这种状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104501Z" creationid="pingfangx" creationdate="20191014T104501Z">
        <seg>等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104456Z" creationid="pingfangx" creationdate="20191014T104456Z">
        <seg>无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread waits on an object's monitor by calling one of the &lt;c0&gt;wait&lt;/c0&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132742Z" creationid="pingfangx" creationdate="20191014T132742Z">
        <seg>线程通过调用其中一个 &lt;c0&gt;wait&lt;/c0&gt; 方法，在对象的监视器上等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread's id is assigned the first time it invokes &lt;t0&gt;ThreadId.get()&lt;/t0&gt; and remains unchanged on subsequent calls.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095921Z" creationid="pingfangx" creationdate="20191014T095921Z">
        <seg>线程 ID 是在第一次调用 &lt;t0&gt;ThreadId.get()&lt;/t0&gt; 时分配的，在后续调用中不会更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread-safe random-access list.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120113Z" creationid="pingfangx" creationdate="20191025T120113Z">
        <seg>线程安全的随机访问列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A thread-safe, mutable sequence of characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071706Z" creationid="pingfangx" creationdate="20191012T071706Z">
        <seg>线程安全的可变字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A throwable contains a snapshot of the execution stack of its thread at the time it was created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113223Z" creationid="pingfangx" creationdate="20191013T113223Z">
        <seg>Throwable 包含了其线程创建时线程执行堆栈的快照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A timeout of &lt;c1&gt;0&lt;/c1&gt; means to wait forever.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084859Z" creationid="pingfangx" creationdate="20191014T084859Z">
        <seg>超时为 &lt;c1&gt;0&lt;/c1&gt; 意味着要一直等下去。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A transparent stream that updates the associated message digest using the bits going through the stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T031252Z" creationid="pingfangx" creationdate="20191012T031252Z">
        <seg>GuardedObject 是一个用来保护对另一个对象的访问的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type variable is created the first time it is needed by a reflective method, as specified in this package.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T081921Z" creationid="pingfangx" creationdate="20191015T081921Z">
        <seg>类型变量在反射方法首次需要时创建（在此包中指定）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typesafe enumeration for byte orders.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114314Z" creationid="pingfangx" creationdate="20191011T114314Z">
        <seg>字节顺序的类型安全枚举。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typical strategy is to transform the name into a file name and then read a "class file" of that name from a file system.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071412Z" creationid="pingfangx" creationdate="20191014T071412Z">
        <seg>一般策略是将名称转换为某个文件名，然后从文件系统读取该名称的“类文件”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of &lt;c1&gt;true&lt;/c1&gt; indicates that the reflected object should suppress Java language access checking when it is used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090702Z" creationid="pingfangx" creationdate="20191015T090702Z">
        <seg>值为 &lt;c1&gt;true&lt;/c1&gt; 则指示反射的对象在使用时应该取消 Java 语言访问检查。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of &lt;c2&gt;false&lt;/c2&gt; indicates that the reflected object should enforce Java language access checks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090704Z" creationid="pingfangx" creationdate="20191015T090704Z">
        <seg>值为 &lt;c2&gt;false&lt;/c2&gt; 则指示反射的对象应该实施 Java 语言访问检查。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A version of &lt;c0&gt;&lt;a1&gt;AbstractQueuedSynchronizer&lt;/a1&gt;&lt;/c0&gt; in which synchronization state is maintained as a &lt;c2&gt;long&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122952Z" creationid="pingfangx" creationdate="20191025T122923Z">
        <seg>以 &lt;c2&gt;long&lt;/c2&gt; 形式维护同步状态的一个 &lt;c0&gt;&lt;a1&gt;AbstractQueuedSynchronizer&lt;/a1&gt;&lt;/c0&gt; 版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view of a ConcurrentHashMap as a &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; of keys, in which additions may optionally be enabled by mapping to a common value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115929Z" creationid="pingfangx" creationdate="20191025T115929Z">
        <seg>一个的 ConcurrentHashMap 的视图，作为键的 &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt;，其中添加可任选地被映射被使能以一个共同的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A write to a &lt;c0&gt;volatile&lt;/c0&gt; field &lt;i1&gt;happens-before&lt;/i1&gt; every subsequent read of that same field.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113302Z" creationid="pingfangx" creationdate="20191025T113302Z">
        <seg>写入 &lt;c0&gt;volatile&lt;/c0&gt; 字段 &lt;i1&gt;happen-before&lt;/i1&gt; 每个后续读取相同字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>About IPv6</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080423Z" creationid="pingfangx" creationdate="20191011T080423Z">
        <seg>关于 IPv6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract base class for reference objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090711Z" creationid="pingfangx" creationdate="20191012T090711Z">
        <seg>引用对象的抽象基类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract base class for tasks that run within a &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120250Z" creationid="pingfangx" creationdate="20191025T120250Z">
        <seg>在 &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt; 中运行的任务的抽象基类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract class for reading character streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102749Z" creationid="pingfangx" creationdate="20191010T102749Z">
        <seg>用于读取字符流的抽象类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract class for reading filtered character streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100744Z" creationid="pingfangx" creationdate="20191010T100744Z">
        <seg>用于读取已过滤的字符流的抽象类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract class for writing filtered character streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100746Z" creationid="pingfangx" creationdate="20191010T100746Z">
        <seg>用于写入已过滤的字符流的抽象类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract class for writing to character streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065410Z" creationid="pingfangx" creationdate="20191011T065410Z">
        <seg>写入字符流的抽象类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract datagram and multicast socket implementation base class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083156Z" creationid="pingfangx" creationdate="20191011T083156Z">
        <seg>数据报和多播套接字实现的抽象基类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access to the program file was denied.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080232Z" creationid="pingfangx" creationdate="20191014T080232Z">
        <seg>对程序文件的访问被拒绝。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AccessibleObject</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>AccessibleObject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing or modifying the field of a &lt;c0&gt;null&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104829Z" creationid="pingfangx" creationdate="20191014T104829Z">
        <seg>访问或修改 &lt;c0&gt;null&lt;/c0&gt; 对象的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing or modifying the slots of &lt;c0&gt;null&lt;/c0&gt; as if it were an array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104839Z" creationid="pingfangx" creationdate="20191014T104839Z">
        <seg>将 &lt;c0&gt;null&lt;/c0&gt; 作为一个数组，访问或修改其时间片。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accuracy of the floating-point &lt;c0&gt;Math&lt;/c0&gt; methods is measured in terms of &lt;i1&gt;ulps&lt;/i1&gt;, units in the last place.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151229Z" creationid="pingfangx" creationdate="20191013T151229Z">
        <seg>浮点 &lt;c0&gt;Math&lt;/c0&gt; 方法的准确性根据 &lt;i1&gt;ulp&lt;/i1&gt;（units in the last place，最后一位的进退位）来衡量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Actions in a thread prior to placing an object into any concurrent collection &lt;i0&gt;happen-before&lt;/i0&gt; actions subsequent to the access or removal of that element from the collection in another thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113542Z" creationid="pingfangx" creationdate="20191025T113542Z">
        <seg>线程中将一个对象放入任何并发 collection 之前的操作 &lt;i0&gt;happen-before&lt;/i0&gt; 从另一线程中的 collection 访问或移除该元素的后续操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Actions in a thread prior to the submission of a &lt;c0&gt;Runnable&lt;/c0&gt; to an &lt;c1&gt;Executor&lt;/c1&gt; &lt;i2&gt;happen-before&lt;/i2&gt; its execution begins.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113550Z" creationid="pingfangx" creationdate="20191025T113550Z">
        <seg>线程中向 &lt;c0&gt;Executor&lt;/c0&gt; 提交 &lt;c1&gt;Runnable&lt;/c1&gt; 之前的操作 &lt;i2&gt;happen-before&lt;/i2&gt; 其执行开始。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Actions prior to "releasing" synchronizer methods such as &lt;c0&gt;Lock.unlock&lt;/c0&gt;, &lt;c1&gt;Semaphore.release&lt;/c1&gt;, and &lt;c2&gt;CountDownLatch.countDown&lt;/c2&gt; &lt;i3&gt;happen-before&lt;/i3&gt; actions subsequent to a successful "acquiring" method such as &lt;c4&gt;Lock.lock&lt;/c4&gt;, &lt;c5&gt;Semaphore.acquire&lt;/c5&gt;, &lt;c6&gt;Condition.await&lt;/c6&gt;, and &lt;c7&gt;CountDownLatch.await&lt;/c7&gt; on the same synchronizer object in another thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113639Z" creationid="pingfangx" creationdate="20191025T113639Z">
        <seg>“释放”同步储存方法（如 &lt;c0&gt;Lock.unlock&lt;/c0&gt;、&lt;c1&gt;Semaphore.release&lt;/c1&gt; 和 &lt;c2&gt;CountDownLatch.countDown&lt;/c2&gt;）之前的操作 &lt;i3&gt;happen-before&lt;/i3&gt; 另一线程中相同同步储存对象成功“获取”方法（如 &lt;c4&gt;Lock.lock&lt;/c4&gt;、&lt;c5&gt;Semaphore.acquire&lt;/c5&gt;、&lt;c6&gt;Condition.await&lt;/c6&gt; 和 &lt;c7&gt;CountDownLatch.await&lt;/c7&gt;）的后续操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Actions prior to calling &lt;c0&gt;CyclicBarrier.await&lt;/c0&gt; and &lt;c1&gt;Phaser.awaitAdvance&lt;/c1&gt; (as well as its variants) &lt;i2&gt;happen-before&lt;/i2&gt; actions performed by the barrier action, and actions performed by the barrier action &lt;i3&gt;happen-before&lt;/i3&gt; actions subsequent to a successful return from the corresponding &lt;c4&gt;await&lt;/c4&gt; in other threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113842Z" creationid="pingfangx" creationdate="20191025T113842Z">
        <seg>调用 &lt;c0&gt;CyclicBarrier.await&lt;/c0&gt; 和 &lt;c1&gt;Phaser.awaitAdvance&lt;/c1&gt;(以及其变体)之前的操作 &lt;i2&gt;happen-before&lt;/i2&gt; 屏障操作所执行的操作，屏障操作所执行的操作 &lt;i3&gt;happen-before&lt;/i3&gt; 从另一线程中对应 &lt;c4&gt;await&lt;/c4&gt; 成功返回的后续操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Actions taken by the asynchronous computation represented by a &lt;c0&gt;Future&lt;/c0&gt; &lt;i1&gt;happen-before&lt;/i1&gt; actions subsequent to the retrieval of the result via &lt;c2&gt;Future.get()&lt;/c2&gt; in another thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113619Z" creationid="pingfangx" creationdate="20191025T113619Z">
        <seg>异步计算（由 &lt;c0&gt;Future&lt;/c0&gt; 表示）所采取的操作 &lt;i1&gt;happen-before&lt;/i1&gt; 通过另一线程中 &lt;c2&gt;Future.get()&lt;/c2&gt; 获取结果后续的操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additional Specification</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083019Z" creationid="pingfangx" creationdate="20191011T083019Z">
        <seg>其他规格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally &lt;c7&gt;weakCompareAndSet&lt;/c7&gt; does not provide ordering guarantees that are usually needed for synchronization control.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125313Z" creationid="pingfangx" creationdate="20191025T125313Z">
        <seg>此外，&lt;c7&gt;weakCompareAndSet&lt;/c7&gt; 不提供通常需要同步控制的排序保证。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, classes are provided only for those types that are commonly useful in intended applications.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125324Z" creationid="pingfangx" creationdate="20191025T125324Z">
        <seg>另外，仅为那些通常在预期应用程序中使用的类型提供类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if the table array has not been allocated, this</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084327Z" creationid="pingfangx" creationdate="20191026T084110Z">
        <seg>此外，如果表格数组尚未分配，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, method &lt;c5&gt;&lt;a6&gt;terminated()&lt;/a6&gt;&lt;/c5&gt; can be overridden to perform any special processing that needs to be done once the Executor has fully terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125727Z" creationid="pingfangx" creationdate="20191025T125727Z">
        <seg>此外，还可以重写方法 &lt;c5&gt;&lt;a6&gt;terminated()&lt;/a6&gt;&lt;/c5&gt; 来执行 Executor 完全终止后需要完成的所有特殊处理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Addresses</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074527Z" creationid="pingfangx" creationdate="20191011T074527Z">
        <seg>地址</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Addresses are used throughout the java.net APIs as either host identifiers, or socket endpoint identifiers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T074535Z" creationid="pingfangx" creationdate="20191011T074535Z">
        <seg>在整个 java.net API 中，地址或者用作主机标识符或者用作套接字端点标识符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds this reference object to the queue with which it is registered, if any.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154723Z" creationid="pingfangx" creationdate="20191014T154723Z">
        <seg>将此引用对象添加到引用对象已向其注册的队列（如果有）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two &lt;c0&gt;double&lt;/c0&gt; values together as per the + operator.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132708Z" creationid="pingfangx" creationdate="20191013T132708Z">
        <seg>按 + 运算符将两个 &lt;c0&gt;double&lt;/c0&gt; 值相加。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two &lt;c0&gt;float&lt;/c0&gt; values together as per the + operator.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132326Z" creationid="pingfangx" creationdate="20191013T132326Z">
        <seg>按 + 运算符将两个 &lt;c0&gt;float&lt;/c0&gt; 值相加。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two &lt;c0&gt;long&lt;/c0&gt; values together as per the + operator.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125101Z" creationid="pingfangx" creationdate="20191013T125101Z">
        <seg>按 + 运算符将两个 &lt;c0&gt;long&lt;/c0&gt; 值相加。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two integers together as per the + operator.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124418Z" creationid="pingfangx" creationdate="20191013T124418Z">
        <seg>按 + 运算符将两个整数相加。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the &lt;c0&gt;finalize&lt;/c0&gt; method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140232Z" creationid="pingfangx" creationdate="20191014T140232Z">
        <seg>在启用某个对象的 &lt;c0&gt;finalize&lt;/c0&gt; 方法后，将不会执行进一步操作，直到 Java 虚拟机再次确定尚未终止的任何线程无法再通过任何方法访问此对象，其中包括由准备终止的其他对象或类执行的可能操作，在执行该操作时，对象可能被丢弃。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All actions in a thread &lt;i0&gt;happen-before&lt;/i0&gt; any other thread successfully returns from a &lt;c1&gt;join&lt;/c1&gt; on that thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113327Z" creationid="pingfangx" creationdate="20191025T113327Z">
        <seg>线程中的所有操作 &lt;i0&gt;happen-before&lt;/i0&gt; 从该线程上的 &lt;c1&gt;join&lt;/c1&gt; 成功返回的任何其他线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All annotations directly present on this element</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090642Z" creationid="pingfangx" creationdate="20191015T090642Z">
        <seg>直接存在于此元素上的所有注释</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All annotations returned by methods in this interface are immutable and serializable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161031Z" creationid="pingfangx" creationdate="20191014T161031Z">
        <seg>由此接口中的方法返回的所有注释都是不可变并且可序列化的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All applicable internal methods accept a hash code as an argument (as normally supplied from a public method), allowing them to call each other without recomputing user hashCodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081548Z" creationid="pingfangx" creationdate="20191026T081548Z">
        <seg>所有适用的内部方法都接受散列码作为参数（通常由公共方法提供），允许它们互相调用而不用重新计算 hash。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All its standard I/O (i.e. stdin, stdout, stderr) operations will be redirected to the parent process, where they can be accessed via the streams obtained using the methods &lt;c0&gt;&lt;a1&gt;getOutputStream()&lt;/a1&gt;&lt;/c0&gt;, &lt;c2&gt;&lt;a3&gt;getInputStream()&lt;/a3&gt;&lt;/c2&gt;, and &lt;c4&gt;&lt;a5&gt;getErrorStream()&lt;/a5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074727Z" creationid="pingfangx" creationdate="20191014T074727Z">
        <seg>它的所有标准 I/O（即 stdin、stdout 和 stderr）操作都将通过三个流 (&lt;c0&gt;&lt;a1&gt;getOutputStream()&lt;/a1&gt;&lt;/c0&gt;、&lt;c2&gt;&lt;a3&gt;getInputStream()&lt;/a3&gt;&lt;/c2&gt; 和 &lt;c4&gt;&lt;a5&gt;getErrorStream()&lt;/a5&gt;&lt;/c4&gt;) 重定向到父进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All methods that accept timeout parameters treat values less than or equal to zero to mean not to wait at all.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111420Z" creationid="pingfangx" creationdate="20191025T111420Z">
        <seg>接受超时期参数的所有方法将小于等于 0 的值视为根本不会等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All non-public interfaces must be in the same package; otherwise, it would not be possible for the proxy class to implement all of the interfaces, regardless of what package it is defined in.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113625Z" creationid="pingfangx" creationdate="20191015T113625Z">
        <seg>所有非公共接口必须位于同一包中；否则，该代理类将不可能实现所有的接口，无论它在哪一个包中定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All objects, including arrays, implement the methods of this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094505Z" creationid="pingfangx" creationdate="20191012T094505Z">
        <seg>所有对象（包括数组）都实现这个类的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of the &lt;c0&gt;Class&lt;/c0&gt; objects in the &lt;c1&gt;interfaces&lt;/c1&gt; array must represent interfaces, not classes or primitive types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113554Z" creationid="pingfangx" creationdate="20191015T113554Z">
        <seg>&lt;c0&gt;interfaces&lt;/c0&gt; 数组中的所有 &lt;c1&gt;Class&lt;/c1&gt; 对象必须表示接口，而不能表示类或基本类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of the interface types must be visible by name through the specified class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113608Z" creationid="pingfangx" creationdate="20191015T113608Z">
        <seg>所有接口类型的名称通过特定的类加载器必须可见。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All soft references to softly-reachable objects are guaranteed to have been cleared before the virtual machine throws an &lt;c0&gt;OutOfMemoryError&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155725Z" creationid="pingfangx" creationdate="20191014T155725Z">
        <seg>软可到达对象的所有软引用都要保证在虚拟机抛出 &lt;c0&gt;OutOfMemoryError&lt;/c0&gt; 之前已经被清除。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All stack frames except for the one at the top of the stack represent a method invocation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095200Z" creationid="pingfangx" creationdate="20191014T095200Z">
        <seg>所有的堆栈帧（堆栈顶部的那个堆栈帧除外）都表示一个方法调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All string literals in Java programs, such as &lt;c1&gt;"abc"&lt;/c1&gt;, are implemented as instances of this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T020846Z" creationid="pingfangx" creationdate="20191014T020846Z">
        <seg>Java 程序中的所有字符串字面值（如 &lt;c1&gt;"abc"&lt;/c1&gt; ）都作为此类的实例实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the constants of an enum type can be obtained by calling the implicit &lt;c2&gt;public static T[] values()&lt;/c2&gt; method of that type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094613Z" creationid="pingfangx" creationdate="20191014T094613Z">
        <seg>枚举类型的所有的常数可以通过调用隐含 &lt;c2&gt;public static T[] values()&lt;/c2&gt; 该类型的方法来获得。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All threads that are not daemon threads have died, either by returning from the call to the &lt;c0&gt;run&lt;/c0&gt; method or by throwing an exception that propagates beyond the &lt;c1&gt;run&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081041Z" creationid="pingfangx" creationdate="20191014T081041Z">
        <seg>非守护线程的所有线程都已停止运行，无论是通过从对 &lt;c0&gt;run&lt;/c0&gt; 方法的调用中返回，还是通过抛出一个传播到 &lt;c1&gt;run&lt;/c1&gt; 方法之外的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a &lt;c0&gt;Boolean&lt;/c0&gt; object representing the &lt;c1&gt;value&lt;/c1&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133249Z" creationid="pingfangx" creationdate="20191013T133249Z">
        <seg>分配一个表示 &lt;c0&gt;value&lt;/c0&gt; 参数的 &lt;c1&gt;Boolean&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a &lt;c0&gt;Boolean&lt;/c0&gt; object representing the value &lt;c1&gt;true&lt;/c1&gt; if the string argument is not &lt;c2&gt;null&lt;/c2&gt; and is equal, ignoring case, to the string &lt;c3&gt;"true"&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133252Z" creationid="pingfangx" creationdate="20191013T133252Z">
        <seg>如果 String 参数不为 &lt;c0&gt;null&lt;/c0&gt; 且在忽略大小写时等于 &lt;c1&gt;"true"&lt;/c1&gt;，则分配一个表示 &lt;c2&gt;true&lt;/c2&gt; 值的 &lt;c3&gt;Boolean&lt;/c3&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new &lt;c0&gt;String&lt;/c0&gt; so that it represents the sequence of characters currently contained in the character array argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022436Z" creationid="pingfangx" creationdate="20191014T022436Z">
        <seg>分配一个新的 &lt;c0&gt;String&lt;/c0&gt;，使其表示字符数组参数中当前包含的字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new &lt;c0&gt;String&lt;/c0&gt; that contains characters from a subarray of the &lt;a1&gt;Unicode code point&lt;/a1&gt; array argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022522Z" creationid="pingfangx" creationdate="20191014T022522Z">
        <seg>分配一个新的 &lt;c0&gt;String&lt;/c0&gt;，它包含 &lt;a1&gt;Unicode 代码点&lt;/a1&gt; 数组参数一个子数组的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new &lt;c0&gt;String&lt;/c0&gt; that contains characters from a subarray of the character array argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022445Z" creationid="pingfangx" creationdate="20191014T022445Z">
        <seg>分配一个新的 &lt;c0&gt;String&lt;/c0&gt;，它包含取自字符数组参数一个子数组的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new &lt;c0&gt;Thread&lt;/c0&gt; object so that it has &lt;c1&gt;target&lt;/c1&gt; as its run object, has the specified &lt;c2&gt;name&lt;/c2&gt; as its name, and belongs to the thread group referred to by &lt;c3&gt;group&lt;/c3&gt;, and has the specified &lt;i4&gt;stack size&lt;/i4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081422Z" creationid="pingfangx" creationdate="20191014T081422Z">
        <seg>分配新的 &lt;c0&gt;Thread&lt;/c0&gt; 对象，以便将 &lt;c1&gt;target&lt;/c1&gt; 作为其运行对象，将指定的 &lt;c2&gt;name&lt;/c2&gt; 作为其名称，作为 &lt;c3&gt;group&lt;/c3&gt; 所引用的线程组的一员，并具有指定的&lt;i4&gt;堆栈大小&lt;/i4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new &lt;c0&gt;Thread&lt;/c0&gt; object so that it has &lt;c1&gt;target&lt;/c1&gt; as its run object, has the specified &lt;c2&gt;name&lt;/c2&gt; as its name, and belongs to the thread group referred to by &lt;c3&gt;group&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081411Z" creationid="pingfangx" creationdate="20191014T081411Z">
        <seg>分配新的 &lt;c0&gt;Thread&lt;/c0&gt; 对象，以便将 &lt;c1&gt;target&lt;/c1&gt; 作为其运行对象，将指定的 &lt;c2&gt;name&lt;/c2&gt; 作为其名称，并作为 &lt;c3&gt;group&lt;/c3&gt; 所引用的线程组的一员。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new &lt;c0&gt;Thread&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081402Z" creationid="pingfangx" creationdate="20191014T081402Z">
        <seg>分配新的 &lt;c0&gt;Thread&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new string that contains the sequence of characters currently contained in the string buffer argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023850Z" creationid="pingfangx" creationdate="20191014T023850Z">
        <seg>分配一个新的字符串，它包含字符串缓冲区参数中当前包含的字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new string that contains the sequence of characters currently contained in the string builder argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023852Z" creationid="pingfangx" creationdate="20191014T023852Z">
        <seg>分配一个新的字符串，它包含字符串生成器参数中当前包含的字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also note that this interface does not itself define an annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094232Z" creationid="pingfangx" creationdate="20191012T094232Z">
        <seg>还要注意此接口本身不定义 annotation 类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the JDBC&lt;s2&gt;&lt;f3&gt;TM&lt;/f3&gt;&lt;/s2&gt; API is mainly geared to passing SQL statements to a database, it provides for reading and writing data from any data source with a tabular format.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032916Z" creationid="pingfangx" creationdate="20191012T032905Z">
        <seg>虽然 JDBC&lt;s2&gt;&lt;f3&gt;TM&lt;/f3&gt;&lt;/s2&gt; API 主要用于将 SQL 语句传递给数据库，但它还可以用于以表格方式从任何数据源中读写数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always returns &lt;c0&gt;null&lt;/c0&gt; in Android</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154301Z" creationid="pingfangx" creationdate="20191013T154301Z">
        <seg>Android 中总是返回 &lt;c0&gt;null&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Among other usage contexts, &lt;c3&gt;lazySet&lt;/c3&gt; may apply when nulling out, for the sake of garbage collection, a reference that is never accessed again.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120917Z" creationid="pingfangx" creationdate="20191025T120917Z">
        <seg>在其他使用上下文中，当为 null 时（为了垃圾回收），&lt;c3&gt;lazySet&lt;/c3&gt; 可以应用不会再次访问的引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Among the facilities provided by the &lt;c0&gt;System&lt;/c0&gt; class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153951Z" creationid="pingfangx" creationdate="20191013T153951Z">
        <seg>在 &lt;c0&gt;System&lt;/c0&gt; 类提供的设施中，有标准输入、标准输出和错误输出流；对外部定义的属性和环境变量的访问；加载文件和库的方法；还有快速复制数组的一部分的实用方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Among the many things that can go wrong are:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080228Z" creationid="pingfangx" creationdate="20191014T080228Z">
        <seg>其中有很多方面会导致错误有：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;&lt;a1&gt;Exchanger&lt;/a1&gt;&lt;/c0&gt; allows two threads to exchange objects at a rendezvous point, and is useful in several pipeline designs.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111853Z" creationid="pingfangx" creationdate="20191025T111853Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Exchanger&lt;/a1&gt;&lt;/c0&gt; 允许两个线程在 collection 点交换对象，它在多流水线设计中是有用的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;&lt;a1&gt;Executor&lt;/a1&gt;&lt;/c0&gt; that provides methods to manage termination and methods that can produce a &lt;c2&gt;&lt;a3&gt;Future&lt;/a3&gt;&lt;/c2&gt; for tracking progress of one or more asynchronous tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113946Z" creationid="pingfangx" creationdate="20191025T113946Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Executor&lt;/a1&gt;&lt;/c0&gt; 提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 &lt;c2&gt;&lt;a3&gt;Future&lt;/a3&gt;&lt;/c2&gt; 的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt; for running &lt;c2&gt;&lt;a3&gt;ForkJoinTask&lt;/a3&gt;&lt;/c2&gt;s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120231Z" creationid="pingfangx" creationdate="20191025T120231Z">
        <seg>用于运行 &lt;c2&gt;&lt;a3&gt;ForkJoinTask&lt;/a3&gt;&lt;/c2&gt; 的 &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt; that can schedule commands to run after a given delay, or to execute periodically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114005Z" creationid="pingfangx" creationdate="20191025T114005Z">
        <seg>一个 &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt;，可安排在给定的延迟后运行或定期执行的命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt; that executes each submitted task using one of possibly several pooled threads, normally configured using &lt;c2&gt;&lt;a3&gt;Executors&lt;/a3&gt;&lt;/c2&gt; factory methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114207Z" creationid="pingfangx" creationdate="20191025T114207Z">
        <seg>一个 &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt;，它使用可能的几个池线程之一执行每个提交的任务，通常使用 &lt;c2&gt;&lt;a3&gt;Executors&lt;/a3&gt;&lt;/c2&gt; 工厂方法配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;AtomicMarkableReference&lt;/c0&gt; maintains an object reference along with a mark bit, that can be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122451Z" creationid="pingfangx" creationdate="20191025T122451Z">
        <seg>&lt;c0&gt;AtomicMarkableReference&lt;/c0&gt; 维护带有标记位的对象引用，可以原子方式对其进行更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;AtomicStampedReference&lt;/c0&gt; maintains an object reference along with an integer "stamp", that can be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122455Z" creationid="pingfangx" creationdate="20191025T122455Z">
        <seg>&lt;c0&gt;AtomicStampedReference&lt;/c0&gt; 维护带有整数“标志”的对象引用，可以用原子方式对其进行更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;AttributedCharacterIterator&lt;/c0&gt; allows iteration through both text and related attribute information.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033148Z" creationid="pingfangx" creationdate="20191012T033148Z">
        <seg>&lt;c0&gt;AttributedCharacterIterator&lt;/c0&gt; 允许对文本和相关属性信息的迭代。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;Error&lt;/c0&gt; is a subclass of &lt;c1&gt;Throwable&lt;/c1&gt; that indicates serious problems that a reasonable application should not try to catch.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073214Z" creationid="pingfangx" creationdate="20191012T073214Z">
        <seg>&lt;c0&gt;Error&lt;/c0&gt; 是 &lt;c1&gt;Throwable&lt;/c1&gt; 的子类，用于指示合理的应用程序不应该试图捕获的严重问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;UndeclaredThrowableException&lt;/c0&gt; instance contains the undeclared checked exception that was thrown by the invocation handler, and it can be retrieved with the &lt;c1&gt;getUndeclaredThrowable()&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111053Z" creationid="pingfangx" creationdate="20191015T111053Z">
        <seg>&lt;c0&gt;UndeclaredThrowableException&lt;/c0&gt; 实例包含由调用处理程序抛出的经过检查的未声明异常，而且可以使用 &lt;c1&gt;getUndeclaredThrowable()&lt;/c1&gt; 方法获取。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;int&lt;/c0&gt; array in which elements may be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122446Z" creationid="pingfangx" creationdate="20191025T122446Z">
        <seg>可以用原子方式更新其元素的 &lt;c0&gt;int&lt;/c0&gt; 数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c0&gt;int&lt;/c0&gt; value that may be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122445Z" creationid="pingfangx" creationdate="20191025T122445Z">
        <seg>可以用原子方式更新的 &lt;c0&gt;int&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;c1&gt;int&lt;/c1&gt; value represents all Unicode code points, including supplementary code points.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143712Z" creationid="pingfangx" creationdate="20191013T143712Z">
        <seg>&lt;c1&gt;int&lt;/c1&gt; 值表示所有 Unicode 代码点，包括增补代码点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Annotation object is used as a wrapper for a text attribute value if the attribute has annotation characteristics.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033155Z" creationid="pingfangx" creationdate="20191012T033155Z">
        <seg>如果文本属性具有 annotation 特征，则 Annotation 对象用作文本属性值的包装器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An AttributedString holds text and related attribute information.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033159Z" creationid="pingfangx" creationdate="20191012T033159Z">
        <seg>AttributedString 保存文本及相关属性信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Entry maintaining a key and a value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045100Z" creationid="pingfangx" creationdate="20191012T045100Z">
        <seg>维护键和值的 Entry。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Entry maintaining an immutable key and value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045105Z" creationid="pingfangx" creationdate="20191012T045105Z">
        <seg>维护不可变的键和值的 Entry。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An ExecutorService manages queuing and scheduling of tasks, and allows controlled shutdown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110511Z" creationid="pingfangx" creationdate="20191025T110511Z">
        <seg>ExecutorService 管理任务的排队和安排，并允许受控制的关闭。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An HttpCookie object represents an http cookie, which carries state information between server and user agent.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083158Z" creationid="pingfangx" creationdate="20191011T083158Z">
        <seg>HttpCookie 对象表示一个 http cookie，该 cookie 带有服务器和用户代理之间的状态信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073008Z" creationid="pingfangx" creationdate="20191012T073008Z">
        <seg>当应用程序试图反射性地创建一个实例（而不是数组）、设置或获取一个字段，或者调用一个方法，但当前正在执行的方法无法访问指定类、字段、方法或构造方法的定义时，抛出 IllegalAccessException。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified &lt;c0&gt;&lt;a1&gt;&lt;c2&gt;charset&lt;/c2&gt;&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T101638Z" creationid="pingfangx" creationdate="20191010T101638Z">
        <seg>InputStreamReader 是字节流通向字符流的桥梁：它使用指定的 &lt;c0&gt;&lt;a1&gt;&lt;c2&gt;charset&lt;/c2&gt;&lt;/a1&gt;&lt;/c0&gt; 读取字节并将其解码为字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Iterator specialized for &lt;c0&gt;double&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034808Z" creationid="pingfangx" creationdate="20191012T034808Z">
        <seg>一个专用于 &lt;c0&gt;double&lt;/c0&gt; 值的迭代器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Iterator specialized for &lt;c0&gt;int&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034818Z" creationid="pingfangx" creationdate="20191012T034818Z">
        <seg>一个专用于 &lt;c0&gt;int&lt;/c0&gt; 值的迭代器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Iterator specialized for &lt;c0&gt;long&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034822Z" creationid="pingfangx" creationdate="20191012T034822Z">
        <seg>一个专用于 &lt;c0&gt;long&lt;/c0&gt; 值的迭代器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102618Z" creationid="pingfangx" creationdate="20191010T102618Z">
        <seg>ObjectInputStream 对以前使用 ObjectOutputStream 写入的基本数据和对象进行反序列化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102627Z" creationid="pingfangx" creationdate="20191010T102627Z">
        <seg>ObjectOutputStream 将 Java 对象的基本数据类型和图形写入 OutputStream。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified &lt;c0&gt;&lt;a1&gt;&lt;c2&gt;charset&lt;/c2&gt;&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102710Z" creationid="pingfangx" creationdate="20191010T102710Z">
        <seg>OutputStreamWriter 是字符流通向字节流的桥梁：可使用指定的 &lt;c0&gt;&lt;a1&gt;&lt;c2&gt;charset&lt;/c2&gt;&lt;/a1&gt;&lt;/c0&gt; 将要写入流中的字符编码成字节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An abstract &lt;c0&gt;Spliterator.OfDouble&lt;/c0&gt; that implements &lt;c1&gt;trySplit&lt;/c1&gt; to permit limited parallelism.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050743Z" creationid="pingfangx" creationdate="20191012T050743Z">
        <seg>一个抽象 &lt;c0&gt;Spliterator.OfDouble&lt;/c0&gt; 实现 &lt;c1&gt;trySplit&lt;/c1&gt; 以允许有限的并行性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An abstract &lt;c0&gt;Spliterator.OfInt&lt;/c0&gt; that implements &lt;c1&gt;trySplit&lt;/c1&gt; to permit limited parallelism.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050741Z" creationid="pingfangx" creationdate="20191012T050741Z">
        <seg>一个抽象 &lt;c0&gt;Spliterator.OfInt&lt;/c0&gt; 实现 &lt;c1&gt;trySplit&lt;/c1&gt; 以允许有限的并行性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An abstract &lt;c0&gt;Spliterator.OfLong&lt;/c0&gt; that implements &lt;c1&gt;trySplit&lt;/c1&gt; to permit limited parallelism.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050737Z" creationid="pingfangx" creationdate="20191012T050737Z">
        <seg>一个抽象 &lt;c0&gt;Spliterator.OfLong&lt;/c0&gt; 实现 &lt;c1&gt;trySplit&lt;/c1&gt; 以允许有限的并行性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An abstract &lt;c0&gt;Spliterator&lt;/c0&gt; that implements &lt;c1&gt;trySplit&lt;/c1&gt; to permit limited parallelism.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050730Z" creationid="pingfangx" creationdate="20191012T050730Z">
        <seg>一个抽象 &lt;c0&gt;Spliterator&lt;/c0&gt; 实现 &lt;c1&gt;trySplit&lt;/c1&gt; 以允许有限的并行性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An abstract representation of file and directory pathnames.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094737Z" creationid="pingfangx" creationdate="20191010T094737Z">
        <seg>文件和目录路径名的抽象表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An abstract wrapper class for an &lt;c0&gt;EventListener&lt;/c0&gt; class which associates a set of additional parameters with the listener.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045550Z" creationid="pingfangx" creationdate="20191012T045550Z">
        <seg>将一组附加参数与侦听器关联的 &lt;c0&gt;EventListener&lt;/c0&gt; 类的抽象包装器类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An additional danger of this method is that it may be used to generate exceptions that the target thread is unprepared to handle (including checked exceptions that the thread could not possibly throw, were it not for this method).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082709Z" creationid="pingfangx" creationdate="20191014T082709Z">
        <seg>该方法的附加危险是它可用于生成目标线程未准备处理的异常（包括若没有该方法该线程不太可能抛出的已检查的异常）。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An application can ask if the package is compatible with a particular version, see the &lt;c0&gt;&lt;a1&gt;isCompatibleWith&lt;/a1&gt;&lt;/c0&gt; method for details.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094843Z" creationid="pingfangx" creationdate="20191014T094843Z">
        <seg>应用程序可以询问包是否与特定版本兼容，有关详细信息，请参阅 &lt;c0&gt;&lt;a1&gt;isCompatibleWith&lt;/a1&gt;&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An application cannot create its own instance of this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153502Z" creationid="pingfangx" creationdate="20191013T153502Z">
        <seg>应用程序不能创建自己的 Runtime 类实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of object references in which elements may be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122453Z" creationid="pingfangx" creationdate="20191025T122453Z">
        <seg>可以用原子方式更新其元素的对象引用数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element in a stack trace, as returned by &lt;c0&gt;&lt;a1&gt;getStackTrace()&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071636Z" creationid="pingfangx" creationdate="20191012T071636Z">
        <seg>堆栈跟踪中的元素，它由 &lt;c0&gt;&lt;a1&gt;getStackTrace()&lt;/a1&gt;&lt;/c0&gt; 返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum is a kind of class and an annotation is a kind of interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T021203Z" creationid="pingfangx" creationdate="20191013T021203Z">
        <seg>枚举是一种类，注释是一种接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum type should override this method when a more "programmer-friendly" string form exists.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094533Z" creationid="pingfangx" creationdate="20191014T094533Z">
        <seg>当存在更加“程序员友好的”字符串形式时，应该使用枚举类型重写此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enumeration of cryptographic primitives.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032559Z" creationid="pingfangx" creationdate="20191012T032559Z">
        <seg>密码原语的枚举。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An immutable arbitrary-precision signed decimal.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T070509Z" creationid="pingfangx" creationdate="20191011T070509Z">
        <seg>不可变的、任意精度的有符号十进制数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An immutable arbitrary-precision signed integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T070840Z" creationid="pingfangx" creationdate="20191011T070513Z">
        <seg>不可变的、任意精度的有符号整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An implementation of &lt;c0&gt;&lt;a1&gt;ReadWriteLock&lt;/a1&gt;&lt;/c0&gt; supporting similar semantics to &lt;c2&gt;&lt;a3&gt;ReentrantLock&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123044Z" creationid="pingfangx" creationdate="20191025T123044Z">
        <seg>支持与 &lt;c0&gt;&lt;a1&gt;ReentrantLock&lt;/a1&gt;&lt;/c0&gt; 类似语义的 &lt;c2&gt;&lt;a3&gt;ReadWriteLock&lt;/a3&gt;&lt;/c2&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An index ranges from zero to &lt;t1&gt;length() - 1&lt;/t1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070433Z" creationid="pingfangx" creationdate="20191014T070433Z">
        <seg>索引范围是从零到 &lt;t1&gt;length() - 1&lt;/t1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An informative annotation type used to indicate that an interface type declaration is intended to be a &lt;i0&gt;functional interface&lt;/i0&gt; as defined by the Java Language Specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T064946Z" creationid="pingfangx" creationdate="20191012T064946Z">
        <seg>一种信息性注解类型，用于指示接口类型声明是由 Java 语言规范定义的 &lt;i0&gt;functional interface (函数式接口)&lt;/i0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of &lt;c0&gt;ThreadDeath&lt;/c0&gt; is thrown in the victim thread when the (deprecated) &lt;c1&gt;&lt;a2&gt;stop()&lt;/a2&gt;&lt;/c1&gt; method is invoked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073423Z" creationid="pingfangx" creationdate="20191012T073423Z">
        <seg>实例 &lt;c0&gt;ThreadDeath&lt;/c0&gt; 在受害线程(废弃的) &lt;c1&gt;&lt;a2&gt;stop()&lt;/a2&gt;&lt;/c1&gt; 方法调用时抛出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of &lt;t0&gt;HashMap&lt;/t0&gt; has two parameters that affect its performance: &lt;i1&gt;initial capacity&lt;/i1&gt; and &lt;i2&gt;load factor&lt;/i2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T132358Z" creationid="pingfangx" creationdate="20191025T132358Z">
        <seg>&lt;t0&gt;HashMap&lt;/t0&gt; 的实例有两个参数影响其性能：&lt;i1&gt;初始容量&lt;/i1&gt; 和&lt;i2&gt;加载因子&lt;/i2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of one of these subclasses encapsulates a single reference to a particular object, called the &lt;e3&gt;referent&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085642Z" creationid="pingfangx" creationdate="20191012T085642Z">
        <seg>其中一个子类的实例封装了对特定对象的引用，该对象名为 &lt;e3&gt;指示对象&lt;/e3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of the class can then be allocated, passed as an argument when creating &lt;c2&gt;Thread&lt;/c2&gt;, and started.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081132Z" creationid="pingfangx" creationdate="20191014T081132Z">
        <seg>然后可以分配该类的实例，在创建 &lt;c2&gt;Thread&lt;/c2&gt; 时作为一个参数来传递并启动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of the subclass can then be allocated and started.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081101Z" creationid="pingfangx" creationdate="20191014T081101Z">
        <seg>接下来可以分配并启动该子类的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of this class is used to generate a stream of pseudorandom numbers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050050Z" creationid="pingfangx" creationdate="20191012T050050Z">
        <seg>此类的实例用于生成伪随机数流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An int buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114338Z" creationid="pingfangx" creationdate="20191011T114338Z">
        <seg>int 缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An interface method invocation on a proxy instance will be encoded and dispatched to the invocation handler's &lt;c0&gt;&lt;a1&gt;invoke&lt;/a1&gt;&lt;/c0&gt; method as described in the documentation for that method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112850Z" creationid="pingfangx" creationdate="20191015T112850Z">
        <seg>代理实例上的接口方法调用将按照该方法的文档描述进行编码，并被指派到调用处理程序的 &lt;c0&gt;&lt;a1&gt;Invoke&lt;/a1&gt;&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An interpreter for printf-style format strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045623Z" creationid="pingfangx" creationdate="20191012T045623Z">
        <seg>printf 风格的格式字符串的解释程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An invocation of the &lt;c0&gt;hashCode&lt;/c0&gt;, &lt;c1&gt;equals&lt;/c1&gt;, or &lt;c2&gt;toString&lt;/c2&gt; methods declared in &lt;c3&gt;java.lang.Object&lt;/c3&gt; on a proxy instance will be encoded and dispatched to the invocation handler's &lt;c4&gt;invoke&lt;/c4&gt; method in the same manner as interface method invocations are encoded and dispatched, as described above.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112858Z" creationid="pingfangx" creationdate="20191015T112858Z">
        <seg>在代理实例上的 &lt;c0&gt;java.lang.Object&lt;/c0&gt; 中声明的 &lt;c1&gt;hashCode&lt;/c1&gt;、&lt;c2&gt;equals&lt;/c2&gt; 或 &lt;c3&gt;toString&lt;/c3&gt; 方法的调用将按照与编码和指派接口方法调用相同的方式进行编码，并被指派到调用处理程序的 &lt;c4&gt;invoke&lt;/c4&gt; 方法，如上所述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An invocation of this method behaves in exactly the same way as the invocation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084846Z" creationid="pingfangx" creationdate="20191014T084846Z">
        <seg>此方法的调用行为有完全相同的方式，与调用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An invocation of this method of the form</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041656Z" creationid="pingfangx" creationdate="20191014T041656Z">
        <seg>调用该方法的形式为：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034519Z" creationid="pingfangx" creationdate="20191012T034519Z">
        <seg>系列表迭代器，允许程序员按任一方向遍历列表、迭代期间修改列表，并获得迭代器在列表中的当前位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over a collection.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034510Z" creationid="pingfangx" creationdate="20191012T034510Z">
        <seg>对 collection 进行迭代的迭代器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object for traversing and partitioning elements of a source.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T044846Z" creationid="pingfangx" creationdate="20191012T044846Z">
        <seg>用于遍历和划分源元素的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object is &lt;e0&gt;phantom reachable&lt;/e0&gt; if it is neither strongly, softly, nor weakly reachable, it has been finalized, and some phantom reference refers to it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090701Z" creationid="pingfangx" creationdate="20191012T090701Z">
        <seg>如果一个对象既不是强可到达对象，也不是软可到达对象或弱可到达对象，它已经终止，并且某个虚引用在引用它，则该对象是 &lt;e0&gt;虚可到达&lt;/e0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object is &lt;e0&gt;softly reachable&lt;/e0&gt; if it is not strongly reachable but can be reached by traversing a soft reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090654Z" creationid="pingfangx" creationdate="20191012T090654Z">
        <seg>如果一个对象不是强可到达对象，但通过遍历某一软引用可以到达它，则该对象是 &lt;e0&gt;软可到达&lt;/e0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object is &lt;e0&gt;strongly reachable&lt;/e0&gt; if it can be reached by some thread without traversing any reference objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090545Z" creationid="pingfangx" creationdate="20191012T090545Z">
        <seg>如果某一线程可以不必遍历所有引用对象而直接到达一个对象，则该对象是 &lt;e0&gt;强可到达&lt;/e0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object is &lt;e0&gt;weakly reachable&lt;/e0&gt; if it is neither strongly nor softly reachable but can be reached by traversing a weak reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090658Z" creationid="pingfangx" creationdate="20191012T090658Z">
        <seg>如果一个对象既不是强可到达对象，也不是软可到达对象，但通过遍历弱引用可以到达它，则该对象是 &lt;e0&gt;弱可到达&lt;/e0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c1&gt;Boolean&lt;/c1&gt; contains a single field whose type is &lt;c2&gt;boolean&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133152Z" creationid="pingfangx" creationdate="20191013T133152Z">
        <seg>一个 &lt;c1&gt;Boolean&lt;/c1&gt; 类型的对象只包含一个类型为 &lt;c2&gt;boolean&lt;/c2&gt; 的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c2&gt;Byte&lt;/c2&gt; contains a single field whose type is &lt;c3&gt;byte&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121047Z" creationid="pingfangx" creationdate="20191013T121047Z">
        <seg>一个 &lt;c2&gt;Byte&lt;/c2&gt; 类型的对象只包含一个类型为 &lt;c3&gt;byte&lt;/c3&gt; 的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c2&gt;Character&lt;/c2&gt; contains a single field whose type is &lt;c3&gt;char&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T135044Z" creationid="pingfangx" creationdate="20191013T135044Z">
        <seg>&lt;c2&gt;Character&lt;/c2&gt; 类型的对象包含类型为 &lt;c3&gt;char&lt;/c3&gt; 的单个字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c2&gt;Double&lt;/c2&gt; contains a single field whose type is &lt;c3&gt;double&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132524Z" creationid="pingfangx" creationdate="20191013T132524Z">
        <seg>每个 &lt;c2&gt;Double&lt;/c2&gt; 类型的对象都包含一个 &lt;c3&gt;double&lt;/c3&gt; 类型的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c2&gt;Float&lt;/c2&gt; contains a single field whose type is &lt;c3&gt;float&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T131321Z" creationid="pingfangx" creationdate="20191013T131321Z">
        <seg>&lt;c2&gt;Float&lt;/c2&gt; 类型的对象包含一个 &lt;c3&gt;float&lt;/c3&gt; 类型的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c2&gt;Integer&lt;/c2&gt; contains a single field whose type is &lt;c3&gt;int&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122656Z" creationid="pingfangx" creationdate="20191013T122656Z">
        <seg>&lt;c2&gt;Integer&lt;/c2&gt; 类型的对象包含一个 &lt;c3&gt;int&lt;/c3&gt; 类型的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c2&gt;Long&lt;/c2&gt; contains a single field whose type is &lt;c3&gt;long&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124743Z" creationid="pingfangx" creationdate="20191013T124743Z">
        <seg>每个 &lt;c2&gt;Long&lt;/c2&gt; 类型的对象都包含一个 &lt;c3&gt;long&lt;/c3&gt; 类型的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c2&gt;Short&lt;/c2&gt; contains a single field whose type is &lt;c3&gt;short&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121941Z" creationid="pingfangx" creationdate="20191013T121941Z">
        <seg>一个 &lt;c2&gt;Short&lt;/c2&gt; 类型的对象只包含一个 &lt;c3&gt;short&lt;/c3&gt; 类型的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of type &lt;c6&gt;Double&lt;/c6&gt;, for example, contains a field whose type is double, representing that value in such a way that a reference to it can be stored in a variable of reference type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T061511Z" creationid="pingfangx" creationdate="20191012T061511Z">
        <seg>例如，一个 &lt;c6&gt;Double&lt;/c6&gt; 类型的对象包含了一个类型为 double 的字段，这表示如果引用某个值，则可以将该值存储在引用类型的变量中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object reference that may be updated atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122452Z" creationid="pingfangx" creationdate="20191025T122452Z">
        <seg>可以用原子方式更新的对象引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that creates new threads on demand.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114009Z" creationid="pingfangx" creationdate="20191025T114009Z">
        <seg>根据需要创建新线程的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that executes submitted &lt;c0&gt;&lt;a1&gt;Runnable&lt;/a1&gt;&lt;/c0&gt; tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113938Z" creationid="pingfangx" creationdate="20191025T113938Z">
        <seg>执行已提交的 &lt;c0&gt;&lt;a1&gt;Runnable&lt;/a1&gt;&lt;/c0&gt; 任务的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that implements the Enumeration interface generates a series of elements, one at a time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034344Z" creationid="pingfangx" creationdate="20191012T034344Z">
        <seg>实现 Enumeration 接口的对象，它生成一系列元素，一次生成一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that is reachable via phantom references will remain so until all such references are cleared or themselves become unreachable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090537Z" creationid="pingfangx" creationdate="20191012T090537Z">
        <seg>通过虚引用可到达的对象将仍然保持原状，直到所有这类引用都被清除，或者它们都变得不可到达。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that maps keys to values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034522Z" creationid="pingfangx" creationdate="20191012T034522Z">
        <seg>将键映射到值的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object to which &lt;t0&gt;char&lt;/t0&gt; sequences and values can be appended.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065648Z" creationid="pingfangx" creationdate="20191012T065648Z">
        <seg>能够被添加 &lt;t0&gt;char&lt;/t0&gt; 序列和值的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optionally-bounded &lt;a0&gt;blocking deque&lt;/a0&gt;&lt;/a1&gt; based on linked nodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120341Z" creationid="pingfangx" creationdate="20191025T120341Z">
        <seg>一个基于已链接节点的、任选范围的&lt;a0&gt;阻塞双端队列&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optionally-bounded &lt;a0&gt;blocking queue&lt;/a0&gt;&lt;/a1&gt; based on linked nodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120350Z" creationid="pingfangx" creationdate="20191025T120350Z">
        <seg>一个基于已链接节点的、范围任意的 &lt;a0&gt;blocking queue&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An ordered collection (also known as a &lt;i0&gt;sequence&lt;/i0&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034517Z" creationid="pingfangx" creationdate="20191012T034517Z">
        <seg>有序的 collection（也称为 &lt;i0&gt;序列&lt;/i0&gt; ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unbounded &lt;a0&gt;blocking queue&lt;/a0&gt;&lt;/a1&gt; of &lt;c2&gt;Delayed&lt;/c2&gt; elements, in which an element can only be taken when its delay has expired.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114110Z" creationid="pingfangx" creationdate="20191025T114110Z">
        <seg>&lt;c2&gt;Delayed&lt;/c2&gt; 元素的一个无界&lt;a0&gt;阻塞队列&lt;/a0&gt;&lt;/a1&gt;，只有在延迟期满时才能从中提取元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unbounded &lt;a0&gt;blocking queue&lt;/a0&gt;&lt;/a1&gt; that uses the same ordering rules as class &lt;c2&gt;&lt;a3&gt;PriorityQueue&lt;/a3&gt;&lt;/c2&gt; and supplies blocking retrieval operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120449Z" creationid="pingfangx" creationdate="20191025T120449Z">
        <seg>一个无界&lt;a0&gt;阻塞队列&lt;/a0&gt;&lt;/a1&gt;，它使用与类 &lt;c2&gt;&lt;a3&gt;PriorityQueue&lt;/a3&gt;&lt;/c2&gt; 相同的顺序规则，并且提供了阻塞获取操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unbounded &lt;c0&gt;&lt;a1&gt;TransferQueue&lt;/a1&gt;&lt;/c0&gt; based on linked nodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120427Z" creationid="pingfangx" creationdate="20191025T120427Z">
        <seg>一个基于链接节点的无界 &lt;c0&gt;&lt;a1&gt;TransferQueue&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unbounded concurrent &lt;a0&gt;deque&lt;/a0&gt;&lt;/a1&gt; based on linked nodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120029Z" creationid="pingfangx" creationdate="20191025T115950Z">
        <seg>一个基于链接节点的无界并发&lt;a0&gt;deque&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unbounded priority &lt;a0&gt;queue&lt;/a0&gt;&lt;/a1&gt; based on a priority heap.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050012Z" creationid="pingfangx" creationdate="20191012T050012Z">
        <seg>一个基于优先级堆的无界优先级 &lt;a0&gt;队列&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unbounded thread-safe &lt;a0&gt;queue&lt;/a0&gt;&lt;/a1&gt; based on linked nodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120100Z" creationid="pingfangx" creationdate="20191025T120021Z">
        <seg>一个基于链接节点的无界线程安全&lt;a0&gt;queue&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unlock (&lt;c0&gt;synchronized&lt;/c0&gt; block or method exit) of a monitor &lt;i1&gt;happens-before&lt;/i1&gt; every subsequent lock (&lt;c2&gt;synchronized&lt;/c2&gt; block or method entry) of that same monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113234Z" creationid="pingfangx" creationdate="20191025T113234Z">
        <seg>一个解除锁监视器的（&lt;c0&gt;synchronized&lt;/c0&gt; 阻塞或方法退出）&lt;i1&gt;happen-before&lt;/i1&gt; 相同监视器的每个后续锁（&lt;c2&gt;synchronized&lt;/c2&gt; 阻塞或方法进入）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And because the &lt;i3&gt;happens-before&lt;/i3&gt; relation is transitive, all actions of a thread prior to unlocking &lt;i4&gt;happen-before&lt;/i4&gt; all actions subsequent to any thread locking that monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113245Z" creationid="pingfangx" creationdate="20191025T113245Z">
        <seg>并且因为 &lt;i3&gt;happen-before&lt;/i3&gt; 关系是可传递的，所以解除锁定之前的线程的所有操作 &lt;i4&gt;happen-before&lt;/i4&gt; 锁定该监视器的任何线程后续的所有操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And unsynchronized collections are preferable when either collections are unshared, or are accessible only when holding other locks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112551Z" creationid="pingfangx" creationdate="20191025T112551Z">
        <seg>当 collection 是未共享的，或者仅保持其他锁时 collection 是可访问的情况下，非同步 collection 则要更好一些。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And when they become too small (due to removal or resizing) they are converted back to plain bins.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080924Z" creationid="pingfangx" creationdate="20191026T080924Z">
        <seg>当它们变得太小时（由于移除或调整大小），它们被转换回普通 bins。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Android 6.0 r1 —</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114411Z" creationid="pingfangx" creationdate="20191011T114411Z">
        <seg>Android 6.0 r1 —</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Android-changed: Detect changes to modCount early.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095135Z" creationid="pingfangx" creationdate="20191026T095135Z">
        <seg>Android 的更改：及早检测 modcount 的更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotation retention policy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082801Z" creationid="pingfangx" creationdate="20191012T082801Z">
        <seg>注释保留策略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotation type declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152401Z" creationid="pingfangx" creationdate="20191014T152401Z">
        <seg>注释类型声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T064813Z" creationid="pingfangx" creationdate="20191012T064813Z">
        <seg>注解</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations are to be discarded by the compiler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152510Z" creationid="pingfangx" creationdate="20191014T152510Z">
        <seg>编译器要丢弃的注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations are to be recorded in the class file by the compiler and retained by the VM at run time, so they may be read reflectively.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152507Z" creationid="pingfangx" creationdate="20191014T152507Z">
        <seg>编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotations are to be recorded in the class file by the compiler but need not be retained by the VM at run time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152502Z" creationid="pingfangx" creationdate="20191014T152502Z">
        <seg>编译器将把注释记录在类文件中，但在运行时 VM 不需要保留注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another thread notifies threads waiting on this object's monitor to wake up either through a call to the &lt;c0&gt;notify&lt;/c0&gt; method or the &lt;c1&gt;notifyAll&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133503Z" creationid="pingfangx" creationdate="20191014T133503Z">
        <seg>其他线程通过调用 &lt;c0&gt;notify&lt;/c0&gt; 方法，或 &lt;c1&gt;notifyAll&lt;/c1&gt; 方法通知在此对象的监视器上等待的线程醒来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any &lt;c0&gt;&lt;a1&gt;BlockingQueue&lt;/a1&gt;&lt;/c0&gt; may be used to transfer and hold submitted tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124528Z" creationid="pingfangx" creationdate="20191025T124528Z">
        <seg>所有 &lt;c0&gt;&lt;a1&gt;BlockingQueue&lt;/a1&gt;&lt;/c0&gt; 都可用于传输和保持提交的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any char which maps to a &lt;a2&gt;surrogate code point&lt;/a2&gt; is passed through uninterpreted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070654Z" creationid="pingfangx" creationdate="20191014T070654Z">
        <seg>任何映射到 &lt;a2&gt;surrogate code point&lt;/a2&gt; 的字符都会不加解释地传递。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any class name provided as a &lt;c0&gt;&lt;a1&gt;String&lt;/a1&gt;&lt;/c0&gt; parameter to methods in &lt;t2&gt;ClassLoader&lt;/t2&gt; must be a binary name as defined by &lt;c3&gt;The Java™ Language Specification&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072539Z" creationid="pingfangx" creationdate="20191014T072539Z">
        <seg>按照 &lt;c3&gt;The Java™ Language Specification&lt;/c3&gt; 的定义，任何作为 &lt;c0&gt;&lt;a1&gt;String&lt;/a1&gt;&lt;/c0&gt; 类型参数传递给 &lt;t2&gt;ClassLoader&lt;/t2&gt; 中方法的类名称都必须是一个二进制名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any exception thrown by the &lt;c0&gt;finalize&lt;/c0&gt; method causes the finalization of this object to be halted, but is otherwise ignored.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140243Z" creationid="pingfangx" creationdate="20191014T140243Z">
        <seg>&lt;c0&gt;finalize&lt;/c0&gt; 方法抛出的任何异常都会导致此对象的终结操作停止，但可以通过其他方法忽略它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any exception thrown by this method will be ignored by the Java Virtual Machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T092654Z" creationid="pingfangx" creationdate="20191014T092654Z">
        <seg>Java 虚拟机将忽略该方法抛出的任何异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any monitors it held would have remained locked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081843Z" creationid="pingfangx" creationdate="20191014T081843Z">
        <seg>它所保持的任何监视器都会保持锁定状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any other code units, including ordinary BMP characters, unpaired surrogates, and undefined code units, are zero-extended to &lt;c2&gt;int&lt;/c2&gt; values which are then passed to the stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070934Z" creationid="pingfangx" creationdate="20191014T070853Z">
        <seg>任何其他代码单元，包括普通 BMP 字符、未配对的代理项和未定义的代码单元，都是 zero-extended &lt;c2&gt;int&lt;/c2&gt; 值，然后传递给流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any surrogate pairs encountered in the sequence are combined as if by &lt;a0&gt;Character.toCodePoint&lt;/a0&gt;&lt;/a1&gt; and the result is passed to the stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070804Z" creationid="pingfangx" creationdate="20191014T070804Z">
        <seg>序列中遇到的任何代理项对都被组合起来，就好像通过 &lt;a0&gt;Character.toCodePoint&lt;/a0&gt;&lt;/a1&gt; 一样，结果被传递给流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appendables are not necessarily safe for multithreaded access.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101409Z" creationid="pingfangx" creationdate="20191014T101409Z">
        <seg>Appendable 对于多线程访问而言没必要是安全的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends a subsequence of the specified &lt;c0&gt;CharSequence&lt;/c0&gt; to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033544Z" creationid="pingfangx" creationdate="20191014T033544Z">
        <seg>将指定 &lt;c0&gt;CharSequence&lt;/c0&gt; 的子序列追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends a subsequence of the specified character sequence to this &lt;t0&gt;Appendable&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034238Z" creationid="pingfangx" creationdate="20191014T034238Z">
        <seg>向此 &lt;t0&gt;Appendable&lt;/t0&gt; 添加指定字符序列的子序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the specified &lt;c0&gt;CharSequence&lt;/c0&gt; to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064106Z" creationid="pingfangx" creationdate="20191014T064106Z">
        <seg>将指定的 &lt;c0&gt;CharSequence&lt;/c0&gt; 追加到该序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the specified &lt;t0&gt;StringBuffer&lt;/t0&gt; to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033541Z" creationid="pingfangx" creationdate="20191014T033541Z">
        <seg>将指定的 &lt;t0&gt;StringBuffer&lt;/t0&gt; 追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the specified character sequence to this &lt;t0&gt;Appendable&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034239Z" creationid="pingfangx" creationdate="20191014T034239Z">
        <seg>向此 &lt;t0&gt;Appendable&lt;/t0&gt; 追加指定的字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the specified character to this &lt;t0&gt;Appendable&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034236Z" creationid="pingfangx" creationdate="20191014T034236Z">
        <seg>向此 &lt;t0&gt;Appendable&lt;/t0&gt; 添加指定字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115059Z" creationid="pingfangx" creationdate="20191013T115059Z">
        <seg>将指定的异常附加到为传递此异常而抑制的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the specified string to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033540Z" creationid="pingfangx" creationdate="20191014T033540Z">
        <seg>将指定的字符串追加到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of a subarray of the &lt;c0&gt;char&lt;/c0&gt; array argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033538Z" creationid="pingfangx" creationdate="20191014T033538Z">
        <seg>将数组参数 &lt;c0&gt;char&lt;/c0&gt; 子数组的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;Object&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033537Z" creationid="pingfangx" creationdate="20191014T033537Z">
        <seg>追加 &lt;c0&gt;Object&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;boolean&lt;/c0&gt; argument to the sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033533Z" creationid="pingfangx" creationdate="20191014T033533Z">
        <seg>将 &lt;c0&gt;boolean&lt;/c0&gt; 参数的字符串表示形式追加到序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;char&lt;/c0&gt; argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033536Z" creationid="pingfangx" creationdate="20191014T033536Z">
        <seg>将 &lt;c0&gt;char&lt;/c0&gt; 参数的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;char&lt;/c0&gt; array argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033539Z" creationid="pingfangx" creationdate="20191014T033539Z">
        <seg>将 &lt;c0&gt;char&lt;/c0&gt; 数组参数的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;codePoint&lt;/c0&gt; argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033546Z" creationid="pingfangx" creationdate="20191014T033546Z">
        <seg>将 &lt;c0&gt;codePoint&lt;/c0&gt; 参数的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;double&lt;/c0&gt; argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033539Z" creationid="pingfangx" creationdate="20191014T033539Z">
        <seg>将 &lt;c0&gt;double&lt;/c0&gt; 参数的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;float&lt;/c0&gt; argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033542Z" creationid="pingfangx" creationdate="20191014T033542Z">
        <seg>将 &lt;c0&gt;float&lt;/c0&gt; 参数的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;int&lt;/c0&gt; argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033543Z" creationid="pingfangx" creationdate="20191014T033543Z">
        <seg>将 &lt;c0&gt;int&lt;/c0&gt; 参数的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the string representation of the &lt;c0&gt;long&lt;/c0&gt; argument to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033535Z" creationid="pingfangx" creationdate="20191014T033535Z">
        <seg>将 &lt;c0&gt;long&lt;/c0&gt; 参数的字符串表示形式追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applications implement subclasses of &lt;t0&gt;ClassLoader&lt;/t0&gt; in order to extend the manner in which the Java virtual machine dynamically loads classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071901Z" creationid="pingfangx" creationdate="20191014T071901Z">
        <seg>应用程序需要实现 &lt;t0&gt;ClassLoader&lt;/t0&gt; 的子类，以扩展 Java 虚拟机动态加载类的方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applications should throw instances of this class to indicate other illegal uses of the &lt;c0&gt;null&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104844Z" creationid="pingfangx" creationdate="20191014T104844Z">
        <seg>应用程序应该抛出该类的实例，指示其他对 &lt;c0&gt;null&lt;/c0&gt; 对象的非法使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apps</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114426Z" creationid="pingfangx" creationdate="20191011T114426Z">
        <seg>Apps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apps &amp; Games</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114427Z" creationid="pingfangx" creationdate="20191011T114427Z">
        <seg>Apps &amp; Games</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments of primitive types are wrapped in instances of the appropriate primitive wrapper class, such as &lt;c2&gt;java.lang.Integer&lt;/c2&gt; or &lt;c3&gt;java.lang.Boolean&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121024Z" creationid="pingfangx" creationdate="20191015T121024Z">
        <seg>基本类型的参数被包装在适当基本包装器类（如 &lt;c2&gt;java.lang.Integer&lt;/c2&gt; 或 &lt;c3&gt;java.lang.Boolean&lt;/c3&gt;）的实例中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a consequence, users of type variables must not rely on the identity of instances of classes implementing this interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082030Z" creationid="pingfangx" creationdate="20191015T082030Z">
        <seg>因此，使用类型变量的用户决不能依靠实现此接口的类实例的身份。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134437Z" creationid="pingfangx" creationdate="20191025T134437Z">
        <seg>通常，默认加载因子 (.75) 在时间和空间成本上寻求一种折衷。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, the subprocess may inherit additional environment variable settings beyond those in the process builder's &lt;c0&gt;&lt;a1&gt;environment()&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080340Z" creationid="pingfangx" creationdate="20191014T080340Z">
        <seg>其结果是，子进程可以继承超出那些在进程生成器的 &lt;c0&gt;&lt;a1&gt;environment()&lt;/a1&gt;&lt;/c0&gt; 附加环境变量设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133558Z" creationid="pingfangx" creationdate="20191014T133558Z">
        <seg> 对于某一个参数的版本，实现中断和虚假唤醒是有可能的，并且此方法应始终在循环中使用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As long as the length of the character sequence contained in the string buffer does not exceed the capacity, it is not necessary to allocate a new internal buffer array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063934Z" creationid="pingfangx" creationdate="20191014T063934Z">
        <seg>只要字符串缓冲区所包含的字符序列的长度没有超出此容量，就无需分配新的内部缓冲区数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As long as the length of the character sequence contained in the string builder does not exceed the capacity, it is not necessary to allocate a new internal buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030437Z" creationid="pingfangx" creationdate="20191014T030437Z">
        <seg>只要字符串生成器所包含的字符序列的长度没有超出此容量，就无需分配新的内部缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned, URL and URLConnection rely on protocol handlers which must be present, otherwise an Exception is thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082846Z" creationid="pingfangx" creationdate="20191011T082846Z">
        <seg>如上所述，URL 和 URLConnection 都依赖于协议处理程序，所以协议处理程序必须存在；否则将抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As much as is reasonably practical, the hashCode method defined by class &lt;c0&gt;Object&lt;/c0&gt; does return distinct integers for distinct objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132537Z" creationid="pingfangx" creationdate="20191014T132537Z">
        <seg>实际上，由 &lt;c0&gt;Object&lt;/c0&gt; 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of 1.5, &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; is the preferred way to create a &lt;c2&gt;Process&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074847Z" creationid="pingfangx" creationdate="20191014T074847Z">
        <seg>作为 1.5，&lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; 是创建一个 &lt;c2&gt;Process&lt;/c2&gt; 的首选方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of JDK 1.1, the preferred way to create a stream from a string is via the &lt;c1&gt;StringReader&lt;/c1&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T052947Z" creationid="pingfangx" creationdate="20191011T052947Z">
        <seg>从 JDK 1.1 开始，从字符串创建流的首选方法是通过 &lt;c1&gt;StringReader&lt;/c1&gt; 类进行创建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of JDK 1.1, the preferred way to do this is via the &lt;c0&gt;&lt;a1&gt;getBytes()&lt;/a1&gt;&lt;/c0&gt; method, which uses the platform's default charset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024650Z" creationid="pingfangx" creationdate="20191014T024650Z">
        <seg>从 JDK 1.1 起，完成该转换的首选方法是通过 &lt;c0&gt;&lt;a1&gt;getBytes()&lt;/a1&gt;&lt;/c0&gt; 方法，该方法使用平台的默认字符集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of JDK 1.1, the preferred way to do this is via the &lt;c0&gt;String&lt;/c0&gt; constructors that take a &lt;c1&gt;&lt;a2&gt;Charset&lt;/a2&gt;&lt;/c1&gt;, charset name, or that use the platform's default charset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023715Z" creationid="pingfangx" creationdate="20191014T023715Z">
        <seg>从 JDK 1.1 开始，完成该转换的首选方法是使用带有 &lt;c0&gt;Charset&lt;/c0&gt;、字符集名称，或使用平台默认字符集的 &lt;c1&gt;&lt;a2&gt;String&lt;/a2&gt;&lt;/c1&gt; 构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of JDK 1.1, the preferred way to operate on character streams is via the new character-stream classes, which include a class for counting line numbers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T101816Z" creationid="pingfangx" creationdate="20191010T101816Z">
        <seg>从 JDK 1.1 开始，对字符流操作的首选方法是通过新字符流类（其中包括计算行号的类）进行操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110915Z" creationid="pingfangx" creationdate="20191015T110915Z">
        <seg>从版本 1.4 开始，此异常已经更新，符合常用的异常链机制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, &lt;c0&gt;&lt;a1&gt;StringBuilder&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063943Z" creationid="pingfangx" creationdate="20191014T063943Z">
        <seg>从 JDK 5 开始，为该类补充了一个单个线程使用的等价类，即 &lt;c0&gt;&lt;a1&gt;StringBuilder&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the name indicates, this is just an Identifier and doesn't provide directly the means to access the resource.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081109Z" creationid="pingfangx" creationdate="20191011T081109Z">
        <seg>顾名思义，它只是一个标识符，不直接提供访问资源的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Aside from the clearing operation reference objects are otherwise immutable, so no &lt;c4&gt;set&lt;/c4&gt; operation is provided.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085658Z" creationid="pingfangx" creationdate="20191012T085658Z">
        <seg>引用对象是不可变的，因此，除了清除操作之外，没有提供 &lt;c4&gt;set&lt;/c4&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Associates the specified value with the specified key in this map (optional operation).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140102Z" creationid="pingfangx" creationdate="20191025T140102Z">
        <seg>在此映射中关联指定值与指定键(可选操作)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Associates the specified value with the specified key in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135745Z" creationid="pingfangx" creationdate="20191025T135745Z">
        <seg>在此映射中关联指定值与指定键。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At any point in time it contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063816Z" creationid="pingfangx" creationdate="20191014T063816Z">
        <seg>虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At that time it may choose to clear atomically all soft references to that object and all soft references to any other softly-reachable objects from which that object is reachable through a chain of strong references.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155700Z" creationid="pingfangx" creationdate="20191014T155700Z">
        <seg>这时，它可以选择自动清除针对该对象的所有软引用，以及通过强引用链，从其可以到达该对象的针对任何其他软可到达对象的所有软引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At that time it will atomically clear all weak references to that object and all weak references to any other weakly-reachable objects from which that object is reachable through a chain of strong and soft references.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160126Z" creationid="pingfangx" creationdate="20191014T160126Z">
        <seg>这时，它将自动清除针对此对象的所有弱引用，以及通过强引用链和软引用，可以从其到达该对象的针对任何其他弱可到达对象的所有弱引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the same time it will declare all of the formerly weakly-reachable objects to be finalizable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160133Z" creationid="pingfangx" creationdate="20191014T160133Z">
        <seg>同时它将声明所有以前的弱可到达对象为可终结的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the same time or at some later time it will enqueue those newly-cleared soft references that are registered with reference queues.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155712Z" creationid="pingfangx" creationdate="20191014T155712Z">
        <seg>在同一时间或晚些时候，它会将那些已经向引用队列注册的新清除的软引用加入队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the same time or at some later time it will enqueue those newly-cleared weak references that are registered with reference queues.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160137Z" creationid="pingfangx" creationdate="20191014T160137Z">
        <seg>在同一时间或晚些时候，它将那些已经向引用队列注册的新清除的弱引用加入队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, the reference is considered to be &lt;e2&gt;enqueued&lt;/e2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085804Z" creationid="pingfangx" creationdate="20191012T085804Z">
        <seg>此时，该引用被认为是 &lt;e2&gt;已加入队列的&lt;/e2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Atomic classes are designed primarily as building blocks for implementing non-blocking data structures and related infrastructure classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122158Z" creationid="pingfangx" creationdate="20191025T122158Z">
        <seg>设计原子类主要用作各种构造块，用于实现非阻塞数据结构和相关的基础结构类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Atomic classes are not general purpose replacements for &lt;c0&gt;java.lang.Integer&lt;/c0&gt; and related classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122205Z" creationid="pingfangx" creationdate="20191025T122205Z">
        <seg>原子类不是 &lt;c0&gt;java.lang.Integer&lt;/c0&gt; 和相关类的通用替换方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting to insert or query the presence of a null key or value will throw a &lt;c0&gt;&lt;a1&gt;NullPointerException&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080047Z" creationid="pingfangx" creationdate="20191014T080047Z">
        <seg>试图插入空键或空值或者试图查询它们的存在，都将抛出 &lt;c0&gt;&lt;a1&gt;NullPointerException&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting to query the presence of a key or value which is not of type &lt;c2&gt;&lt;a3&gt;String&lt;/a3&gt;&lt;/c2&gt; will throw a &lt;c4&gt;&lt;a5&gt;ClassCastException&lt;/a5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080048Z" creationid="pingfangx" creationdate="20191014T080048Z">
        <seg>如果试图查询不是 &lt;c2&gt;&lt;a3&gt;String&lt;/a3&gt;&lt;/c2&gt; 类型的键或值的存在，则会抛出 &lt;c4&gt;&lt;a5&gt;ClassCastException&lt;/a5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempts to compute a mapping for the specified key and its current mapped value (or &lt;c0&gt;null&lt;/c0&gt; if there is no current mapping).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140156Z" creationid="pingfangx" creationdate="20191025T140156Z">
        <seg>尝试计算用于指定键和其当前映射值(或 &lt;c0&gt;null&lt;/c0&gt; 如果没有当前映射)的映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempts to read characters into the specified character buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103614Z" creationid="pingfangx" creationdate="20191014T103614Z">
        <seg>试图将字符读入指定的字符缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempts to reduce storage used for the character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033917Z" creationid="pingfangx" creationdate="20191014T033917Z">
        <seg>尝试减少用于字符序列的存储空间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempts to set all system properties.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154515Z" creationid="pingfangx" creationdate="20191013T154515Z">
        <seg>尝试设置所有系统属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130309Z" creationid="pingfangx" creationdate="20191025T130309Z">
        <seg>尝试停止所有的活动执行任务、暂停等待任务的处理，并返回等待执行的任务列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Automatically generated names are of the form &lt;c5&gt;"Thread-"+&lt;/c5&gt;&lt;i6&gt;n&lt;/i6&gt;, where &lt;i7&gt;n&lt;/i7&gt; is an integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T083809Z" creationid="pingfangx" creationdate="20191014T083755Z">
        <seg>自动生成的名称的形式为 &lt;c5&gt;"Thread-"+&lt;/c5&gt;&lt;i6&gt;n&lt;/i6&gt;，其中的 &lt;i7&gt;n&lt;/i7&gt; 为整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Automatically-cleared references</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090527Z" creationid="pingfangx" creationdate="20191012T090527Z">
        <seg>自动清除引用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Avoid Soft References for Caching</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155738Z" creationid="pingfangx" creationdate="20191014T155738Z">
        <seg>避免缓存软引用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bahasa Indonesia</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114415Z" creationid="pingfangx" creationdate="20191011T114415Z">
        <seg>Bahasa Indonesia</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base class for character conversion exceptions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065421Z" creationid="pingfangx" creationdate="20191011T065421Z">
        <seg>用于字符转换异常的基类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic hash bin node, used for most entries.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101537Z" creationid="pingfangx" creationdate="20191026T082606Z">
        <seg>基本的哈希 bin 节点，用于大多数 entry。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic thread blocking primitives for creating locks and other synchronization classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123036Z" creationid="pingfangx" creationdate="20191025T123036Z">
        <seg>用来创建锁和其他同步类的基本线程阻塞原语。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because String objects are immutable they can be shared.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T020938Z" creationid="pingfangx" creationdate="20191014T020938Z">
        <seg>因为 String 对象是不可变的，所以可以共享。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because TreeNodes are about twice the size of regular nodes, we use them only when bins contain enough nodes to warrant use (see TREEIFY_THRESHOLD).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080856Z" creationid="pingfangx" creationdate="20191026T080856Z">
        <seg>由于 TreeNodes 大约是常规节点大小的两倍，因此我们仅在 bins 包含足够的节点以保证使用时才使用它们（请参阅 TREEIFY_THRESHOLD ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because many common sets of hashes are already reasonably distributed (so don't benefit from spreading), and because we use trees to handle large sets of collisions in bins, we just XOR some shifted bits in the cheapest possible way to reduce systematic lossage, as well as to incorporate impact of the highest bits that would otherwise never be used in index calculations because of table bounds.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083343Z" creationid="pingfangx" creationdate="20191026T083054Z">
        <seg>因为许多常见的散列集合已经合理分布（所以不能从扩散中受益），并且因为我们使用树来处理 bins 中的大量碰撞。我们只以最便宜的方式对一些位移进行异或运算，以减少系统损失， 以及合并最高位的影响，这些最高位由于表边界而不会用于索引计算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because reference objects are implemented in close cooperation with the garbage collector, this class may not be subclassed directly.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155107Z" creationid="pingfangx" creationdate="20191014T155107Z">
        <seg>因为引用对象是通过与垃圾回收器的密切合作来实现的，所以不能直接为此类创建子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because some native platforms only provide limited buffer size for standard input and output streams, failure to promptly write the input stream or read the output stream of the subprocess may cause the subprocess to block, or even deadlock.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074805Z" creationid="pingfangx" creationdate="20191014T074805Z">
        <seg>因为有些本机平台仅针对标准输入和输出流提供有限的缓冲区大小，如果读写子进程的输出流或输入流迅速出现失败，则可能导致子进程阻塞，甚至产生死锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the &lt;c3&gt;&lt;c4&gt;&lt;a5&gt;ReferenceQueue.poll&lt;/a5&gt;&lt;/c4&gt;&lt;/c3&gt; method simply checks an internal data structure, this check will add little overhead to the hashtable access methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090457Z" creationid="pingfangx" creationdate="20191012T090457Z">
        <seg>因为 &lt;c3&gt;&lt;c4&gt;&lt;a5&gt;ReferenceQueue.poll&lt;/a5&gt;&lt;/c4&gt;&lt;/c3&gt; 方法仅仅检查内部数据结构，此检查只为哈希表访问方法增加了很小的系统开销。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the &lt;c3&gt;initCause&lt;/c3&gt; method is public, it allows a cause to be associated with any throwable, even a "legacy throwable" whose implementation predates the addition of the exception chaining mechanism to &lt;c4&gt;Throwable&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113944Z" creationid="pingfangx" creationdate="20191013T113944Z">
        <seg>&lt;c3&gt;initCause&lt;/c3&gt; 方法是公共的，它允许 cause 与任何 throwable 相关联，甚至包括“遗留 throwable”，它的实现提前将异常链机制的附件应用到 &lt;c4&gt;Throwable&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the referent of a phantom reference is always inaccessible, this method always returns &lt;c0&gt;null&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154811Z" creationid="pingfangx" creationdate="20191014T154811Z">
        <seg>因为虚引用的指示对象总是不可到达的，所以此方法总是返回 &lt;c0&gt;null&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the table uses power-of-two masking, sets of hashes that vary only in bits above the current mask will always collide.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082922Z" creationid="pingfangx" creationdate="20191026T082922Z">
        <seg>由于表使用 2 的幂级别的掩码，所以只在当前掩码之上的位上发生变化的散列总是会发生冲突。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Being active simply means that a thread has been started and has not yet been stopped.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154659Z" creationid="pingfangx" creationdate="20191013T154659Z">
        <seg>激活的意思是说某个线程已启动并且尚未停止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides Queues, this package supplies Collection implementations designed for use in multithreaded contexts: &lt;c0&gt;&lt;a1&gt;ConcurrentHashMap&lt;/a1&gt;&lt;/c0&gt;, &lt;c2&gt;&lt;a3&gt;ConcurrentSkipListMap&lt;/a3&gt;&lt;/c2&gt;, &lt;c4&gt;&lt;a5&gt;ConcurrentSkipListSet&lt;/a5&gt;&lt;/c4&gt;, &lt;c6&gt;&lt;a7&gt;CopyOnWriteArrayList&lt;/a7&gt;&lt;/c6&gt;, and &lt;c8&gt;&lt;a9&gt;CopyOnWriteArraySet&lt;/a9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111941Z" creationid="pingfangx" creationdate="20191025T111941Z">
        <seg>除队列外，此包还提供了设计用于多线程上下文中的 Collection 实现：&lt;c0&gt;&lt;a1&gt;ConcurrentHashMap&lt;/a1&gt;&lt;/c0&gt;、&lt;c2&gt;&lt;a3&gt;ConcurrentSkipListMap&lt;/a3&gt;&lt;/c2&gt;、&lt;c4&gt;&lt;a5&gt;ConcurrentSkipListSet&lt;/a5&gt;&lt;/c4&gt;、&lt;c6&gt;&lt;a7&gt;CopyOnWriteArrayList&lt;/a7&gt;&lt;/c6&gt; 和 &lt;c8&gt;&lt;a9&gt;CopyOnWriteArraySet&lt;/a9&gt;&lt;/c8&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides accuracy at individual arguments, maintaining proper relations between the method at different arguments is also important.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151326Z" creationid="pingfangx" creationdate="20191013T151326Z">
        <seg>除了个别参数的准确性之外，维护不同参数的方法之间的正确关系也很重要。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bins are converted to trees when adding an element to a bin with at least this many nodes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082430Z" creationid="pingfangx" creationdate="20191026T082430Z">
        <seg>将元素添加到 bin 中时，如果 bin 至少包含该数量的结点时，该 bin 将转换为树。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bins of TreeNodes may be traversed and used like any others, but additionally support faster lookup when overpopulated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080018Z" creationid="pingfangx" creationdate="20191026T080018Z">
        <seg>TreeNodes 的 bin 可以像任何其他的一样被遍历和使用，但是数量过多时还支持更快的查找。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bits encoding access (e.g.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104111Z" creationid="pingfangx" creationdate="20191015T104111Z">
        <seg>比特编码的访问(例如。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bits encoding access (e.g. public, private) as well as other runtime specific flags</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104340Z" creationid="pingfangx" creationdate="20191015T104340Z">
        <seg>比特编码的访问(例如 public、private)以及其他运行时特定的标志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130658Z" creationid="pingfangx" creationdate="20191025T130658Z">
        <seg>请求关闭、发生超时或者当前线程中断，无论哪一个首先发生之后，都将导致阻塞，直到所有任务完成执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both extend class &lt;c4&gt;&lt;a5&gt;AbstractOwnableSynchronizer&lt;/a5&gt;&lt;/c4&gt;, a simple class that helps record the thread currently holding exclusive synchronization.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122901Z" creationid="pingfangx" creationdate="20191025T122901Z">
        <seg>两者都扩展了类 &lt;c4&gt;&lt;a5&gt;AbstractOwnableSynchronizer&lt;/a5&gt;&lt;/c4&gt;（一个帮助记录当前保持独占同步的线程的简单类）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Buffers</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102719Z" creationid="pingfangx" creationdate="20191011T102719Z">
        <seg>缓冲区</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But &lt;c2&gt;&lt;a3&gt;ConcurrentHashMap&lt;/a3&gt;&lt;/c2&gt; is "concurrent".</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112533Z" creationid="pingfangx" creationdate="20191025T112149Z">
        <seg>但 &lt;c2&gt;&lt;a3&gt;ConcurrentHashMap&lt;/a3&gt;&lt;/c2&gt; 则是“并发的”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But programmers may create their own implementations to cover nonstandard requirements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122827Z" creationid="pingfangx" creationdate="20191025T122827Z">
        <seg>但程序员可以创建自己的、适用于非标准要求的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But the only known cases stem from poor user programming practices that are already so slow that this makes little difference.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080811Z" creationid="pingfangx" creationdate="20191026T080811Z">
        <seg>但是，唯一已知的情况源于糟糕的用户编程实践，这些实践已经非常缓慢，使得几乎没有区别）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, in most cases, there is no need to deal directly with the subclasses, as the InetAddress abstraction should cover most of the needed functionality.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080421Z" creationid="pingfangx" creationdate="20191011T080421Z">
        <seg>但是，在大多数情况下，不必直接处理子类，因为 InetAddress 抽象应该覆盖大多数必需的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By convention, class &lt;c0&gt;Throwable&lt;/c0&gt; and its subclasses have two constructors, one that takes no arguments and one that takes a &lt;c1&gt;String&lt;/c1&gt; argument that can be used to produce a detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113954Z" creationid="pingfangx" creationdate="20191013T113954Z">
        <seg>根据惯例，&lt;c0&gt;Throwable&lt;/c0&gt; 类及其子类有两个构造方法，一个不带参数，另一个带有 &lt;c1&gt;String&lt;/c1&gt; 参数，此参数可用于生成详细消息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By convention, classes that implement this interface should override &lt;t0&gt;Object.clone&lt;/t0&gt; (which is protected) with a public method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101455Z" creationid="pingfangx" creationdate="20191014T101455Z">
        <seg>按照惯例，实现此接口的类应该使用公共方法重写 &lt;t0&gt;Object.clone&lt;/t0&gt;（它是受保护的）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By convention, the object returned by this method should be independent of this object (which is being cloned).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135435Z" creationid="pingfangx" creationdate="20191014T135435Z">
        <seg>按照惯例，此方法返回的对象应该独立于该对象（正被复制的对象）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By convention, the returned object should be obtained by calling &lt;c0&gt;super.clone&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135408Z" creationid="pingfangx" creationdate="20191014T135408Z">
        <seg>按照惯例，返回的对象应该通过调用 &lt;c0&gt;super.clone&lt;/c0&gt; 获得。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default many of the &lt;c0&gt;Math&lt;/c0&gt; methods simply call the equivalent method in &lt;c1&gt;StrictMath&lt;/c1&gt; for their implementation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151158Z" creationid="pingfangx" creationdate="20191013T151158Z">
        <seg>默认情况下，很多 &lt;c0&gt;Math&lt;/c0&gt; 方法仅调用 &lt;c1&gt;StrictMath&lt;/c1&gt; 中的等价方法来完成它们的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default the protocol handlers are loaded dynamically from the default location.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082902Z" creationid="pingfangx" creationdate="20191011T082902Z">
        <seg>默认情况下，协议处理程序从默认位置动态加载。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, a reflected object is &lt;e0&gt;not&lt;/e0&gt; accessible.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090600Z" creationid="pingfangx" creationdate="20191015T090600Z">
        <seg>默认情况下，反射对象 &lt;e0&gt;不可&lt;/e0&gt; 访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, even core threads are initially created and started only when new tasks arrive, but this can be overridden dynamically using method &lt;c0&gt;&lt;a1&gt;prestartCoreThread()&lt;/a1&gt;&lt;/c0&gt; or &lt;c2&gt;&lt;a3&gt;prestartAllCoreThreads()&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124111Z" creationid="pingfangx" creationdate="20191025T124111Z">
        <seg>默认情况下，即使核心线程最初只是在新任务到达时才创建和启动的，也可以使用方法 &lt;c0&gt;&lt;a1&gt;prestartCoreThread()&lt;/a1&gt;&lt;/c0&gt; 或 &lt;c2&gt;&lt;a3&gt;prestartAllCoreThreads()&lt;/a3&gt;&lt;/c2&gt; 对其进行动态重写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the created subprocess does not have its own terminal or console.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074650Z" creationid="pingfangx" creationdate="20191014T074650Z">
        <seg>默认情况下，创建的子进程没有自己的终端或控制台。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the keep-alive policy applies only when there are more than corePoolSize threads, but method &lt;c7&gt;&lt;a8&gt;allowCoreThreadTimeOut(boolean)&lt;/a8&gt;&lt;/c7&gt; can be used to apply this time-out policy to core threads as well, so long as the keepAliveTime value is non-zero.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124521Z" creationid="pingfangx" creationdate="20191025T124521Z">
        <seg>默认情况下，保持活动策略只在有多于 corePoolSizeThreads 的线程时应用。但是只要 keepAliveTime 值非 0，&lt;c7&gt;&lt;a8&gt;allowCoreThreadTimeOut(boolean)&lt;/a8&gt;&lt;/c7&gt; 方法也可将此超时策略应用于核心线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By executing a synchronized instance method of that object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132859Z" creationid="pingfangx" creationdate="20191014T132859Z">
        <seg>通过执行此对象的同步实例方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By executing the body of a &lt;c0&gt;synchronized&lt;/c0&gt; statement that synchronizes on the object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132910Z" creationid="pingfangx" creationdate="20191014T132910Z">
        <seg>通过执行在此对象上进行同步的 &lt;c0&gt;synchronized&lt;/c0&gt; 语句的正文。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123956Z" creationid="pingfangx" creationdate="20191025T123956Z">
        <seg>如果设置的 corePoolSize 和 maximumPoolSize 相同，则创建了固定大小的线程池。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By setting maximumPoolSize to an essentially unbounded value such as &lt;c9&gt;Integer.MAX_VALUE&lt;/c9&gt;, you allow the pool to accommodate an arbitrary number of concurrent tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124029Z" creationid="pingfangx" creationdate="20191025T124007Z">
        <seg>如果将 maximumPoolSize 设置为基本的无界值（如 &lt;c9&gt;Integer.MAX_VALUE&lt;/c9&gt;），则允许池适应任意数量的并发任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By supplying a different ThreadFactory, you can alter the thread's name, thread group, priority, daemon status, etc.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124243Z" creationid="pingfangx" creationdate="20191025T124243Z">
        <seg>通过提供不同的 ThreadFactory，可以改变线程的名称、线程组、优先级、守护进程状态，等等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Byte buffers are distinguished in that they can be used as the sources and targets of I/O operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T111732Z" creationid="pingfangx" creationdate="20191011T111732Z">
        <seg>因为字节缓冲区可以用作 I/O 操作的源缓冲区和目标缓冲区，所以可以对它们加以区分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callback interface to allow validation of objects within a graph.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094548Z" creationid="pingfangx" creationdate="20191010T094548Z">
        <seg>允许验证图形中对象的回调接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callbacks to allow LinkedHashMap post-actions</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100229Z" creationid="pingfangx" creationdate="20191026T100229Z">
        <seg>回调允许的 LinkedHashMap 后操作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called by clone and readObject.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100201Z" creationid="pingfangx" creationdate="20191026T100201Z">
        <seg>由 clone 和 readObject 调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific &lt;c0&gt;&lt;a1&gt;Thread.UncaughtExceptionHandler&lt;/a1&gt;&lt;/c0&gt; installed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093334Z" creationid="pingfangx" creationdate="20191014T093334Z">
        <seg>当此线程组中的线程因为一个未捕获的异常而停止，并且线程没有安装特定 &lt;c0&gt;&lt;a1&gt;Thread.UncaughtExceptionHandler&lt;/a1&gt;&lt;/c0&gt; 时，由 Java Virtual Machine 调用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T095139Z" creationid="pingfangx" creationdate="20191012T095139Z">
        <seg>当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called only from resize; see above discussion about split bits and indices.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100950Z" creationid="pingfangx" creationdate="20191026T100950Z">
        <seg>只能从 resize 调用; 请参阅上面关于分割位和索引的讨论。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called only from writeObject, to ensure compatible ordering.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100238Z" creationid="pingfangx" creationdate="20191026T100238Z">
        <seg>仅从 writeObject 调用，以确保排序兼容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the instance method of a &lt;c0&gt;null&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104823Z" creationid="pingfangx" creationdate="20191014T104823Z">
        <seg> 调用 &lt;c0&gt;null&lt;/c0&gt; 对象的实例方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method may, but is not required to, affect the value returned by a subsequent call to the &lt;c0&gt;&lt;a1&gt;capacity()&lt;/a1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041734Z" creationid="pingfangx" creationdate="20191014T041734Z">
        <seg>调用此方法可能影响后续调用 &lt;c0&gt;&lt;a1&gt;capacity()&lt;/a1&gt;&lt;/c0&gt; 方法时返回的值（但不要求如此）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method may, but is not required to, affect the value returned by a subsequent call to the capacity() method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T065326Z" creationid="pingfangx" creationdate="20191014T065326Z">
        <seg>调用此方法可能影响后续调用 capacity() 方法时返回的值（但不要求如此）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls find for root node.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100540Z" creationid="pingfangx" creationdate="20191026T100540Z">
        <seg>对根节点调用 find 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Case mapping is based on the Unicode Standard version specified by the &lt;c1&gt;&lt;a2&gt;Character&lt;/a2&gt;&lt;/c1&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T021033Z" creationid="pingfangx" creationdate="20191014T021033Z">
        <seg>大小写映射基于 &lt;c1&gt;&lt;a2&gt;Character&lt;/a2&gt;&lt;/c1&gt; 类指定的 Unicode 标准版。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Casts an object to the class or interface represented by this &lt;c0&gt;Class&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T095822Z" creationid="pingfangx" creationdate="20191013T095822Z">
        <seg>将一个对象强制转换成此 &lt;c0&gt;Class&lt;/c0&gt; 对象所表示的类或接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Casts this &lt;c0&gt;Class&lt;/c0&gt; object to represent a subclass of the class represented by the specified class object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T035915Z" creationid="pingfangx" creationdate="20191013T035915Z">
        <seg>强制转换该 &lt;c0&gt;Class&lt;/c0&gt; 对象，以表示指定的 class 对象所表示的类的一个子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes the current thread to wait until another thread invokes the &lt;c0&gt;&lt;a1&gt;notify()&lt;/a1&gt;&lt;/c0&gt; method or the &lt;c2&gt;&lt;a3&gt;notifyAll()&lt;/a3&gt;&lt;/c2&gt; method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T095037Z" creationid="pingfangx" creationdate="20191012T095037Z">
        <seg>在其他线程调用此对象的 &lt;c0&gt;&lt;a1&gt;notify()&lt;/a1&gt;&lt;/c0&gt; 方法或 &lt;c2&gt;&lt;a3&gt;notifyAll()&lt;/a3&gt;&lt;/c2&gt; 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量前，导致当前线程等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes the current thread to wait until another thread invokes the &lt;c0&gt;&lt;a1&gt;notify()&lt;/a1&gt;&lt;/c0&gt; method or the &lt;c2&gt;&lt;a3&gt;notifyAll()&lt;/a3&gt;&lt;/c2&gt; method for this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T095128Z" creationid="pingfangx" creationdate="20191012T095128Z">
        <seg>在其他线程调用此对象的 &lt;c0&gt;&lt;a1&gt;notify()&lt;/a1&gt;&lt;/c0&gt; 方法或 &lt;c2&gt;&lt;a3&gt;notifyAll()&lt;/a3&gt;&lt;/c2&gt; 方法前，导致当前线程等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes the current thread to wait until either another thread invokes the &lt;c0&gt;&lt;a1&gt;notify()&lt;/a1&gt;&lt;/c0&gt; method or the &lt;c2&gt;&lt;a3&gt;notifyAll()&lt;/a3&gt;&lt;/c2&gt; method for this object, or a specified amount of time has elapsed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T095059Z" creationid="pingfangx" creationdate="20191012T095059Z">
        <seg>在其他线程调用此对象的 &lt;c0&gt;&lt;a1&gt;notify()&lt;/a1&gt;&lt;/c0&gt; 方法或 &lt;c2&gt;&lt;a3&gt;notifyAll()&lt;/a3&gt;&lt;/c2&gt; 方法，或者超过指定的时间量前，导致当前线程等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes the current thread to wait, if necessary, until the process represented by this &lt;c0&gt;Process&lt;/c0&gt; object has terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075310Z" creationid="pingfangx" creationdate="20191014T075310Z">
        <seg>导致当前线程等待，如有必要，一直要等到由该 &lt;c0&gt;Process&lt;/c0&gt; 对象表示的进程已经终止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082226Z" creationid="pingfangx" creationdate="20191014T082226Z">
        <seg>在指定的毫秒数加指定的纳秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082228Z" creationid="pingfangx" creationdate="20191014T082228Z">
        <seg>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes this character sequence to be replaced by the reverse of the sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033906Z" creationid="pingfangx" creationdate="20191014T033906Z">
        <seg>将此字符序列用其反转形式取代。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Causes this thread to begin execution; the Java Virtual Machine calls the &lt;c0&gt;run&lt;/c0&gt; method of this thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082232Z" creationid="pingfangx" creationdate="20191014T082232Z">
        <seg>使该线程开始执行；Java 虚拟机调用该线程的 &lt;c0&gt;run&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Changes the daemon status of this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093318Z" creationid="pingfangx" creationdate="20191014T093318Z">
        <seg>更改此线程组的后台程序状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Changes the name of this thread to be equal to the argument &lt;c0&gt;name&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082156Z" creationid="pingfangx" creationdate="20191014T082156Z">
        <seg>改变线程名称，使之与参数 &lt;c0&gt;name&lt;/c0&gt; 相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Changes the priority of this thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082157Z" creationid="pingfangx" creationdate="20191014T082157Z">
        <seg>更改线程的优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Character Encodings</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T063059Z" creationid="pingfangx" creationdate="20191012T063059Z">
        <seg>字符编码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Character blocks generally define characters used for a specific script or purpose.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093629Z" creationid="pingfangx" creationdate="20191014T093629Z">
        <seg>字符块通常定义用于特定脚本或目的的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Character information is based on the Unicode Standard, version 6.0.0.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T135113Z" creationid="pingfangx" creationdate="20191013T135113Z">
        <seg>字符信息基于 Unicode 标准，版本 6.0.0。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Characters are copied from this sequence into the destination character array &lt;c0&gt;dst&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033603Z" creationid="pingfangx" creationdate="20191014T033603Z">
        <seg>将字符从此序列复制到目标字符数组 &lt;c0&gt;dst&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Characters from a &lt;t1&gt;Readable&lt;/t1&gt; are made available to callers of the read method via a &lt;c2&gt;&lt;a3&gt;CharBuffer&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103600Z" creationid="pingfangx" creationdate="20191014T103600Z">
        <seg>阅读方法的调用方能够通过 &lt;c2&gt;&lt;a3&gt;CharBuffer&lt;/a3&gt;&lt;/c2&gt; 使用 &lt;t1&gt;Readable&lt;/t1&gt; 中的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Characters of the &lt;c0&gt;char&lt;/c0&gt; array &lt;c1&gt;str&lt;/c1&gt;, starting at index &lt;c2&gt;offset&lt;/c2&gt;, are appended, in order, to the contents of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034732Z" creationid="pingfangx" creationdate="20191014T034732Z">
        <seg>将 &lt;c0&gt;char&lt;/c0&gt; 数组 &lt;c1&gt;str&lt;/c1&gt; 中从索引 &lt;c2&gt;offset&lt;/c2&gt; 开始的字符按顺序追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Characters of the argument &lt;c0&gt;s&lt;/c0&gt;, starting at index &lt;c1&gt;start&lt;/c1&gt;, are appended, in order, to the contents of this sequence up to the (exclusive) index &lt;c2&gt;end&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035202Z" creationid="pingfangx" creationdate="20191014T035202Z">
        <seg>将参数 &lt;c0&gt;s&lt;/c0&gt; 中从索引 &lt;c1&gt;start&lt;/c1&gt; 到索引 &lt;c2&gt;end&lt;/c2&gt; 的字符按顺序追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checked exception thrown to indicate that a string could not be parsed as a URI reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083542Z" creationid="pingfangx" creationdate="20191011T083542Z">
        <seg>抛出经过检查的指示字符串不能解析为 URI 引用的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checked exceptions need to be declared in a method or constructor's &lt;c4&gt;throws&lt;/c4&gt; clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120504Z" creationid="pingfangx" creationdate="20191013T120504Z">
        <seg>检查型异常需要在方法或构造函数声明 &lt;c4&gt;throws&lt;/c4&gt; 子句，如果他们可以通过该方法或构造函数的执行被抛出并且在所述方法或构造边界外传播。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt; provides an Executor primarily designed for processing instances of &lt;c2&gt;&lt;a3&gt;ForkJoinTask&lt;/a3&gt;&lt;/c2&gt; and its subclasses.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110857Z" creationid="pingfangx" creationdate="20191025T110857Z">
        <seg>类 &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt; 提供主要设计用于的 &lt;c2&gt;&lt;a3&gt;ForkJoinTask&lt;/a3&gt;&lt;/c2&gt; 和它的子类处理实例的执行器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class &lt;c0&gt;Object&lt;/c0&gt; is the root of the class hierarchy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071455Z" creationid="pingfangx" creationdate="20191012T071455Z">
        <seg>类 &lt;c0&gt;Object&lt;/c0&gt; 是类层次结构的根类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class &lt;c0&gt;Throwable&lt;/c0&gt; encompasses objects that may be thrown by the &lt;c1&gt;throw&lt;/c1&gt; statement.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T063114Z" creationid="pingfangx" creationdate="20191012T062954Z">
        <seg>类 &lt;c0&gt;Throwable&lt;/c0&gt; 包含了可能由 &lt;c1&gt;throw&lt;/c1&gt; 语句抛出的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class &lt;c0&gt;URL&lt;/c0&gt; represents a Uniform Resource Locator, a pointer to a "resource" on the World Wide Web.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083405Z" creationid="pingfangx" creationdate="20191011T083405Z">
        <seg>类 &lt;c0&gt;URL&lt;/c0&gt; 代表一个统一资源定位符，它是指向互联网“资源”的指针。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class &lt;c3&gt;&lt;a4&gt;LinkedBlockingDeque&lt;/a4&gt;&lt;/c3&gt; provides an implementation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111321Z" creationid="pingfangx" creationdate="20191025T111321Z">
        <seg>&lt;c3&gt;&lt;a4&gt;LinkedBlockingDeque&lt;/a4&gt;&lt;/c3&gt; 类提供一个实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class loaders may typically be used by security managers to indicate security domains.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071906Z" creationid="pingfangx" creationdate="20191014T071906Z">
        <seg>类加载器通常由安全管理器使用，用于指示安全域。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class loaders that support concurrent loading of classes are known as &lt;e0&gt;parallel capable&lt;/e0&gt; class loaders and are required to register themselves at their class initialization time by invoking the &lt;c1&gt;&lt;a2&gt;&lt;t3&gt;ClassLoader.registerAsParallelCapable&lt;/t3&gt;&lt;/a2&gt;&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072831Z" creationid="pingfangx" creationdate="20191014T072831Z">
        <seg>支持并发加载类的类加载器称为 &lt;e0&gt;parallel capable&lt;/e0&gt; 类加载器，需要在类初始化时通过调用 &lt;c1&gt;&lt;a2&gt;&lt;t3&gt;ClassLoader.registerAsParallelCapable&lt;/t3&gt;&lt;/a2&gt;&lt;/c1&gt; 方法来注册它们自己。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class, interface (including annotation type), or enum declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152425Z" creationid="pingfangx" creationdate="20191014T152425Z">
        <seg>类、接口（包括注释类型）或枚举声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094558Z" creationid="pingfangx" creationdate="20191010T094558Z">
        <seg>类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes &lt;c0&gt;ClassLoader&lt;/c0&gt;, &lt;c1&gt;Process&lt;/c1&gt;, &lt;c2&gt;ProcessBuilder&lt;/c2&gt;, &lt;c3&gt;Runtime&lt;/c3&gt;, &lt;c4&gt;SecurityManager&lt;/c4&gt;, and &lt;c5&gt;System&lt;/c5&gt; provide "system operations" that manage the dynamic loading of classes, creation of external processes, host environment inquiries such as the time of day, and enforcement of security policies.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T062936Z" creationid="pingfangx" creationdate="20191012T062841Z">
        <seg>类 &lt;c0&gt;ClassLoader&lt;/c0&gt;、&lt;c1&gt;Process&lt;/c1&gt;、 &lt;c2&gt;ProcessBuilder&lt;/c2&gt;、&lt;c3&gt;Runtime&lt;/c3&gt;、&lt;c4&gt;SecurityManager&lt;/c4&gt; 和 &lt;c5&gt;System&lt;/c5&gt; 提供了管理类的动态加载、外部进程创建、主机环境查询（比如时间）和安全策略实施等“系统操作”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes for formatting and parsing</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033114Z" creationid="pingfangx" creationdate="20191012T033114Z">
        <seg>用于格式化和分析的类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes for iteration over text</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033113Z" creationid="pingfangx" creationdate="20191012T033113Z">
        <seg>用于迭代文本的类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes for string collation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033118Z" creationid="pingfangx" creationdate="20191012T033118Z">
        <seg>用于整理字符串的类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes in this package, along with &lt;c0&gt;java.lang.Class&lt;/c0&gt; accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as Object Serialization and JavaBeans that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091039Z" creationid="pingfangx" creationdate="20191012T091039Z">
        <seg>此包中的类以及 &lt;c0&gt;java.lang.Class&lt;/c0&gt; 可以适应以下应用程序的需要：调试程序、解释程序、对象检查程序、类浏览程序，以及服务（比如，Object Serialization 和 JavaBean，它们需要访问目标对象（基于其运行时类）的公共成员或给定类声明的成员）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clears this reference object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154720Z" creationid="pingfangx" creationdate="20191014T154720Z">
        <seg>清除此引用对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cloning and serialization</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095313Z" creationid="pingfangx" creationdate="20191026T095313Z">
        <seg>克隆和序列化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code generators are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of &lt;c2&gt;Math&lt;/c2&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151209Z" creationid="pingfangx" creationdate="20191013T151209Z">
        <seg>建议代码生成器使用特定于平台的本机库或者微处理器指令（可用时）来提供 &lt;c2&gt;Math&lt;/c2&gt; 方法更高性能的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common superclass of exceptions thrown by reflective operations in core reflection.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073121Z" creationid="pingfangx" creationdate="20191012T073121Z">
        <seg>通过反射操作核心反射抛出的异常的通用超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Company / developer name</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114424Z" creationid="pingfangx" creationdate="20191011T114424Z">
        <seg>Company / developer name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares the specified object with this map for equality.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140032Z" creationid="pingfangx" creationdate="20191025T140032Z">
        <seg>比较指定对象与此映射的相等性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares the two specified &lt;c0&gt;double&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132622Z" creationid="pingfangx" creationdate="20191013T132622Z">
        <seg>比较两个指定的 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares the two specified &lt;c0&gt;float&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132052Z" creationid="pingfangx" creationdate="20191013T132052Z">
        <seg>比较两个指定的 &lt;c0&gt;float&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this &lt;c0&gt;Boolean&lt;/c0&gt; instance with another.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133352Z" creationid="pingfangx" creationdate="20191013T133352Z">
        <seg>将此 &lt;c0&gt;Boolean&lt;/c0&gt; 实例与其他实例进行比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this &lt;c0&gt;Constructor&lt;/c0&gt; against the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104138Z" creationid="pingfangx" creationdate="20191015T104138Z">
        <seg>将此 &lt;c0&gt;Constructor&lt;/c0&gt; 对象与指定的对象进行比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this &lt;c0&gt;Field&lt;/c0&gt; against the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104506Z" creationid="pingfangx" creationdate="20191015T104506Z">
        <seg>将此 &lt;c0&gt;Field&lt;/c0&gt; 与指定对象比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this &lt;c0&gt;String&lt;/c0&gt; to another &lt;c1&gt;String&lt;/c1&gt;, ignoring case considerations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024425Z" creationid="pingfangx" creationdate="20191014T024425Z">
        <seg>将此 &lt;c0&gt;String&lt;/c0&gt; 与另一个 &lt;c1&gt;String&lt;/c1&gt; 比较，不考虑大小写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this enum with the specified object for order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094034Z" creationid="pingfangx" creationdate="20191014T094034Z">
        <seg>比较此枚举与指定对象的顺序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this object against the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132058Z" creationid="pingfangx" creationdate="20191013T132058Z">
        <seg>将此对象与指定对象进行比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this object to the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121429Z" creationid="pingfangx" creationdate="20191013T121429Z">
        <seg>将此对象与指定对象比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this object with the specified object for order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121614Z" creationid="pingfangx" creationdate="20191013T121614Z">
        <seg>比较此对象与指定对象的顺序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this string to the specified &lt;c0&gt;CharSequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024412Z" creationid="pingfangx" creationdate="20191014T024412Z">
        <seg>将此字符串与指定的 &lt;c0&gt;CharSequence&lt;/c0&gt; 比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this string to the specified &lt;c0&gt;StringBuffer&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024409Z" creationid="pingfangx" creationdate="20191014T024409Z">
        <seg>将此字符串与指定的 &lt;c0&gt;StringBuffer&lt;/c0&gt; 比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares this string to the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024421Z" creationid="pingfangx" creationdate="20191014T024421Z">
        <seg>将此字符串与指定的对象比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Byte&lt;/c0&gt; objects numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121423Z" creationid="pingfangx" creationdate="20191013T121423Z">
        <seg>在数字上比较两个 &lt;c0&gt;Byte&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Character&lt;/c0&gt; objects numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145017Z" creationid="pingfangx" creationdate="20191013T145017Z">
        <seg>根据数字比较两个 &lt;c0&gt;Character&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Double&lt;/c0&gt; objects numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132623Z" creationid="pingfangx" creationdate="20191013T132623Z">
        <seg>对两个 &lt;c0&gt;Double&lt;/c0&gt; 对象所表示的数值进行比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Float&lt;/c0&gt; objects numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132054Z" creationid="pingfangx" creationdate="20191013T132054Z">
        <seg>比较两个 &lt;c0&gt;Float&lt;/c0&gt; 对象所表示的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Integer&lt;/c0&gt; objects numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123319Z" creationid="pingfangx" creationdate="20191013T123319Z">
        <seg>在数字上比较两个 &lt;c0&gt;Integer&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Long&lt;/c0&gt; objects numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124945Z" creationid="pingfangx" creationdate="20191013T124945Z">
        <seg>在数字上比较两个 &lt;c0&gt;Long&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Short&lt;/c0&gt; objects numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122039Z" creationid="pingfangx" creationdate="20191013T122039Z">
        <seg>比较两个 &lt;c0&gt;Short&lt;/c0&gt; 对象所表示的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;Subset&lt;/c0&gt; objects for equality.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093500Z" creationid="pingfangx" creationdate="20191014T093500Z">
        <seg>比较两个 &lt;c0&gt;Subset&lt;/c0&gt; 对象的相等性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;boolean&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133346Z" creationid="pingfangx" creationdate="20191013T133346Z">
        <seg>比较两个 &lt;c0&gt;boolean&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;byte&lt;/c0&gt; values numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121420Z" creationid="pingfangx" creationdate="20191013T121420Z">
        <seg>在数字上比较两个 &lt;c0&gt;byte&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;char&lt;/c0&gt; values numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145016Z" creationid="pingfangx" creationdate="20191013T145016Z">
        <seg>在数字上比较两个 &lt;c0&gt;char&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;int&lt;/c0&gt; values numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123317Z" creationid="pingfangx" creationdate="20191013T123317Z">
        <seg>在数字上比较两个 &lt;c0&gt;int&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;long&lt;/c0&gt; values numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124944Z" creationid="pingfangx" creationdate="20191013T124944Z">
        <seg>在数字上比较两个 &lt;c0&gt;long&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two &lt;c0&gt;short&lt;/c0&gt; values numerically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122036Z" creationid="pingfangx" creationdate="20191013T122036Z">
        <seg>在数字上比较两个 &lt;c0&gt;short&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two strings lexicographically, ignoring case differences.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024357Z" creationid="pingfangx" creationdate="20191014T024357Z">
        <seg>按字典顺序比较两个字符串，不考虑大小写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compares two strings lexicographically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024354Z" creationid="pingfangx" creationdate="20191014T024354Z">
        <seg>按字典顺序比较两个字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compilers warn when a deprecated program element is used or overridden in non-deprecated code.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101115Z" creationid="pingfangx" creationdate="20191014T101115Z">
        <seg>在使用不被赞成的程序元素或在不被赞成的代码中执行重写时，编译器会发出警告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Computes key.hashCode() and spreads (XORs) higher bits of hash to lower.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082833Z" creationid="pingfangx" creationdate="20191026T082833Z">
        <seg>计算 key.hashCode() 并将高位散列扩散（XORs）到低位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094734Z" creationid="pingfangx" creationdate="20191014T094734Z">
        <seg>在创建子线程时，计算这个可继承线程局部变量的子线程的初始值，将该值作为父线程值的一个函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151407Z" creationid="pingfangx" creationdate="20191013T151407Z">
        <seg>按照 IEEE 754 标准的规定，对两个参数进行余数运算。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concatenates the specified string to the end of this string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024359Z" creationid="pingfangx" creationdate="20191014T024359Z">
        <seg>将指定字符串连接到此字符串的结尾。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concurrent Collections</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111902Z" creationid="pingfangx" creationdate="20191025T111902Z">
        <seg>并发集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Condition implementation for a &lt;c0&gt;&lt;a1&gt;AbstractQueuedLongSynchronizer&lt;/a1&gt;&lt;/c0&gt; serving as the basis of a &lt;c2&gt;&lt;a3&gt;Lock&lt;/a3&gt;&lt;/c2&gt; implementation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123008Z" creationid="pingfangx" creationdate="20191025T123008Z">
        <seg>条件执行用于 &lt;c0&gt;&lt;a1&gt;AbstractQueuedLongSynchronizer&lt;/a1&gt;&lt;/c0&gt; 作为 &lt;c2&gt;&lt;a3&gt;Lock&lt;/a3&gt;&lt;/c2&gt; 实现的基础。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Condition implementation for a &lt;c0&gt;&lt;a1&gt;AbstractQueuedSynchronizer&lt;/a1&gt;&lt;/c0&gt; serving as the basis of a &lt;c2&gt;&lt;a3&gt;Lock&lt;/a3&gt;&lt;/c2&gt; implementation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123035Z" creationid="pingfangx" creationdate="20191025T123035Z">
        <seg>条件执行用于 &lt;c0&gt;&lt;a1&gt;AbstractQueuedSynchronizer&lt;/a1&gt;&lt;/c0&gt; 作为 &lt;c2&gt;&lt;a3&gt;Lock&lt;/a3&gt;&lt;/c2&gt; 实现的基础。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constants written into the Object Serialization Stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094553Z" creationid="pingfangx" creationdate="20191010T094553Z">
        <seg>写入 Object Serialization Stream 的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructor declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152402Z" creationid="pingfangx" creationdate="20191014T152402Z">
        <seg>构造方法声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructor: only used by the Java Virtual Machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090609Z" creationid="pingfangx" creationdate="20191015T090609Z">
        <seg>构造方法：仅供 Java 虚拟机使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a &lt;c0&gt;NullPointerException&lt;/c0&gt; with no detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104938Z" creationid="pingfangx" creationdate="20191014T104938Z">
        <seg>构造不带详细消息的 &lt;c0&gt;NullPointerException&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a &lt;c0&gt;NullPointerException&lt;/c0&gt; with the specified detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104939Z" creationid="pingfangx" creationdate="20191014T104939Z">
        <seg>构造带指定详细消息的 &lt;c0&gt;NullPointerException&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a InvocationTargetException with a target exception and a detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110926Z" creationid="pingfangx" creationdate="20191015T110926Z">
        <seg>构造带目标异常和详细消息的 InvocationTargetException。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a InvocationTargetException with a target exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110924Z" creationid="pingfangx" creationdate="20191015T110924Z">
        <seg>构造带目标异常的 InvocationTargetException。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;c0&gt;Proxy&lt;/c0&gt; instance from a subclass (typically, a dynamic proxy class) with the specified value for its invocation handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113301Z" creationid="pingfangx" creationdate="20191015T113301Z">
        <seg>使用其调用处理程序的指定值从子类（通常为动态代理类）构建新的 &lt;c0&gt;Proxy&lt;/c0&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;c0&gt;String&lt;/c0&gt; by decoding the specified array of bytes using the platform's default charset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023847Z" creationid="pingfangx" creationdate="20191014T023847Z">
        <seg>通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 &lt;c0&gt;String&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;c0&gt;String&lt;/c0&gt; by decoding the specified array of bytes using the specified &lt;a1&gt;charset&lt;/a1&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023843Z" creationid="pingfangx" creationdate="20191014T023843Z">
        <seg>通过使用指定的 &lt;a1&gt;charset&lt;/a1&gt; 解码指定的 byte 数组，构造一个新的 &lt;c0&gt;String&lt;/c0&gt;&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;c0&gt;String&lt;/c0&gt; by decoding the specified subarray of bytes using the platform's default charset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023846Z" creationid="pingfangx" creationdate="20191014T023846Z">
        <seg>通过使用平台的默认字符集解码指定的 byte 子数组，构造一个新的 &lt;c0&gt;String&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;c0&gt;String&lt;/c0&gt; by decoding the specified subarray of bytes using the specified &lt;a1&gt;charset&lt;/a1&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023818Z" creationid="pingfangx" creationdate="20191014T023818Z">
        <seg>通过使用指定的 &lt;a1&gt;charset&lt;/a1&gt; 解码指定的 byte 子数组，构造一个新的 &lt;c0&gt;String&lt;/c0&gt;&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;c0&gt;String&lt;/c0&gt; by decoding the specified subarray of bytes using the specified charset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023742Z" creationid="pingfangx" creationdate="20191014T023742Z">
        <seg>通过使用指定的字符集解码指定的 byte 子数组，构造一个新的 &lt;c0&gt;String&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;c0&gt;Subset&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093459Z" creationid="pingfangx" creationdate="20191014T093459Z">
        <seg>构造一个新的 &lt;c0&gt;Subset&lt;/c0&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;t0&gt;AnnotationFormatError&lt;/t0&gt; with the specified cause and a detail message of &lt;t1&gt;(cause == null ?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154036Z" creationid="pingfangx" creationdate="20191014T154036Z">
        <seg>构造带指定原因和详细消息的新 &lt;t0&gt;AnnotationFormatError&lt;/t0&gt;，该消息为 (cause == null ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;t0&gt;AnnotationFormatError&lt;/t0&gt; with the specified detail message and cause.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T153825Z" creationid="pingfangx" creationdate="20191014T153825Z">
        <seg>构造带指定详细消息和原因的新 &lt;t0&gt;AnnotationFormatError&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;t0&gt;AnnotationFormatError&lt;/t0&gt; with the specified detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T153823Z" creationid="pingfangx" creationdate="20191014T153823Z">
        <seg>构造具有指定详细消息的新 &lt;t0&gt;AnnotationFormatError&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new &lt;t0&gt;HashMap&lt;/t0&gt; with the same mappings as the specified &lt;t1&gt;Map&lt;/t1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135551Z" creationid="pingfangx" creationdate="20191025T135551Z">
        <seg>构造一个映射关系与指定 &lt;t0&gt;Map&lt;/t0&gt; 相同的新 &lt;t1&gt;HashMap&lt;/t1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new error with &lt;c0&gt;null&lt;/c0&gt; as its detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115852Z" creationid="pingfangx" creationdate="20191013T115852Z">
        <seg>构造详细消息为 &lt;c0&gt;null&lt;/c0&gt; 的新错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new error with the specified cause and a detail message of &lt;c0&gt;(cause==null ?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115905Z" creationid="pingfangx" creationdate="20191013T115856Z">
        <seg>根据指定的原因和 &lt;c0&gt;(cause==null ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new error with the specified detail message and cause.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115854Z" creationid="pingfangx" creationdate="20191013T115854Z">
        <seg>构造带指定详细消息和原因的新错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new error with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115953Z" creationid="pingfangx" creationdate="20191013T115953Z">
        <seg>构造带有指定详细消息、cause、suppression 是否启用和写堆栈是否启用的新 error。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new error with the specified detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115853Z" creationid="pingfangx" creationdate="20191013T115853Z">
        <seg>构造带指定详细消息的新错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new exception with &lt;c0&gt;null&lt;/c0&gt; as its detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120513Z" creationid="pingfangx" creationdate="20191013T120513Z">
        <seg>构造详细消息为 &lt;c0&gt;null&lt;/c0&gt; 的新异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new exception with the specified cause and a detail message of &lt;t0&gt;(cause==null ?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120612Z" creationid="pingfangx" creationdate="20191013T120524Z">
        <seg>根据指定的原因和 &lt;t0&gt;(cause==null ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new exception with the specified detail message and cause.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120516Z" creationid="pingfangx" creationdate="20191013T120516Z">
        <seg>构造一个具有指定详细消息和 cause 的新异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new exception with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120550Z" creationid="pingfangx" creationdate="20191013T120550Z">
        <seg>构造带有指定详细消息、cause、suppression 是否启用和写堆栈是否启用的新 exception。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new exception with the specified detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120515Z" creationid="pingfangx" creationdate="20191013T120515Z">
        <seg>构造带指定详细消息的新异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new reference-object queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155241Z" creationid="pingfangx" creationdate="20191014T155241Z">
        <seg>构造一个新的引用对象队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093127Z" creationid="pingfangx" creationdate="20191014T093127Z">
        <seg>构造一个新线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new throwable with &lt;c0&gt;null&lt;/c0&gt; as its detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114728Z" creationid="pingfangx" creationdate="20191013T114728Z">
        <seg>构造一个将 &lt;c0&gt;null&lt;/c0&gt; 作为其详细消息的新 throwable。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new throwable with the specified cause and a detail message of &lt;c0&gt;(cause==null ?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114754Z" creationid="pingfangx" creationdate="20191013T114754Z">
        <seg>构造一个带指定 cause 和 &lt;c0&gt;(cause==null ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new throwable with the specified detail message and cause.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114733Z" creationid="pingfangx" creationdate="20191013T114733Z">
        <seg>构造带有指定详细消息和 cause 的新 throwable。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new throwable with the specified detail message, cause, &lt;a0&gt;suppression&lt;/a0&gt;&lt;/a1&gt; enabled or disabled, and writable stack trace enabled or disabled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115013Z" creationid="pingfangx" creationdate="20191013T115013Z">
        <seg>构造带有指定详细消息、cause、&lt;a0&gt;suppression&lt;/a0&gt;&lt;/a1&gt; 是否启用和写堆栈是否启用的新 throwable。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a new throwable with the specified detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114730Z" creationid="pingfangx" creationdate="20191013T114730Z">
        <seg>构造带指定详细消息的新 throwable。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Byte&lt;/c0&gt; object that represents the &lt;c1&gt;byte&lt;/c1&gt; value indicated by the &lt;c2&gt;String&lt;/c2&gt; parameter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121358Z" creationid="pingfangx" creationdate="20191013T121358Z">
        <seg>构造一个新分配的 &lt;c0&gt;Byte&lt;/c0&gt; 对象，以表示 &lt;c1&gt;String&lt;/c1&gt; 参数所指示的 &lt;c2&gt;byte&lt;/c2&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Byte&lt;/c0&gt; object that represents the specified &lt;c1&gt;byte&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121355Z" creationid="pingfangx" creationdate="20191013T121355Z">
        <seg>构造一个新分配的 &lt;c0&gt;Byte&lt;/c0&gt; 对象，以表示指定的 &lt;c1&gt;byte&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Character&lt;/c0&gt; object that represents the specified &lt;c1&gt;char&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144938Z" creationid="pingfangx" creationdate="20191013T144938Z">
        <seg>构造一个新分配的 &lt;c0&gt;Character&lt;/c0&gt; 对象，用以表示指定的 &lt;c1&gt;char&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Double&lt;/c0&gt; object that represents the floating-point value of type &lt;c1&gt;double&lt;/c1&gt; represented by the string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132620Z" creationid="pingfangx" creationdate="20191013T132620Z">
        <seg>构造一个新分配的 &lt;c0&gt;Double&lt;/c0&gt; 对象，表示用字符串表示的 &lt;c1&gt;double&lt;/c1&gt; 类型的浮点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Double&lt;/c0&gt; object that represents the primitive &lt;c1&gt;double&lt;/c1&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132619Z" creationid="pingfangx" creationdate="20191013T132619Z">
        <seg>构造一个新分配的 &lt;c0&gt;Double&lt;/c0&gt; 对象，它表示基本的 &lt;c1&gt;double&lt;/c1&gt; 参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Float&lt;/c0&gt; object that represents the argument converted to type &lt;c1&gt;float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132046Z" creationid="pingfangx" creationdate="20191013T132046Z">
        <seg>构造一个新分配的 &lt;c0&gt;Float&lt;/c0&gt; 对象，它表示转换为 &lt;c1&gt;float&lt;/c1&gt; 类型的参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Float&lt;/c0&gt; object that represents the floating-point value of type &lt;c1&gt;float&lt;/c1&gt; represented by the string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132047Z" creationid="pingfangx" creationdate="20191013T132047Z">
        <seg>构造一个新分配的 &lt;c0&gt;Float&lt;/c0&gt; 对象，它表示用字符串表示的 &lt;c1&gt;float&lt;/c1&gt; 类型的浮点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Float&lt;/c0&gt; object that represents the primitive &lt;c1&gt;float&lt;/c1&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132045Z" creationid="pingfangx" creationdate="20191013T132045Z">
        <seg>构造一个新分配的 &lt;c0&gt;Float&lt;/c0&gt; 对象，它表示基本的 &lt;c1&gt;float&lt;/c1&gt; 参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Integer&lt;/c0&gt; object that represents the &lt;c1&gt;int&lt;/c1&gt; value indicated by the &lt;c2&gt;String&lt;/c2&gt; parameter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123302Z" creationid="pingfangx" creationdate="20191013T123302Z">
        <seg>构造一个新分配的 &lt;c0&gt;Integer&lt;/c0&gt; 对象，它表示 &lt;c1&gt;String&lt;/c1&gt; 参数所指示的 &lt;c2&gt;int&lt;/c2&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Integer&lt;/c0&gt; object that represents the specified &lt;c1&gt;int&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123259Z" creationid="pingfangx" creationdate="20191013T123259Z">
        <seg>构造一个新分配的 &lt;c0&gt;Integer&lt;/c0&gt; 对象，它表示指定的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Long&lt;/c0&gt; object that represents the &lt;c1&gt;long&lt;/c1&gt; value indicated by the &lt;c2&gt;String&lt;/c2&gt; parameter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124923Z" creationid="pingfangx" creationdate="20191013T124923Z">
        <seg>构造新分配的 &lt;c0&gt;Long&lt;/c0&gt; 对象，表示由 &lt;c1&gt;String&lt;/c1&gt; 参数指示的 &lt;c2&gt;long&lt;/c2&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Long&lt;/c0&gt; object that represents the specified &lt;c1&gt;long&lt;/c1&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124920Z" creationid="pingfangx" creationdate="20191013T124920Z">
        <seg>构造新分配的 &lt;c0&gt;Long&lt;/c0&gt; 对象，表示指定的 &lt;c1&gt;long&lt;/c1&gt; 参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Short&lt;/c0&gt; object that represents the &lt;c1&gt;short&lt;/c1&gt; value indicated by the &lt;c2&gt;String&lt;/c2&gt; parameter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122029Z" creationid="pingfangx" creationdate="20191013T122029Z">
        <seg>构造一个新分配的 &lt;c0&gt;Short&lt;/c0&gt; 对象，用来表示 &lt;c1&gt;String&lt;/c1&gt; 参数所指示的 &lt;c2&gt;short&lt;/c2&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a newly allocated &lt;c0&gt;Short&lt;/c0&gt; object that represents the specified &lt;c1&gt;short&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122028Z" creationid="pingfangx" creationdate="20191013T122028Z">
        <seg>构造一个新分配的 &lt;c0&gt;Short&lt;/c0&gt; 对象，用来表示指定的 &lt;c1&gt;short&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a process builder with the specified operating system program and arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075904Z" creationid="pingfangx" creationdate="20191014T075904Z">
        <seg>利用指定的操作系统程序和参数构造一个进程生成器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string buffer initialized to the contents of the specified string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064002Z" creationid="pingfangx" creationdate="20191014T064002Z">
        <seg>构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string buffer that contains the same characters as the specified &lt;c0&gt;CharSequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T065157Z" creationid="pingfangx" creationdate="20191014T064005Z">
        <seg>构造一个字符串缓冲区，它包含与指定的 &lt;c0&gt;CharSequence&lt;/c0&gt; 相同的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string buffer with no characters in it and an initial capacity of 16 characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064001Z" creationid="pingfangx" creationdate="20191014T064001Z">
        <seg>构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string buffer with no characters in it and the specified initial capacity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064002Z" creationid="pingfangx" creationdate="20191014T064002Z">
        <seg>构造一个不带字符，但具有指定初始容量的字符串缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string builder initialized to the contents of the specified string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030638Z" creationid="pingfangx" creationdate="20191014T030638Z">
        <seg>构造一个字符串生成器，并初始化为指定的字符串内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string builder that contains the same characters as the specified &lt;c0&gt;CharSequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030640Z" creationid="pingfangx" creationdate="20191014T030640Z">
        <seg>构造一个字符串生成器，包含与指定的 &lt;c0&gt;CharSequence&lt;/c0&gt; 相同的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string builder with no characters in it and an initial capacity of 16 characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030631Z" creationid="pingfangx" creationdate="20191014T030631Z">
        <seg>构造一个其中不带字符的字符串生成器，初始容量为 16 个字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs a string builder with no characters in it and an initial capacity specified by the &lt;c0&gt;capacity&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030636Z" creationid="pingfangx" creationdate="20191014T030636Z">
        <seg>构造一个其中不带字符的字符串生成器，初始容量由 &lt;c0&gt;capacity&lt;/c0&gt; 参数指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an &lt;c0&gt;InvocationTargetException&lt;/c0&gt; with &lt;c1&gt;null&lt;/c1&gt; as the target exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110928Z" creationid="pingfangx" creationdate="20191015T110928Z">
        <seg>构造以 &lt;c0&gt;null&lt;/c0&gt; 作为目标异常的 &lt;c1&gt;InvocationTargetException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an &lt;c0&gt;UndeclaredThrowableException&lt;/c0&gt; with the specified &lt;c1&gt;Throwable&lt;/c1&gt; and a detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111105Z" creationid="pingfangx" creationdate="20191015T111105Z">
        <seg>根据指定的 &lt;c0&gt;Throwable&lt;/c0&gt; 和详细消息构造 &lt;c1&gt;UndeclaredThrowableException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an &lt;c0&gt;UndeclaredThrowableException&lt;/c0&gt; with the specified &lt;c1&gt;Throwable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111103Z" creationid="pingfangx" creationdate="20191015T111103Z">
        <seg>根据指定的 &lt;c0&gt;Throwable&lt;/c0&gt; 构造一个 &lt;c1&gt;UndeclaredThrowableException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an AnnotationTypeMismatchException for the specified annotation type element and found data type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152800Z" creationid="pingfangx" creationdate="20191014T152800Z">
        <seg>构造针对指定的注释类型元素和找到的数据类型的 AnnotationTypeMismatchException。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an IncompleteAnnotationException to indicate that the named element was missing from the specified annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T153652Z" creationid="pingfangx" creationdate="20191014T153652Z">
        <seg>构造一个指示指定注释类型中缺少指定元素的 IncompleteAnnotationException。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an empty &lt;t0&gt;HashMap&lt;/t0&gt; with the default initial capacity (16) and the default load factor (0.75).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135548Z" creationid="pingfangx" creationdate="20191025T135548Z">
        <seg>构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 &lt;t0&gt;HashMap&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an empty &lt;t0&gt;HashMap&lt;/t0&gt; with the specified initial capacity and load factor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135523Z" creationid="pingfangx" creationdate="20191025T135523Z">
        <seg>构造一个带指定初始容量和加载因子的空 &lt;t0&gt;HashMap&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructs an empty &lt;t0&gt;HashMap&lt;/t0&gt; with the specified initial capacity and the default load factor (0.75).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135526Z" creationid="pingfangx" creationdate="20191025T135526Z">
        <seg>构造一个带指定初始容量和默认加载因子 (0.75) 的空 &lt;t0&gt;HashMap&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Contains the collections framework, legacy collection classes, event model, date and time facilities, internationalization, and miscellaneous utility classes (a string tokenizer, a random-number generator, and a bit array).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034323Z" creationid="pingfangx" creationdate="20191012T034323Z">
        <seg>包含 collection 框架、遗留的 collection 类、事件模型、日期和时间设施、国际化和各种实用工具类（字符串标记生成器、随机数生成器和位数组）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convenience class for reading character files.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100346Z" creationid="pingfangx" creationdate="20191010T100346Z">
        <seg>用来读取字符文件的便捷类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convenience class for writing character files.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100350Z" creationid="pingfangx" creationdate="20191010T100350Z">
        <seg>用来写入字符文件的便捷类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convenience method to set the &lt;c0&gt;accessible&lt;/c0&gt; flag for an array of objects with a single security check (for efficiency).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090630Z" creationid="pingfangx" creationdate="20191015T090630Z">
        <seg>使用单一安全性检查（为了提高效率）为一组对象设置 &lt;c0&gt;accessible&lt;/c0&gt; 标志的便捷方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts a &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;ByteBuffer&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; into an instance of class &lt;t3&gt;Class&lt;/t3&gt;, with an optional &lt;t4&gt;ProtectionDomain&lt;/t4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073312Z" creationid="pingfangx" creationdate="20191014T073312Z">
        <seg>使用可选的 &lt;t4&gt;ProtectionDomain&lt;/t4&gt; 将 &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;ByteBuffer&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 转换为 &lt;t3&gt;Class&lt;/t3&gt; 类的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts all of the characters in this &lt;c0&gt;String&lt;/c0&gt; to lower case using the rules of the default locale.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030112Z" creationid="pingfangx" creationdate="20191014T030112Z">
        <seg>使用默认语言环境的规则将此 &lt;c0&gt;String&lt;/c0&gt; 中的所有字符都转换为小写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts all of the characters in this &lt;c0&gt;String&lt;/c0&gt; to lower case using the rules of the given &lt;c1&gt;Locale&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030115Z" creationid="pingfangx" creationdate="20191014T030115Z">
        <seg>使用给定 &lt;c0&gt;Locale&lt;/c0&gt; 的规则将此 &lt;c1&gt;String&lt;/c1&gt; 中的所有字符都转换为小写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts all of the characters in this &lt;c0&gt;String&lt;/c0&gt; to upper case using the rules of the default locale.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030138Z" creationid="pingfangx" creationdate="20191014T030138Z">
        <seg>使用默认语言环境的规则将此 &lt;c0&gt;String&lt;/c0&gt; 中的所有字符都转换为大写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts all of the characters in this &lt;c0&gt;String&lt;/c0&gt; to upper case using the rules of the given &lt;c1&gt;Locale&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030136Z" creationid="pingfangx" creationdate="20191014T030136Z">
        <seg>使用给定 &lt;c0&gt;Locale&lt;/c0&gt; 的规则将此 &lt;c1&gt;String&lt;/c1&gt; 中的所有字符都转换为大写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts an angle measured in degrees to an approximately equivalent angle measured in radians.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152501Z" creationid="pingfangx" creationdate="20191013T152501Z">
        <seg>将用角度表示的角转换为近似相等的用弧度表示的角。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts an angle measured in radians to an approximately equivalent angle measured in degrees.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152442Z" creationid="pingfangx" creationdate="20191013T152442Z">
        <seg>将用弧度表示的角转换为近似相等的用角度表示的角。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts an array of bytes into an instance of class &lt;t0&gt;Class&lt;/t0&gt;, with an optional &lt;t1&gt;ProtectionDomain&lt;/t1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073110Z" creationid="pingfangx" creationdate="20191014T073110Z">
        <seg>使用可选的 &lt;t0&gt;ProtectionDomain&lt;/t0&gt; 将一个 byte 数组转换为 &lt;t1&gt;Class&lt;/t1&gt; 类的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts an array of bytes into an instance of class &lt;t0&gt;Class&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073335Z" creationid="pingfangx" creationdate="20191014T073335Z">
        <seg>将一个 byte 数组转换为 &lt;t0&gt;Class&lt;/t0&gt; 类的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150023Z" creationid="pingfangx" creationdate="20191013T150023Z">
        <seg>使用取自 UnicodeData 文件的大小写映射信息将字符（Unicode 代码点）参数转换为小写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150029Z" creationid="pingfangx" creationdate="20191013T150029Z">
        <seg>使用取自 UnicodeData 文件的大小写映射信息将字符（Unicode 代码点）参数转换为首字母大写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150032Z" creationid="pingfangx" creationdate="20191013T150032Z">
        <seg>使用取自 UnicodeData 文件的大小写映射信息将字符（Unicode 代码点）参数转换为大写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the character argument to lowercase using case mapping information from the UnicodeData file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150024Z" creationid="pingfangx" creationdate="20191013T150024Z">
        <seg>使用取自 UnicodeData 文件的大小写映射信息将字符参数转换为小写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the character argument to titlecase using case mapping information from the UnicodeData file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150028Z" creationid="pingfangx" creationdate="20191013T150028Z">
        <seg>使用取自 UnicodeData 文件的大小写映射信息将字符参数转换为首字母大写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the character argument to uppercase using case mapping information from the UnicodeData file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150030Z" creationid="pingfangx" creationdate="20191013T150030Z">
        <seg>使用取自 UnicodeData 文件的大小写映射信息将字符参数转换为大写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the object to a string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T102325Z" creationid="pingfangx" creationdate="20191013T102325Z">
        <seg>将对象转换为字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the specified character (Unicode code point) to its UTF-16 representation stored in a &lt;c0&gt;char&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150022Z" creationid="pingfangx" creationdate="20191013T150022Z">
        <seg>将指定的字符（Unicode 代码点）转换成其存储在 &lt;c0&gt;char&lt;/c0&gt; 数组中的 UTF-16 表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the specified character (Unicode code point) to its UTF-16 representation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150020Z" creationid="pingfangx" creationdate="20191013T150020Z">
        <seg>将指定字符（Unicode 代码点）转换为其 UTF-16 表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the specified surrogate pair to its supplementary code point value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150022Z" creationid="pingfangx" creationdate="20191013T150022Z">
        <seg>将指定的代理项对转换为其增补代码点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts this string to a new character array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030109Z" creationid="pingfangx" creationdate="20191014T030109Z">
        <seg>将此字符串转换为一个新的字符数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CookieManager provides a concrete implementation of &lt;c0&gt;&lt;a1&gt;CookieHandler&lt;/a1&gt;&lt;/c0&gt;, which separates the storage of cookies from the policy surrounding accepting and rejecting cookies.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083152Z" creationid="pingfangx" creationdate="20191011T083152Z">
        <seg>CookieManager 提供 &lt;c0&gt;&lt;a1&gt;CookieHandler&lt;/a1&gt;&lt;/c0&gt; 的具体实现，它将 cookie 的存储区与围绕接受和拒绝 cookie 的策略分离开来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CookiePolicy implementations decide which cookies should be accepted and which should be rejected.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083038Z" creationid="pingfangx" creationdate="20191011T083038Z">
        <seg>CookiePolicy 实现决定应该接受哪个 cookie 以及应该拒绝哪个 cookie。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies all of the mappings from the specified map to this map (optional operation).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140106Z" creationid="pingfangx" creationdate="20191025T140106Z">
        <seg>从指定映射中将所有映射关系复制到此映射中（可选操作）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies all of the mappings from the specified map to this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135832Z" creationid="pingfangx" creationdate="20191025T135832Z">
        <seg>将指定映射的所有映射关系复制到此映射中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154126Z" creationid="pingfangx" creationdate="20191013T154047Z">
        <seg>从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies characters from this string into the destination character array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024652Z" creationid="pingfangx" creationdate="20191014T024652Z">
        <seg>将字符从此字符串复制到目标字符数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies into the specified array every active thread in the current thread's thread group and its subgroups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081952Z" creationid="pingfangx" creationdate="20191014T081952Z">
        <seg>将当前线程的线程组及其子组中的每一个活动线程复制到指定的数组中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies into the specified array every active thread in this thread group and its subgroups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093211Z" creationid="pingfangx" creationdate="20191014T093211Z">
        <seg>将当前线程的线程组及其子组中的每一个活动线程复制到指定的数组中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies into the specified array every active thread in this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093213Z" creationid="pingfangx" creationdate="20191014T093213Z">
        <seg>把此线程组中的所有活动线程复制到指定数组中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies into the specified array references to every active subgroup in this thread group and its subgroups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093208Z" creationid="pingfangx" creationdate="20191014T093208Z">
        <seg>复制到此线程组及其子组中每个活动子组的指定数组引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies into the specified array references to every active subgroup in this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093210Z" creationid="pingfangx" creationdate="20191014T093210Z">
        <seg>把对此线程组中的所有活动子组的引用复制到指定数组中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core and maximum pool sizes</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123648Z" creationid="pingfangx" creationdate="20191025T123648Z">
        <seg>核心和最大池大小</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a regular (non-tree) node</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100053Z" creationid="pingfangx" creationdate="20191026T100053Z">
        <seg>创建一个常规(非树)节点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a tree bin node</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100124Z" creationid="pingfangx" creationdate="20191026T100124Z">
        <seg>创建树 bin 节点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a &lt;c0&gt;&lt;a1&gt;Spliterator&lt;/a1&gt;&lt;/c0&gt; over the elements described by this &lt;c2&gt;Iterable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103437Z" creationid="pingfangx" creationdate="20191014T103437Z">
        <seg>在这个 &lt;c2&gt;Iterable&lt;/c2&gt; 描述的元素上创建一个 &lt;c0&gt;&lt;a1&gt;Spliterator&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a localized description of this throwable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115107Z" creationid="pingfangx" creationdate="20191013T115107Z">
        <seg>创建此 throwable 的本地化描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; with the given initial parameters and default rejected execution handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125927Z" creationid="pingfangx" creationdate="20191025T125927Z">
        <seg>用给定的初始参数和默认被拒绝的执行处理程序创建新的 &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; with the given initial parameters and default thread factory and rejected execution handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125922Z" creationid="pingfangx" creationdate="20191025T125922Z">
        <seg>用给定的初始参数和默认的线程工厂及被拒绝的执行处理程序创建新的 &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; with the given initial parameters and default thread factory.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125929Z" creationid="pingfangx" creationdate="20191025T125929Z">
        <seg>用给定的初始参数和默认的线程工厂创建新的 &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; with the given initial parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125931Z" creationid="pingfangx" creationdate="20191025T125931Z">
        <seg>用给定的初始参数创建新的 &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new array with the specified component type and dimensions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103451Z" creationid="pingfangx" creationdate="20191015T103451Z">
        <seg>创建一个具有指定的组件类型和维度的新数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new array with the specified component type and length.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103449Z" creationid="pingfangx" creationdate="20191015T103449Z">
        <seg>创建一个具有指定的组件类型和长度的新数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new class loader using the &lt;t0&gt;ClassLoader&lt;/t0&gt; returned by the method &lt;c1&gt;&lt;a2&gt;&lt;t3&gt;getSystemClassLoader()&lt;/t3&gt;&lt;/a2&gt;&lt;/c1&gt; as the parent class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073022Z" creationid="pingfangx" creationdate="20191014T073022Z">
        <seg>使用方法 &lt;c1&gt;&lt;a2&gt;&lt;t3&gt;getSystemClassLoader()&lt;/t3&gt;&lt;/a2&gt;&lt;/c1&gt; 返回的 &lt;t0&gt;ClassLoader&lt;/t0&gt; 创建一个新的类加载器，将该加载器作为父类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new class loader using the specified parent class loader for delegation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072952Z" creationid="pingfangx" creationdate="20191014T072952Z">
        <seg>使用指定的、用于委托操作的父类加载器创建新的类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance of the class represented by this &lt;c0&gt;Class&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T102322Z" creationid="pingfangx" creationdate="20191013T102322Z">
        <seg>创建此 &lt;c0&gt;Class&lt;/c0&gt; 对象所表示的类的一个新实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new phantom reference that refers to the given object and is registered with the given queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154705Z" creationid="pingfangx" creationdate="20191014T154705Z">
        <seg>创建一个引用给定对象的新的虚引用，并向给定队列注册它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new soft reference that refers to the given object and is registered with the given queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155957Z" creationid="pingfangx" creationdate="20191014T155957Z">
        <seg>创建一个引用给定对象的新的软引用，并向给定队列注册该引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new soft reference that refers to the given object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155949Z" creationid="pingfangx" creationdate="20191014T155949Z">
        <seg>创建引用给定对象的新的软引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093128Z" creationid="pingfangx" creationdate="20191014T093128Z">
        <seg>创建一个新线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new weak reference that refers to the given object and is registered with the given queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160141Z" creationid="pingfangx" creationdate="20191014T160141Z">
        <seg>创建引用给定对象的新的弱引用，并向给定队列注册该引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new weak reference that refers to the given object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160139Z" creationid="pingfangx" creationdate="20191014T160139Z">
        <seg>创建引用给定对象的新的弱引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a stack trace element representing the specified execution point.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095216Z" creationid="pingfangx" creationdate="20191014T095216Z">
        <seg>创建表示指定执行点的堆栈跟踪元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a thread local variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100741Z" creationid="pingfangx" creationdate="20191014T100741Z">
        <seg>创建一个线程本地变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates and returns a copy of this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T095133Z" creationid="pingfangx" creationdate="20191012T095133Z">
        <seg>创建并返回此对象的一个副本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a type variable must not cause the creation of its bounds.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T081936Z" creationid="pingfangx" creationdate="20191015T081936Z">
        <seg>创建某个类型变量决不能导致创建其边界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating new threads</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124116Z" creationid="pingfangx" creationdate="20191025T124116Z">
        <seg>创建新线程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DEFAULT_INITIAL_CAPACITY.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084335Z" creationid="pingfangx" creationdate="20191026T084335Z">
        <seg>或者零表示 DEFAULT_INITIAL_CAPACITY。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>De-registers a previously-registered virtual-machine shutdown hook.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153639Z" creationid="pingfangx" creationdate="20191013T153639Z">
        <seg>取消注册某个先前已注册的虚拟机关闭钩子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a &lt;c0&gt;String&lt;/c0&gt; into a &lt;c1&gt;Byte&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121425Z" creationid="pingfangx" creationdate="20191013T121425Z">
        <seg>将 &lt;c0&gt;String&lt;/c0&gt; 解码为 &lt;c1&gt;Integer&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a &lt;c0&gt;String&lt;/c0&gt; into a &lt;c1&gt;Long&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124947Z" creationid="pingfangx" creationdate="20191013T124947Z">
        <seg>将 &lt;c0&gt;String&lt;/c0&gt; 解码成 &lt;c1&gt;Long&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a &lt;c0&gt;String&lt;/c0&gt; into a &lt;c1&gt;Short&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122040Z" creationid="pingfangx" creationdate="20191013T122040Z">
        <seg>将 &lt;c0&gt;String&lt;/c0&gt; 解码为 &lt;c1&gt;Short&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a &lt;c0&gt;String&lt;/c0&gt; into an &lt;c1&gt;Integer&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123320Z" creationid="pingfangx" creationdate="20191013T123320Z">
        <seg>将 &lt;c0&gt;String&lt;/c0&gt; 解码为 &lt;c1&gt;Short&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines a package by name in this &lt;t0&gt;ClassLoader&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073339Z" creationid="pingfangx" creationdate="20191014T073339Z">
        <seg>根据 name 在此 &lt;t0&gt;ClassLoader&lt;/t0&gt; 中定义包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines attribute keys that are used to identify text attributes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033156Z" creationid="pingfangx" creationdate="20191012T033156Z">
        <seg>定义用于标识文本属性的属性键。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines buffers, which are containers for data, and provides an overview of the other NIO packages.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083701Z" creationid="pingfangx" creationdate="20191011T083701Z">
        <seg>定义作为数据容器的缓冲区，并提供其他 NIO 包的概述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines constants that are used as attribute keys in the &lt;c0&gt;AttributedCharacterIterator&lt;/c0&gt; returned from &lt;c1&gt;DateFormat.formatToCharacterIterator&lt;/c1&gt; and as field identifiers in &lt;c2&gt;FieldPosition&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033419Z" creationid="pingfangx" creationdate="20191012T033419Z">
        <seg>定义了各种常量，这些常量用作 &lt;c0&gt;DateFormat.formatToCharacterIterator&lt;/c0&gt; 所返回的 &lt;c1&gt;AttributedCharacterIterator&lt;/c1&gt; 中的属性键和 &lt;c2&gt;FieldPosition&lt;/c2&gt; 中的字段标识符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines constants that are used as attribute keys in the &lt;c0&gt;AttributedCharacterIterator&lt;/c0&gt; returned from &lt;c1&gt;Format.formatToCharacterIterator&lt;/c1&gt; and as field identifiers in &lt;c2&gt;FieldPosition&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033432Z" creationid="pingfangx" creationdate="20191012T033432Z">
        <seg>定义在 &lt;c0&gt;AttributedCharacterIterator&lt;/c0&gt; （从 &lt;c1&gt;Format.formatToCharacterIterator&lt;/c1&gt; 返回）中用作属性键和在 &lt;c2&gt;FieldPosition&lt;/c2&gt; 中用作字段标识符的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines constants that are used as attribute keys in the &lt;c0&gt;AttributedCharacterIterator&lt;/c0&gt; returned from &lt;c1&gt;MessageFormat.formatToCharacterIterator&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033438Z" creationid="pingfangx" creationdate="20191012T033438Z">
        <seg>在从 &lt;c0&gt;MessageFormat.formatToCharacterIterator&lt;/c0&gt; 返回的 &lt;c1&gt;AttributedCharacterIterator&lt;/c1&gt; 中定义用作属性键的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines constants that are used as attribute keys in the &lt;c0&gt;AttributedCharacterIterator&lt;/c0&gt; returned from &lt;c1&gt;NumberFormat.formatToCharacterIterator&lt;/c1&gt; and as field identifiers in &lt;c2&gt;FieldPosition&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033443Z" creationid="pingfangx" creationdate="20191012T033443Z">
        <seg>定义将用作从 &lt;c0&gt;NumberFormat.formatToCharacterIterator&lt;/c0&gt; 返回的 &lt;c1&gt;AttributedCharacterIterator&lt;/c1&gt; 中属性键以及 &lt;c2&gt;FieldPosition&lt;/c2&gt; 中字段标识符的常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines the &lt;e0&gt;standard&lt;/e0&gt; socket options.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083402Z" creationid="pingfangx" creationdate="20191011T083402Z">
        <seg>定义了 &lt;e0&gt;standard (标准)&lt;/e0&gt; 插座选项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defines the standard families of communication protocols.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083428Z" creationid="pingfangx" creationdate="20191011T083428Z">
        <seg>定义的通信协议标准的家族。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Depending on which concrete Executor class is being used, tasks may execute in a newly created thread, an existing task-execution thread, or the thread calling &lt;c3&gt;&lt;a4&gt;execute&lt;/a4&gt;&lt;/c3&gt;, and may execute sequentially or concurrently.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110436Z" creationid="pingfangx" creationdate="20191025T110436Z">
        <seg>根据所使用的具体 Executor 类的不同，可能在新创建的线程中，现有的任务执行线程中，或者调用 &lt;c3&gt;&lt;a4&gt;execute&lt;/a4&gt;&lt;/c3&gt; 的线程中执行任务，并且可能顺序或并发执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102720Z" creationid="pingfangx" creationdate="20191011T102720Z">
        <seg>描述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Destroys this thread group and all of its subgroups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093158Z" creationid="pingfangx" creationdate="20191014T093158Z">
        <seg>销毁此线程组及其所有子组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if a character (Unicode code point) is defined in Unicode.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145432Z" creationid="pingfangx" creationdate="20191013T145432Z">
        <seg>确定字符（Unicode 代码点）是否被定义为 Unicode 中的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if a character is defined in Unicode.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145433Z" creationid="pingfangx" creationdate="20191013T145433Z">
        <seg>确定字符是否被定义为 Unicode 中的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the character (Unicode code point) is permissible as the first character in a Java identifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145614Z" creationid="pingfangx" creationdate="20191013T145614Z">
        <seg>确定是否允许将字符（Unicode 代码点）作为 Java 标识符中的首字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145613Z" creationid="pingfangx" creationdate="20191013T145613Z">
        <seg>确定字符（Unicode 代码点）是否可以是 Java 标识符中首字符以外的部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the class or interface represented by this &lt;c0&gt;Class&lt;/c0&gt; object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified &lt;c1&gt;Class&lt;/c1&gt; parameter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101628Z" creationid="pingfangx" creationdate="20191013T101628Z">
        <seg>判定此 &lt;c0&gt;Class&lt;/c0&gt; 对象所表示的类或接口与指定的 &lt;c1&gt;Class&lt;/c1&gt; 参数所表示的类或接口是否相同，或是否是其超类或超接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the currently running thread has permission to modify this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093157Z" creationid="pingfangx" creationdate="20191014T093157Z">
        <seg>确定当前运行的线程是否有权修改此线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the currently running thread has permission to modify this thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081543Z" creationid="pingfangx" creationdate="20191014T081543Z">
        <seg>判定当前运行的线程是否有权修改该线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the given &lt;c0&gt;char&lt;/c0&gt; value is a &lt;a1&gt; Unicode high-surrogate code unit&lt;/a1&gt; (also known as &lt;i2&gt;leading-surrogate code unit&lt;/i2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145540Z" creationid="pingfangx" creationdate="20191013T145540Z">
        <seg>确定给出的 &lt;c0&gt;char&lt;/c0&gt; 值是否为一个 &lt;a1&gt; Unicode 高代理项代码单元&lt;/a1&gt;（也称为&lt;i2&gt;前导代理项代码单元&lt;/i2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the given &lt;c0&gt;char&lt;/c0&gt; value is a &lt;a1&gt; Unicode low-surrogate code unit&lt;/a1&gt; (also known as &lt;i2&gt;trailing-surrogate code unit&lt;/i2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145804Z" creationid="pingfangx" creationdate="20191013T145804Z">
        <seg>确定给出的 &lt;c0&gt;char&lt;/c0&gt; 值是否为一个 &lt;a1&gt; Unicode 低代理项代码单元&lt;/a1&gt;（也称为&lt;i2&gt;尾部代理项代码单元&lt;/i2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the given &lt;c0&gt;char&lt;/c0&gt; value is a Unicode &lt;i1&gt;surrogate code unit&lt;/i1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145905Z" creationid="pingfangx" creationdate="20191013T145905Z">
        <seg>确定给定的 &lt;c0&gt;char&lt;/c0&gt; 值是否为 Unicode &lt;i1&gt;surrogate code unit (代理代码单元)&lt;/i1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the referenced character (Unicode code point) is an ISO control character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145550Z" creationid="pingfangx" creationdate="20191013T145550Z">
        <seg>确定引用的字符（Unicode 代码点）是否为 ISO 控制字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified &lt;c0&gt;Class&lt;/c0&gt; object represents a primitive type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101943Z" creationid="pingfangx" creationdate="20191013T101943Z">
        <seg>判定指定的 &lt;c0&gt;Class&lt;/c0&gt; 对象是否表示一个基本类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified &lt;c0&gt;Class&lt;/c0&gt; object represents an interface type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101640Z" creationid="pingfangx" creationdate="20191013T101640Z">
        <seg>判定指定的 &lt;c0&gt;Class&lt;/c0&gt; 对象是否表示一个接口类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified &lt;c0&gt;Object&lt;/c0&gt; is assignment-compatible with the object represented by this &lt;c1&gt;Class&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101636Z" creationid="pingfangx" creationdate="20191013T101636Z">
        <seg>判定指定的 &lt;c0&gt;Object&lt;/c0&gt; 是否与此 &lt;c1&gt;Class&lt;/c1&gt; 所表示的对象赋值兼容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145609Z" creationid="pingfangx" creationdate="20191013T145609Z">
        <seg>确定指定字符(Unicode 代码点)是一个 CJKV(中国，日本，韩国和越南)象形文字，Unicode 标准定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is a Unicode space character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145821Z" creationid="pingfangx" creationdate="20191013T145821Z">
        <seg>确定指定字符（Unicode 代码点）是否为 Unicode 空白字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is a digit.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145435Z" creationid="pingfangx" creationdate="20191013T145435Z">
        <seg>确定指定字符（Unicode 代码点）是否为数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is a letter or digit.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145725Z" creationid="pingfangx" creationdate="20191013T145725Z">
        <seg>确定指定字符（Unicode 代码点）是否为字母或数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is a letter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145638Z" creationid="pingfangx" creationdate="20191013T145638Z">
        <seg>确定指定字符（Unicode 代码点）是否为字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is a lowercase character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145807Z" creationid="pingfangx" creationdate="20191013T145807Z">
        <seg>确定指定字符（Unicode 代码点）是否为小写字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is a titlecase character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145947Z" creationid="pingfangx" creationdate="20191013T145947Z">
        <seg>确定指定字符（Unicode 代码点）是否为首字母大写字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is an alphabet.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145400Z" creationid="pingfangx" creationdate="20191013T145400Z">
        <seg>确定指定字符（Unicode 代码点）是否为字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is an uppercase character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145956Z" creationid="pingfangx" creationdate="20191013T145956Z">
        <seg>确定指定字符（Unicode 代码点）是否为大写字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145952Z" creationid="pingfangx" creationdate="20191013T145952Z">
        <seg>确定是否允许将指定字符（Unicode 代码点）作为 Unicode 标识符中的首字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) is white space according to Java.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150007Z" creationid="pingfangx" creationdate="20191013T150007Z">
        <seg>确定指定字符（Unicode 代码点）依据 Java 标准是否为空白字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145950Z" creationid="pingfangx" creationdate="20191013T145950Z">
        <seg>确定指定字符（Unicode 代码点）是否可以是 Unicode 标识符中首字符以外的部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145553Z" creationid="pingfangx" creationdate="20191013T145553Z">
        <seg>确定是否应该认为指定字符（Unicode 代码点）是 Java 标识符或 Unicode 标识符中可忽略的一个字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is a Unicode space character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145819Z" creationid="pingfangx" creationdate="20191013T145819Z">
        <seg>确定指定字符是否为 Unicode 空白字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is a digit.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145434Z" creationid="pingfangx" creationdate="20191013T145434Z">
        <seg>确定指定字符是否为数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is a letter or digit.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145723Z" creationid="pingfangx" creationdate="20191013T145723Z">
        <seg>确定指定字符是否为字母或数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is a letter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145637Z" creationid="pingfangx" creationdate="20191013T145637Z">
        <seg>确定指定字符是否为字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is a lowercase character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145806Z" creationid="pingfangx" creationdate="20191013T145806Z">
        <seg>确定指定字符是否为小写字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is a titlecase character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145948Z" creationid="pingfangx" creationdate="20191013T145948Z">
        <seg>确定指定字符是否为首字母大写字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is an ISO control character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145549Z" creationid="pingfangx" creationdate="20191013T145549Z">
        <seg>确定指定字符是否为 ISO 控制字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is an uppercase character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145955Z" creationid="pingfangx" creationdate="20191013T145955Z">
        <seg>确定指定字符是否为大写字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is permissible as the first character in a Java identifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145615Z" creationid="pingfangx" creationdate="20191013T145615Z">
        <seg>确定是否允许将指定字符作为 Java 标识符中的首字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is permissible as the first character in a Unicode identifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145954Z" creationid="pingfangx" creationdate="20191013T145954Z">
        <seg>确定是否允许将指定字符作为 Unicode 标识符中的首字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character is white space according to Java.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150008Z" creationid="pingfangx" creationdate="20191013T150008Z">
        <seg>确定指定字符依据 Java 标准是否为空白字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character may be part of a Java identifier as other than the first character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145611Z" creationid="pingfangx" creationdate="20191013T145611Z">
        <seg>确定指定字符是否可以是 Java 标识符中首字符以外的部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character may be part of a Unicode identifier as other than the first character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145951Z" creationid="pingfangx" creationdate="20191013T145951Z">
        <seg>确定指定字符是否可以是 Unicode 标识符中首字符以外的部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145552Z" creationid="pingfangx" creationdate="20191013T145552Z">
        <seg>确定是否应该认为指定字符是 Java 标识符或 Unicode 标识符中可忽略的一个字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines if this &lt;c0&gt;Class&lt;/c0&gt; object represents an array class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101609Z" creationid="pingfangx" creationdate="20191013T101609Z">
        <seg>判定此 &lt;c0&gt;Class&lt;/c0&gt; 对象是否表示一个数组类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines the &lt;c0&gt;long&lt;/c0&gt; value of the system property with the specified name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124954Z" creationid="pingfangx" creationdate="20191013T124954Z">
        <seg>使用指定名称确定系统属性的 &lt;c0&gt;long&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines the character representation for a specific digit in the specified radix.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145025Z" creationid="pingfangx" creationdate="20191013T145025Z">
        <seg>确定使用指定基数的特定数字的字符表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines the current system properties.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154236Z" creationid="pingfangx" creationdate="20191013T154236Z">
        <seg>确定当前的系统属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines the integer value of the system property with the specified name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123325Z" creationid="pingfangx" creationdate="20191013T123325Z">
        <seg>确定具有指定名称的系统属性的整数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines the interfaces implemented by the class or interface represented by this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101115Z" creationid="pingfangx" creationdate="20191013T101115Z">
        <seg>确定此对象所表示的类或接口实现的接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines the number of &lt;c0&gt;char&lt;/c0&gt; values needed to represent the specified character (Unicode code point).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144946Z" creationid="pingfangx" creationdate="20191013T144946Z">
        <seg>确定表示指定字符（Unicode 代码点）所需的 &lt;c0&gt;char&lt;/c0&gt; 值的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines whether the character is mirrored according to the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145815Z" creationid="pingfangx" creationdate="20191013T145815Z">
        <seg>确定指定字符依据 Unicode 规范是否对称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines whether the specified character (Unicode code point) is in the &lt;a0&gt;Basic Multilingual Plane (BMP)&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145430Z" creationid="pingfangx" creationdate="20191013T145430Z">
        <seg>确定指定字符（Unicode 代码点）是否在&lt;a0&gt;Basic Multilingual Plane (BMP)&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines whether the specified character (Unicode code point) is in the &lt;a0&gt;supplementary character&lt;/a0&gt; range.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145843Z" creationid="pingfangx" creationdate="20191013T145843Z">
        <seg>确定指定字符（Unicode 代码点）是否在 &lt;a0&gt;增补字符&lt;/a0&gt; 范围内。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145811Z" creationid="pingfangx" creationdate="20191013T145811Z">
        <seg>确定指定字符（Unicode 代码点）依据 Unicode 规范是否对称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines whether the specified code point is a valid &lt;a0&gt; Unicode code point value&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150006Z" creationid="pingfangx" creationdate="20191013T150006Z">
        <seg>确定指定的代码点是否为有效的 &lt;a0&gt; Unicode code point value&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determines whether the specified pair of &lt;c0&gt;char&lt;/c0&gt; values is a valid &lt;a1&gt; Unicode surrogate pair&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145945Z" creationid="pingfangx" creationdate="20191013T145945Z">
        <seg>确定指定的 &lt;c0&gt;char&lt;/c0&gt; 值对是否为有效的 &lt;a1&gt; Unicode 代理项对&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Direct handoffs generally require unbounded maximumPoolSizes to avoid rejection of new submitted tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125031Z" creationid="pingfangx" creationdate="20191025T125031Z">
        <seg>直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Does nothing on Android.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071246Z" creationid="pingfangx" creationdate="20191012T071246Z">
        <seg>在 Android 上什么都不做。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doing so requires some care especially when policies are designed to work only under particular capacity or queuing policies.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125653Z" creationid="pingfangx" creationdate="20191025T125653Z">
        <seg>但这样做需要非常小心，尤其是当策略仅用于特定容量或排队策略时。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doubly-linked list implementation of the &lt;c0&gt;List&lt;/c0&gt; and &lt;c1&gt;Deque&lt;/c1&gt; interfaces.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045744Z" creationid="pingfangx" creationdate="20191012T045744Z">
        <seg>&lt;c0&gt;List&lt;/c0&gt; 和 &lt;c1&gt;Deque&lt;/c1&gt; 接口的双链表实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each &lt;c0&gt;ProcessBuilder&lt;/c0&gt; instance manages a collection of process attributes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075724Z" creationid="pingfangx" creationdate="20191014T075724Z">
        <seg>每个 &lt;c0&gt;ProcessBuilder&lt;/c0&gt; 实例管理一个进程属性集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; also maintains some basic statistics, such as the number of completed tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123328Z" creationid="pingfangx" creationdate="20191025T123328Z">
        <seg>每个 &lt;c0&gt;ThreadPoolExecutor&lt;/c0&gt; 还维护着一些基本的统计数据，如完成的任务数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each action in a thread &lt;i0&gt;happens-before&lt;/i0&gt; every action in that thread that comes later in the program's order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113216Z" creationid="pingfangx" creationdate="20191025T113216Z">
        <seg>线程中的每个操作 &lt;i0&gt;happen-before&lt;/i0&gt; 稍后按程序顺序传入的该线程中的每个操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each class also provides appropriate utility methods for that type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120804Z" creationid="pingfangx" creationdate="20191025T120804Z">
        <seg>每个类也为该类型提供适当的实用工具方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each class defines a family of &lt;i0&gt;get&lt;/i0&gt; and &lt;i1&gt;put&lt;/i1&gt; methods for moving data out of and in to a buffer, methods for &lt;i2&gt;compacting&lt;/i2&gt;, &lt;i3&gt;duplicating&lt;/i3&gt;, and &lt;i4&gt;slicing&lt;/i4&gt; a buffer, and static methods for &lt;i5&gt;allocating&lt;/i5&gt; a new buffer as well as for &lt;i6&gt;wrapping&lt;/i6&gt; an existing array into a buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114212Z" creationid="pingfangx" creationdate="20191011T114212Z">
        <seg>每个类定义了一系列用于将数据移出或移入缓冲区的 &lt;i0&gt;get&lt;/i0&gt; 和 &lt;i1&gt;put&lt;/i1&gt; 方法，用于 &lt;i2&gt;压缩&lt;/i2&gt; 、 &lt;i3&gt;复制&lt;/i3&gt; 和 &lt;i4&gt;切片&lt;/i4&gt; 缓冲区的方法，以及用于 &lt;i5&gt;分配&lt;/i5&gt; 新缓冲区和将现有数组 &lt;i6&gt;包装&lt;/i6&gt; 到缓冲区中的静态方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063903Z" creationid="pingfangx" creationdate="20191014T063903Z">
        <seg>每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string builder.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030347Z" creationid="pingfangx" creationdate="20191014T030347Z">
        <seg>每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符添加或插入到字符串生成器中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each element represents a single stack frame.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095158Z" creationid="pingfangx" creationdate="20191014T095158Z">
        <seg>每个元素表示单独的一个堆栈帧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each instance of &lt;t1&gt;ClassLoader&lt;/t1&gt; has an associated parent class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071918Z" creationid="pingfangx" creationdate="20191014T071918Z">
        <seg>每个 &lt;t1&gt;ClassLoader&lt;/t1&gt; 实例都有一个相关的父类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070408Z" creationid="pingfangx" creationdate="20191014T070408Z">
        <seg>每个对象都可以通过一个不同的类实现，而且不能保证每个类能够测试其实例与其他类的实例的相等性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of these subpackages has its own service-provider (SPI) subpackage, the contents of which can be used to extend the platform's default implementations or to construct alternative implementations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102632Z" creationid="pingfangx" creationdate="20191011T102632Z">
        <seg>每个子包都具有自己的服务提供者接口 (SPI) 子包，SPI 子包的内容可用于扩展平台的默认实现或构造替代实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each process builder manages these process attributes:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075737Z" creationid="pingfangx" creationdate="20191014T075737Z">
        <seg>每个进程生成器管理这些进程属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each proxy class has one public constructor that takes one argument, an implementation of the interface &lt;c0&gt;&lt;a1&gt;InvocationHandler&lt;/a1&gt;&lt;/c0&gt;, to set the invocation handler for a proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112605Z" creationid="pingfangx" creationdate="20191015T112605Z">
        <seg>每个代理类都有一个可以带一个参数（接口 &lt;c0&gt;&lt;a1&gt;InvocationHandler&lt;/a1&gt;&lt;/c0&gt; 的实现）的公共构造方法，用于设置代理实例的调用处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each proxy instance has an associated &lt;i4&gt;invocation handler&lt;/i4&gt; object, which implements the interface &lt;c5&gt;&lt;a6&gt;InvocationHandler&lt;/a6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112220Z" creationid="pingfangx" creationdate="20191015T112220Z">
        <seg>每个代理实例都有一个关联的&lt;i4&gt;调用处理程序&lt;/i4&gt; 对象，它可以实现接口 &lt;c5&gt;&lt;a6&gt;InvocationHandler&lt;/a6&gt;&lt;/c5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each proxy instance has an associated invocation handler, the one that was passed to its constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112717Z" creationid="pingfangx" creationdate="20191015T112717Z">
        <seg>每个代理实例都有一个关联的调用处理程序，它会被传递到其构造方法中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each proxy instance has an associated invocation handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T165256Z" creationid="pingfangx" creationdate="20191014T165256Z">
        <seg>每个代理实例都具有一个关联的调用处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each reference-object type is implemented by a subclass of the abstract base &lt;c0&gt;&lt;c1&gt;&lt;a2&gt;Reference&lt;/a2&gt;&lt;/c1&gt;&lt;/c0&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085631Z" creationid="pingfangx" creationdate="20191012T085631Z">
        <seg>每种引用对象类型都是通过抽象的基本 &lt;c0&gt;&lt;c1&gt;&lt;a2&gt;Reference&lt;/a2&gt;&lt;/c1&gt;&lt;/c0&gt; 类的一个子类实现的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the &lt;t0&gt;ThreadLocal&lt;/t0&gt; instance is accessible; after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095935Z" creationid="pingfangx" creationdate="20191014T095935Z">
        <seg>每个线程都保持对其线程局部变量副本的隐式引用，只要线程是活动的并且 &lt;t0&gt;ThreadLocal&lt;/t0&gt; 实例是可访问的；在线程消失之后，其线程局部实例的所有副本都会被垃圾回收（除非存在对这些副本的其他引用）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each thread may or may not also be marked as a daemon.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080914Z" creationid="pingfangx" creationdate="20191014T080914Z">
        <seg>每个线程都可以或不可以标记为一个守护程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each type corresponds to a different level of reachability, as defined below.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085547Z" creationid="pingfangx" creationdate="20191012T085547Z">
        <seg>正如下面定义的那样，每种类型对应于一个不同的可到达性级别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Email address</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114423Z" creationid="pingfangx" creationdate="20191011T114423Z">
        <seg>Email address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enables/Disables tracing of instructions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153702Z" creationid="pingfangx" creationdate="20191013T153702Z">
        <seg>启用／禁用指令跟踪。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enables/Disables tracing of method calls.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153704Z" creationid="pingfangx" creationdate="20191013T153704Z">
        <seg>启用／禁用方法调用跟踪。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this &lt;c0&gt;String&lt;/c0&gt; into a sequence of bytes using the given &lt;a1&gt;charset&lt;/a1&gt;&lt;/a2&gt;, storing the result into a new byte array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024623Z" creationid="pingfangx" creationdate="20191014T024623Z">
        <seg>使用给定的 &lt;a1&gt;charset&lt;/a1&gt;&lt;/a2&gt; 将此 &lt;c0&gt;String&lt;/c0&gt; 编码到 byte 序列，并将结果存储到新的 byte 数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this &lt;c0&gt;String&lt;/c0&gt; into a sequence of bytes using the named charset, storing the result into a new byte array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024443Z" creationid="pingfangx" creationdate="20191014T024443Z">
        <seg>使用指定的字符集将此 &lt;c0&gt;String&lt;/c0&gt; 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this &lt;c0&gt;String&lt;/c0&gt; into a sequence of bytes using the platform's default charset, storing the result into a new byte array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024446Z" creationid="pingfangx" creationdate="20191014T024446Z">
        <seg>使用平台的默认字符集将此 &lt;c0&gt;String&lt;/c0&gt; 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>English</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114413Z" creationid="pingfangx" creationdate="20191011T114413Z">
        <seg>English</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ensures that the capacity is at least equal to the specified minimum.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033600Z" creationid="pingfangx" creationdate="20191014T033600Z">
        <seg>确保容量至少等于指定的最小值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ensures that the given root is the first node of its bin.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100451Z" creationid="pingfangx" creationdate="20191026T100442Z">
        <seg>确保给定的根是它的 bin 的第一个节点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Entry for Tree bins.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100256Z" creationid="pingfangx" creationdate="20191026T100256Z">
        <seg>Tree bins 的条目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enum constants are only comparable to other enum constants of the same enum type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094157Z" creationid="pingfangx" creationdate="20191014T094157Z">
        <seg>枚举常量只能与相同枚举类型的其他枚举常量进行比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enum for locale categories.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050337Z" creationid="pingfangx" creationdate="20191012T050329Z">
        <seg>语言环境类别的枚举。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T070705Z" creationid="pingfangx" creationdate="20191011T070705Z">
        <seg>枚举</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Error thrown when something goes wrong while loading a service provider.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050600Z" creationid="pingfangx" creationdate="20191012T050600Z">
        <seg>在加载服务提供者的过程中出错时抛出的错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Errors</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065635Z" creationid="pingfangx" creationdate="20191011T065635Z">
        <seg>错误</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Español</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114414Z" creationid="pingfangx" creationdate="20191011T114414Z">
        <seg>Español</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even if the clone method is invoked reflectively, there is no guarantee that it will succeed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101536Z" creationid="pingfangx" creationdate="20191014T101536Z">
        <seg>即使 clone 方法是反射性调用的，也无法保证它将获得成功。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though a type variable is created only once, this does not imply any requirement to cache instances representing the type variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082015Z" creationid="pingfangx" creationdate="20191015T082015Z">
        <seg>尽管类型变量仅创建一次，这并不意味着任何缓存实例的要求都表示类型变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;Class&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; object contains a &lt;c3&gt;&lt;a4&gt;reference&lt;/a4&gt;&lt;/c3&gt; to the &lt;t5&gt;ClassLoader&lt;/t5&gt; that defined it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071640Z" creationid="pingfangx" creationdate="20191014T071603Z">
        <seg>每个 &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;Class&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 对象都包含一个对定义它的 &lt;t5&gt;ClassLoader&lt;/t5&gt; 的 &lt;c3&gt;&lt;a4&gt;引用&lt;/a4&gt;&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every Java application has a single instance of class &lt;c0&gt;Runtime&lt;/c0&gt; that allows the application to interface with the environment in which the application is running.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071555Z" creationid="pingfangx" creationdate="20191012T071555Z">
        <seg>每个 Java 应用程序都有一个 &lt;c0&gt;Runtime&lt;/c0&gt; 类实例，使应用程序能够与其运行的环境相连接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every Unicode character is assigned to a single Unicode script, either a specific script, such as &lt;c2&gt;&lt;a3&gt;Latin&lt;/a3&gt;&lt;/c2&gt;, or one of the following three special values, &lt;c4&gt;&lt;a5&gt;Inherited&lt;/a5&gt;&lt;/c4&gt;, &lt;c6&gt;&lt;a7&gt;Common&lt;/a7&gt;&lt;/c6&gt; or &lt;c8&gt;&lt;a9&gt;Unknown&lt;/a9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103729Z" creationid="pingfangx" creationdate="20191014T103729Z">
        <seg>每 Unicode 字符被分配给单个 Unicode 脚本，无论是特定的脚本，例如 &lt;c2&gt;&lt;a3&gt;Latin&lt;/a3&gt;&lt;/c2&gt; 或以下三个特殊值中的一个，&lt;c4&gt;&lt;a5&gt;Inherited&lt;/a5&gt;&lt;/c4&gt;，&lt;c6&gt;&lt;a7&gt;Common&lt;/a7&gt;&lt;/c6&gt; 或 &lt;c8&gt;&lt;a9&gt;Unknown&lt;/a9&gt;&lt;/c8&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every array also belongs to a class that is reflected as a &lt;c1&gt;Class&lt;/c1&gt; object that is shared by all arrays with the same element type and number of dimensions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T022058Z" creationid="pingfangx" creationdate="20191013T022058Z">
        <seg>每个数组属于被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 &lt;c1&gt;Class&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every class has &lt;c1&gt;Object&lt;/c1&gt; as a superclass.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094502Z" creationid="pingfangx" creationdate="20191012T094502Z">
        <seg>每个类都使用 &lt;c1&gt;Object&lt;/c1&gt; 作为超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every reference object provides methods for getting and clearing the reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085651Z" creationid="pingfangx" creationdate="20191012T085651Z">
        <seg>每个引用对象都提供了获取和清除该引用的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every string buffer has a capacity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063932Z" creationid="pingfangx" creationdate="20191014T063932Z">
        <seg>每个字符串缓冲区都有一定的容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every string builder has a capacity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030434Z" creationid="pingfangx" creationdate="20191014T030434Z">
        <seg>每个字符串生成器都有一定的容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every thread has a name for identification purposes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081330Z" creationid="pingfangx" creationdate="20191014T081330Z">
        <seg>每个线程都有一个标识名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every thread has a priority.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080846Z" creationid="pingfangx" creationdate="20191014T080846Z">
        <seg>每个线程都有一个优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples of valid class names include:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072545Z" creationid="pingfangx" creationdate="20191014T072545Z">
        <seg>有效类名称的示例包括：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Except as noted, this content is licensed under &lt;a0&gt;Apache 2.0&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114410Z" creationid="pingfangx" creationdate="20191011T114410Z">
        <seg>Except as noted, this content is licensed under &lt;a0&gt;Apache 2.0&lt;/a0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception indicating that the result of a value-producing task, such as a &lt;c0&gt;&lt;a1&gt;FutureTask&lt;/a1&gt;&lt;/c0&gt;, cannot be retrieved because the task was cancelled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114227Z" creationid="pingfangx" creationdate="20191025T114227Z">
        <seg>如果某项值生成任务（如 &lt;c0&gt;&lt;a1&gt;FutureTask&lt;/a1&gt;&lt;/c0&gt;）的结果因为任务被取消而无法获取到，则抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception indicating the failure of an object read operation due to unread primitive data, or the end of data belonging to a serialized object in the stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065523Z" creationid="pingfangx" creationdate="20191011T065523Z">
        <seg>指示对象读取操作失败的异常，原因是无法读取流中的基本数据或已序列化对象的数据末尾。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception thrown by an &lt;c0&gt;&lt;a1&gt;Executor&lt;/a1&gt;&lt;/c0&gt; when a task cannot be accepted for execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114234Z" creationid="pingfangx" creationdate="20191025T114234Z">
        <seg>当无法执行某个任务时,由 &lt;c0&gt;&lt;a1&gt;Executor&lt;/a1&gt;&lt;/c0&gt; 抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception thrown when a blocking operation times out.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114309Z" creationid="pingfangx" creationdate="20191025T114309Z">
        <seg>阻塞操作超时时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception thrown when a thread tries to wait upon a barrier that is in a broken state, or which enters the broken state while the thread is waiting.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114224Z" creationid="pingfangx" creationdate="20191025T114224Z">
        <seg>当某个线程试图等待处于断开状态的 barrier 时，或者 barrier 进入断开状态而线程处于等待状态时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception thrown when an error or other exception is encountered in the course of completing a result or task.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120602Z" creationid="pingfangx" creationdate="20191025T120602Z">
        <seg>当完成一个结果或任务的过程中遇到错误或其他异常抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114232Z" creationid="pingfangx" creationdate="20191025T114232Z">
        <seg>当试图获取已通过抛出异常而中止的任务的结果时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exceptions</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065411Z" creationid="pingfangx" creationdate="20191011T065411Z">
        <seg>异常</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exceptions thrown by the action are relayed to the caller.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140705Z" creationid="pingfangx" creationdate="20191025T140705Z">
        <seg>操作引发的异常将转达到调用方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exceptions thrown by the function are relayed to the caller.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141320Z" creationid="pingfangx" creationdate="20191025T141320Z">
        <seg>函数引发的异常将转达到调用方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given command at some time in the future.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130711Z" creationid="pingfangx" creationdate="20191025T130711Z">
        <seg>在将来某个时间执行给定任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given task sometime in the future.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130046Z" creationid="pingfangx" creationdate="20191025T130037Z">
        <seg>在将来某个时间执行给定任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130522Z" creationid="pingfangx" creationdate="20191025T130522Z">
        <seg>执行给定的任务，当所有任务完成或超时期满时（无论哪个首先发生），返回保持任务状态和结果的 Future 列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given tasks, returning a list of Futures holding their status and results when all complete.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130520Z" creationid="pingfangx" creationdate="20191025T130520Z">
        <seg>执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130525Z" creationid="pingfangx" creationdate="20191025T130525Z">
        <seg>执行给定的任务，如果在给定的超时期满前某个任务已成功完成（也就是未抛出异常），则返回其结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130524Z" creationid="pingfangx" creationdate="20191025T130524Z">
        <seg>执行给定的任务，如果某个任务已成功完成（也就是未抛出异常），则返回其结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the specified command and arguments in a separate process with the specified environment and working directory.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153534Z" creationid="pingfangx" creationdate="20191013T153534Z">
        <seg>在指定环境和工作目录的独立进程中执行指定的命令和变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the specified command and arguments in a separate process with the specified environment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153524Z" creationid="pingfangx" creationdate="20191013T153524Z">
        <seg>在指定环境的独立进程中执行指定命令和变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the specified command and arguments in a separate process.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153520Z" creationid="pingfangx" creationdate="20191013T153520Z">
        <seg>在单独的进程中执行指定命令和变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the specified string command in a separate process with the specified environment and working directory.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153538Z" creationid="pingfangx" creationdate="20191013T153538Z">
        <seg>在有指定环境和工作目录的独立进程中执行指定的字符串命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the specified string command in a separate process with the specified environment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153532Z" creationid="pingfangx" creationdate="20191013T153532Z">
        <seg>在指定环境的单独进程中执行指定的字符串命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the specified string command in a separate process.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153528Z" creationid="pingfangx" creationdate="20191013T153528Z">
        <seg>在单独的进程中执行指定的字符串命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ExecutorServices provide methods arranging asynchronous execution of any function expressed as &lt;c9&gt;&lt;a10&gt;Callable&lt;/a10&gt;&lt;/c9&gt;, the result-bearing analog of &lt;c11&gt;&lt;a12&gt;Runnable&lt;/a12&gt;&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110536Z" creationid="pingfangx" creationdate="20191025T110536Z">
        <seg>ExecutorService 提供了安排异步执行的方法，可执行由 &lt;c9&gt;&lt;a10&gt;Callable&lt;/a10&gt;&lt;/c9&gt; 表示的任何函数，结果类似于 &lt;c11&gt;&lt;a12&gt;Runnable&lt;/a12&gt;&lt;/c11&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executors</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T105144Z" creationid="pingfangx" creationdate="20191025T105144Z">
        <seg>执行程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extended interface &lt;c0&gt;&lt;a1&gt;TransferQueue&lt;/a1&gt;&lt;/c0&gt;, and implementation &lt;c2&gt;&lt;a3&gt;LinkedTransferQueue&lt;/a3&gt;&lt;/c2&gt; introduce a synchronous &lt;c4&gt;transfer&lt;/c4&gt; method (along with related features) in which a producer may optionally block awaiting its consumer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111306Z" creationid="pingfangx" creationdate="20191025T111306Z">
        <seg>扩展接口 &lt;c0&gt;&lt;a1&gt;TransferQueue&lt;/a1&gt;&lt;/c0&gt; 和实现 &lt;c2&gt;&lt;a3&gt;LinkedTransferQueue&lt;/a3&gt;&lt;/c2&gt; 引入一种同步 &lt;c4&gt;transfer&lt;/c4&gt; 方法(以及相关特性)，在该方法中，生产者可以选择阻塞等待其消费者。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extends LinkedHashMap.Entry (which in turn extends Node) so can be used as extension of either regular or linked node.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100316Z" creationid="pingfangx" creationdate="20191026T100316Z">
        <seg>扩展 LinkedHashMap.Entry(进而扩展 Node)，因此可以用作常规节点或链接节点的扩展。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Factory and utility methods for &lt;c0&gt;&lt;a1&gt;Executor&lt;/a1&gt;&lt;/c0&gt;, &lt;c2&gt;&lt;a3&gt;ExecutorService&lt;/a3&gt;&lt;/c2&gt;, &lt;c4&gt;&lt;a5&gt;ScheduledExecutorService&lt;/a5&gt;&lt;/c4&gt;, &lt;c6&gt;&lt;a7&gt;ThreadFactory&lt;/a7&gt;&lt;/c6&gt;, and &lt;c8&gt;&lt;a9&gt;Callable&lt;/a9&gt;&lt;/c8&gt; classes defined in this package.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114126Z" creationid="pingfangx" creationdate="20191025T114126Z">
        <seg>此包中所定义的 &lt;c0&gt;&lt;a1&gt;Executor&lt;/a1&gt;&lt;/c0&gt;、&lt;c2&gt;&lt;a3&gt;ExecutorService&lt;/a3&gt;&lt;/c2&gt;、&lt;c4&gt;&lt;a5&gt;ScheduledExecutorService&lt;/a5&gt;&lt;/c4&gt;、&lt;c6&gt;&lt;a7&gt;ThreadFactory&lt;/a7&gt;&lt;/c6&gt; 和 &lt;c8&gt;&lt;a9&gt;Callable&lt;/a9&gt;&lt;/c8&gt; 类的工厂和实用方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Factory for creating new &lt;c0&gt;&lt;a1&gt;ForkJoinWorkerThread&lt;/a1&gt;&lt;/c0&gt;s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115613Z" creationid="pingfangx" creationdate="20191025T115613Z">
        <seg>用于创建新的 &lt;c0&gt;&lt;a1&gt;ForkJoinWorkerThread&lt;/a1&gt;&lt;/c0&gt; 的工厂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fail-fast iterators throw &lt;t0&gt;ConcurrentModificationException&lt;/t0&gt; on a best-effort basis.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134955Z" creationid="pingfangx" creationdate="20191025T134955Z">
        <seg>快速失败迭代器尽最大努力抛出 &lt;t0&gt;ConcurrentModificationException&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Field declaration (includes enum constants)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152405Z" creationid="pingfangx" creationdate="20191014T152405Z">
        <seg>字段声明（包括枚举常量）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fills in the execution stack trace.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115101Z" creationid="pingfangx" creationdate="20191013T115101Z">
        <seg>在异常堆栈跟踪中填充。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finalization</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125800Z" creationid="pingfangx" creationdate="20191025T125800Z">
        <seg>终止</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, Attempting to read a member whose definition has evolved incompatibly will result in a &lt;c0&gt;&lt;a1&gt;AnnotationTypeMismatchException&lt;/a1&gt;&lt;/c0&gt; or an &lt;c2&gt;&lt;a3&gt;IncompleteAnnotationException&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161100Z" creationid="pingfangx" creationdate="20191014T161100Z">
        <seg>最后，阅读其定义已经引起不兼容性的成员将导致 &lt;c0&gt;&lt;a1&gt;AnnotationTypeMismatchException&lt;/a1&gt;&lt;/c0&gt; 或 &lt;c2&gt;&lt;a3&gt;IncompleteAnnotationException&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, an object is &lt;e0&gt;unreachable&lt;/e0&gt;, and therefore eligible for reclamation, when it is not reachable in any of the above ways.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090705Z" creationid="pingfangx" creationdate="20191012T090705Z">
        <seg>最后，当不能以上述任何方法到达某一对象时，该对象是 &lt;e0&gt;不可到达&lt;/e0&gt; 对象，因此可以回收此对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, the implementor must ensure that &lt;t0&gt;x.compareTo(y)==0&lt;/t0&gt; implies that &lt;t1&gt;sgn(x.compareTo(z)) == sgn(y.compareTo(z))&lt;/t1&gt;, for all &lt;t2&gt;z&lt;/t2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103045Z" creationid="pingfangx" creationdate="20191014T103045Z">
        <seg>最后，实现者必须确保 &lt;t0&gt;x.compareTo(y)==0&lt;/t0&gt; 意味着对于所有的 &lt;t1&gt;z&lt;/t1&gt;，都存在 &lt;t2&gt;sgn(x.compareTo(z)) == sgn(y.compareTo(z))&lt;/t2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, the throwable can also contain a &lt;i2&gt;cause&lt;/i2&gt;: another throwable that caused this throwable to be constructed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114429Z" creationid="pingfangx" creationdate="20191013T114429Z">
        <seg>最后，throwable 还可以包含 &lt;i2&gt;cause（原因）&lt;/i2&gt;：另一个导致此 throwable 抛出的 throwable。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, this package provides classes that support signed/guarded objects and secure random number generation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T151949Z" creationid="pingfangx" creationdate="20191011T151949Z">
        <seg>最后，此包提供支持 signed/guarded 对象和安全随机数生成的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find a resource of the specified name from the search path used to load classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073047Z" creationid="pingfangx" creationdate="20191014T073047Z">
        <seg>从用来加载类的搜索路径中查找具有指定名称的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finds a class with the specified &lt;a0&gt;binary name&lt;/a0&gt;, loading it if necessary.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073358Z" creationid="pingfangx" creationdate="20191014T073358Z">
        <seg>查找具有指定的&lt;a0&gt;二进制名称&lt;/a0&gt;的类，必要时加载它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finds a resource with a given name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101401Z" creationid="pingfangx" creationdate="20191013T101401Z">
        <seg>查找具有给定名称的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finds all resources of the specified name from the search path used to load classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073051Z" creationid="pingfangx" creationdate="20191014T073051Z">
        <seg>从用来加载类的搜索路径中查找所有具有指定名称的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finds all the resources with the given name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073042Z" creationid="pingfangx" creationdate="20191014T073042Z">
        <seg>查找所有具有给定名称的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finds the class with the specified &lt;a0&gt;binary name&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073342Z" creationid="pingfangx" creationdate="20191014T073342Z">
        <seg>使用指定的&lt;a0&gt;二进制名称&lt;/a0&gt;查找类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finds the node starting at root p with the given hash and key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100514Z" creationid="pingfangx" creationdate="20191026T100514Z">
        <seg>使用给定的 hash 和 key 查找从根 p 开始的节点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finds the resource with the given name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073036Z" creationid="pingfangx" creationdate="20191014T073036Z">
        <seg>查找具有给定名称的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First the &lt;c0&gt;checkAccess&lt;/c0&gt; method of this thread is called with no arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085107Z" creationid="pingfangx" creationdate="20191014T085107Z">
        <seg>首先调用线程的 &lt;c0&gt;checkAccess&lt;/c0&gt; 方法，且不带任何参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First the characters in the substring are removed and then the specified &lt;c3&gt;String&lt;/c3&gt; is inserted at &lt;c4&gt;start&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041339Z" creationid="pingfangx" creationdate="20191014T041339Z">
        <seg>先将子字符串中的字符移除，然后将指定的 &lt;c3&gt;String&lt;/c3&gt; 插入 &lt;c4&gt;start&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, if the class of this object does not implement the interface &lt;c2&gt;Cloneable&lt;/c2&gt;, then a &lt;c3&gt;CloneNotSupportedException&lt;/c3&gt; is thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135539Z" creationid="pingfangx" creationdate="20191014T135539Z">
        <seg>首先，如果此对象的类不能实现接口 &lt;c2&gt;Cloneable&lt;/c2&gt;，则会抛出 &lt;c3&gt;CloneNotSupportedException&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, if there is a security manager, its &lt;c0&gt;checkPermission&lt;/c0&gt; method is called with a &lt;c1&gt;ReflectPermission("suppressAccessChecks")&lt;/c1&gt; permission.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090707Z" creationid="pingfangx" creationdate="20191015T090707Z">
        <seg>首先，如果存在安全管理器，则在 &lt;c0&gt;ReflectPermission("suppressAccessChecks")&lt;/c0&gt; 权限下调用 &lt;c1&gt;checkPermission&lt;/c1&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Five classes aid common special-purpose synchronization idioms.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111532Z" creationid="pingfangx" creationdate="20191025T111532Z">
        <seg>五个类可协助实现常见的专用同步语句。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Five implementations in &lt;c0&gt;java.util.concurrent&lt;/c0&gt; support the extended &lt;c1&gt;&lt;a2&gt;BlockingQueue&lt;/a2&gt;&lt;/c1&gt; interface, that defines blocking versions of put and take: &lt;c3&gt;&lt;a4&gt;LinkedBlockingQueue&lt;/a4&gt;&lt;/c3&gt;, &lt;c5&gt;&lt;a6&gt;ArrayBlockingQueue&lt;/a6&gt;&lt;/c5&gt;, &lt;c7&gt;&lt;a8&gt;SynchronousQueue&lt;/a8&gt;&lt;/c7&gt;, &lt;c9&gt;&lt;a10&gt;PriorityBlockingQueue&lt;/a10&gt;&lt;/c9&gt;, and &lt;c11&gt;&lt;a12&gt;DelayQueue&lt;/a12&gt;&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111230Z" creationid="pingfangx" creationdate="20191025T111011Z">
        <seg>&lt;c0&gt;java.util.concurrent&lt;/c0&gt; 中的五个实现都支持扩展的 &lt;c1&gt;&lt;a2&gt;BlockingQueue&lt;/a2&gt;&lt;/c1&gt; 接口，该接口定义了 put 和 take 的阻塞版本：&lt;c3&gt;&lt;a4&gt;LinkedBlockingQueue&lt;/a4&gt;&lt;/c3&gt;、&lt;c5&gt;&lt;a6&gt;ArrayBlockingQueue&lt;/a6&gt;&lt;/c5&gt;、&lt;c7&gt;&lt;a8&gt;SynchronousQueue&lt;/a8&gt;&lt;/c7&gt;、&lt;c9&gt;&lt;a10&gt;PriorityBlockingQueue&lt;/a10&gt;&lt;/c9&gt; 和 &lt;c11&gt;&lt;a12&gt;DelayQueue&lt;/a12&gt;&lt;/c11&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FomattableFlags are passed to the &lt;c0&gt;&lt;a1&gt;Formattable.formatTo()&lt;/a1&gt;&lt;/c0&gt; method and modify the output format for &lt;a2&gt;Formattables&lt;/a2&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045620Z" creationid="pingfangx" creationdate="20191012T045620Z">
        <seg>将 FomattableFlags 传递给 &lt;c0&gt;&lt;a1&gt;Formattable.formatTo()&lt;/a1&gt;&lt;/c0&gt; 方法，并修改 &lt;a2&gt;Formattables&lt;/a2&gt;&lt;/a3&gt; 的输出格式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a given floating-point format, an ulp of a specific real number value is the distance between the two floating-point values bracketing that numerical value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151235Z" creationid="pingfangx" creationdate="20191013T151235Z">
        <seg>对于给定的浮点格式，特定实数值的 ulp 是包括该数值的两个浮点值的差。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, &lt;i5&gt;The Java Language Specification&lt;/i5&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T021158Z" creationid="pingfangx" creationdate="20191014T021158Z">
        <seg>有关字符串串联和转换的更多信息，请参阅 Gosling、Joy 和 Steele 合著的 &lt;i5&gt;The Java Language Specification&lt;/i5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any non-null reference value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x.equals(null)&lt;/c1&gt; should return &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130306Z" creationid="pingfangx" creationdate="20191014T130306Z">
        <seg>对于任何非空引用值 &lt;c0&gt;x&lt;/c0&gt;，&lt;c1&gt;x.equals(null)&lt;/c1&gt; 都应返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any set of member methods of the specified interfaces that have the same signature:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113642Z" creationid="pingfangx" creationdate="20191015T113642Z">
        <seg>对于有相同签名的指定接口中任何成员方法集：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For conversion from TreeNodes to plain nodes</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100106Z" creationid="pingfangx" creationdate="20191026T100106Z">
        <seg>用于从 TreeNodes 转换为普通节点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For details and restrictions, see the &lt;a1&gt; Content License&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114410Z" creationid="pingfangx" creationdate="20191011T114410Z">
        <seg>For details and restrictions, see the &lt;a1&gt; Content License&lt;/a1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For each lower bound B :</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T085939Z" creationid="pingfangx" creationdate="20191015T085939Z">
        <seg>对于每个下边界 B： </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For each pair of threads that successfully exchange objects via an &lt;c0&gt;Exchanger&lt;/c0&gt;, actions prior to the &lt;c1&gt;exchange()&lt;/c1&gt; in each thread &lt;i2&gt;happen-before&lt;/i2&gt; those subsequent to the corresponding &lt;c3&gt;exchange()&lt;/c3&gt; in another thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113651Z" creationid="pingfangx" creationdate="20191025T113651Z">
        <seg>对于通过 &lt;c0&gt;Exchanger&lt;/c0&gt; 成功交换对象的每个线程对，每个线程中 &lt;c1&gt;exchange()&lt;/c1&gt; 之前的操作 &lt;i2&gt;happen-before&lt;/i2&gt; 另一线程中对应 &lt;c3&gt;exchange()&lt;/c3&gt; 后续的操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For each upper bound B:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082217Z" creationid="pingfangx" creationdate="20191015T082217Z">
        <seg>对于每个上边界 B：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For every nonnegative index &lt;i0&gt;k&lt;/i0&gt; less than &lt;c1&gt;newLength&lt;/c1&gt;, the character at index &lt;i2&gt;k&lt;/i2&gt; in the new character sequence is the same as the character at index &lt;i3&gt;k&lt;/i3&gt; in the old sequence if &lt;i4&gt;k&lt;/i4&gt; is less than the length of the old character sequence; otherwise, it is the null character &lt;c5&gt;'\u0000'&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041602Z" creationid="pingfangx" creationdate="20191014T041358Z">
        <seg>对于每个小于 &lt;c1&gt;newLength&lt;/c1&gt; 的非负索引 &lt;i0&gt;k&lt;/i0&gt;，如果 &lt;i4&gt;k&lt;/i4&gt; 小于原字符序列的长度，则新字符序列索引 &lt;i2&gt;k&lt;/i2&gt; 处的字符与原字符序列索引 &lt;i3&gt;k&lt;/i3&gt; 处的字符相同；否则，新字符序列索引 k 处的字符将是 null 字符 &lt;c5&gt;'\u0000'&lt;/c5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For exact results large in magnitude, one of the endpoints of the bracket may be infinite.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151322Z" creationid="pingfangx" creationdate="20191013T151322Z">
        <seg>对于值很大的准确结果，括号的一端可以是无穷大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;c0&gt;java.util.Hashtable&lt;/c0&gt; and &lt;c1&gt;Collections.synchronizedMap(new HashMap())&lt;/c1&gt; are synchronized.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112530Z" creationid="pingfangx" creationdate="20191025T112129Z">
        <seg>例如，&lt;c0&gt;java.util.Hashtable&lt;/c0&gt; 和 &lt;c1&gt;Collections.synchronizedMap(new HashMap())&lt;/c1&gt; 是同步的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;c0&gt;Runnable&lt;/c0&gt; is implemented by class &lt;c1&gt;Thread&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154649Z" creationid="pingfangx" creationdate="20191013T154649Z">
        <seg>例如，&lt;c0&gt;Thread&lt;/c0&gt; 类实现了 &lt;c1&gt;Runnable&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;c1&gt;Character.isLetter(0x2F81A)&lt;/c1&gt; returns &lt;c2&gt;true&lt;/c2&gt; because the code point value represents a letter (a CJK ideograph).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143747Z" creationid="pingfangx" creationdate="20191013T143747Z">
        <seg>例如，&lt;c1&gt;Character.isLetter(0x2F81A)&lt;/c1&gt; 返回 &lt;c2&gt;true&lt;/c2&gt;，因为代码点值表示一个字母（一个 CJK 象形文字）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;c2&gt;Character.isLetter('\uD840')&lt;/c2&gt; returns &lt;c3&gt;false&lt;/c3&gt;, even though this specific value if followed by any low-surrogate value in a string would represent a letter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143737Z" creationid="pingfangx" creationdate="20191013T143737Z">
        <seg>例如，&lt;c2&gt;Character.isLetter('\uD840')&lt;/c2&gt; 返回 &lt;c3&gt;false&lt;/c3&gt;，即使是特定值，如果在字符串的后面跟着任何低代理项值，那么它将表示一个字母。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a hashtable that uses weak references to implement weak keys could poll its reference queue each time the table is accessed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090255Z" creationid="pingfangx" creationdate="20191012T090255Z">
        <seg>例如，使用弱引用来实现弱键的哈希表能在每次访问表时轮询其引用队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a thread that computes primes larger than a stated value could be written as follows:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081107Z" creationid="pingfangx" creationdate="20191014T081107Z">
        <seg>例如，计算大于某一规定值的质数的线程可以写成：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a thread that has called &lt;t0&gt;Object.wait()&lt;/t0&gt; on an object is waiting for another thread to call &lt;t1&gt;Object.notify()&lt;/t1&gt; or &lt;t2&gt;Object.notifyAll()&lt;/t2&gt; on that object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104608Z" creationid="pingfangx" creationdate="20191014T104608Z">
        <seg>例如，已经在某一对象上调用了 &lt;t0&gt;Object.wait()&lt;/t0&gt; 的线程正等待另一个线程，以便在该对象上调用 &lt;t1&gt;Object.notify()&lt;/t1&gt; 或 &lt;t2&gt;Object.notifyAll()&lt;/t2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an application could create a network class loader to download class files from a server.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072303Z" creationid="pingfangx" creationdate="20191014T072303Z">
        <seg>例如，应用程序可以创建一个网络类加载器，从服务器中下载类文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, classes &lt;c8&gt;AtomicLong&lt;/c8&gt; and &lt;c9&gt;AtomicInteger&lt;/c9&gt; provide atomic increment methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120807Z" creationid="pingfangx" creationdate="20191025T120807Z">
        <seg>例如，类 &lt;c8&gt;AtomicLong&lt;/c8&gt; 和 &lt;c9&gt;AtomicInteger&lt;/c9&gt; 提供了原子增量方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, given some transformation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121028Z" creationid="pingfangx" creationdate="20191025T121028Z">
        <seg>例如，给定一些转换</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, here is a subclass that adds a simple pause/resume feature:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125901Z" creationid="pingfangx" creationdate="20191025T125901Z">
        <seg>例如，下面是一个添加了简单的暂停/恢复功能的子类：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if &lt;c0&gt;z&lt;/c0&gt; refers to a string buffer object whose current contents are "&lt;c1&gt;start&lt;/c1&gt;", then the method call &lt;c2&gt;z.append("le")&lt;/c2&gt; would cause the string buffer to contain "&lt;c3&gt;startle&lt;/c3&gt;", whereas &lt;c4&gt;z.insert(4, "le")&lt;/c4&gt; would alter the string buffer to contain "&lt;c5&gt;starlet&lt;/c5&gt;".</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063920Z" creationid="pingfangx" creationdate="20191014T063920Z">
        <seg>例如，如果 &lt;c0&gt;z&lt;/c0&gt; 引用一个当前内容为 "&lt;c1&gt;start&lt;/c1&gt;" 的字符串缓冲区对象，则此方法调用 &lt;c2&gt;z.append("le")&lt;/c2&gt; 会使字符串缓冲区包含 "&lt;c3&gt;startle&lt;/c3&gt;"，而 &lt;c4&gt;z.insert(4, "le")&lt;/c4&gt; 将更改字符串缓冲区，使之包含 "&lt;c5&gt;starlet&lt;/c5&gt;"。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if &lt;c0&gt;z&lt;/c0&gt; refers to a string builder object whose current contents are "&lt;c1&gt;start&lt;/c1&gt;", then the method call &lt;c2&gt;z.append("le")&lt;/c2&gt; would cause the string builder to contain "&lt;c3&gt;startle&lt;/c3&gt;", whereas &lt;c4&gt;z.insert(4, "le")&lt;/c4&gt; would alter the string builder to contain "&lt;c5&gt;starlet&lt;/c5&gt;".</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030418Z" creationid="pingfangx" creationdate="20191014T030418Z">
        <seg>例如，如果 &lt;c0&gt;z&lt;/c0&gt; 引用一个当前内容为“&lt;c1&gt;start&lt;/c1&gt;”的字符串生成器对象，则该方法调用 &lt;c2&gt;z.append("le")&lt;/c2&gt; 将使字符串生成器包含“&lt;c3&gt;startle&lt;/c3&gt;”，而 &lt;c4&gt;z.insert(4, "le")&lt;/c4&gt; 将更改字符串生成器，使之包含“&lt;c5&gt;starlet&lt;/c5&gt;”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if one adds two keys &lt;t0&gt;a&lt;/t0&gt; and &lt;t1&gt;b&lt;/t1&gt; such that &lt;t2&gt;(!a.equals(b) &amp;&amp; a.compareTo(b) == 0)&lt;/t2&gt; to a sorted set that does not use an explicit comparator, the second &lt;t3&gt;add&lt;/t3&gt; operation returns false (and the size of the sorted set does not increase) because &lt;t4&gt;a&lt;/t4&gt; and &lt;t5&gt;b&lt;/t5&gt; are equivalent from the sorted set's perspective.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101859Z" creationid="pingfangx" creationdate="20191014T101859Z">
        <seg>例如，如果将两个键 &lt;t0&gt;a&lt;/t0&gt; 和 &lt;t1&gt;b&lt;/t1&gt; 添加到没有使用显式比较器的有序集合中，使 &lt;t2&gt;(!a.equals(b) &amp;&amp; a.compareTo(b) == 0)&lt;/t2&gt;，那么第二个 &lt;t3&gt;add&lt;/t3&gt; 操作将返回 false（有序集合的大小没有增加），因为从有序集合的角度来看，&lt;t4&gt;a&lt;/t4&gt; 和 &lt;t5&gt;b&lt;/t5&gt; 是相等的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if the number of type arguments to a parameterized type is wrong.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111018Z" creationid="pingfangx" creationdate="20191015T111018Z">
        <seg>例如，如果参数化类型的类型参数错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if this type is &lt;c1&gt;O&lt;T&gt;.I&lt;S&gt;&lt;/c1&gt;, return a representation of &lt;c2&gt;O&lt;T&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071743Z" creationid="pingfangx" creationdate="20191015T071743Z">
        <seg>例如，如果此类型为 &lt;c1&gt;O&lt;T&gt;.I&lt;S&gt;&lt;/c1&gt;，则返回 &lt;c2&gt;O&lt;T&gt;&lt;/c2&gt; 的表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, it is common for each conceptual argument to be an element in this list, but there are operating systems where programs are expected to tokenize command line strings themselves - on such a system a Java implementation might require commands to contain exactly two elements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075758Z" creationid="pingfangx" creationdate="20191014T075758Z">
        <seg>例如，每一个总体变量，通常都要成为此列表中的元素，但有一些操作系统，希望程序能自己标记命令行字符串——在这种系统中，Java 实现可能需要命令确切地包含这两个元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, on UNIX systems, the virtual machine loads classes from the directory defined by the &lt;t0&gt;CLASSPATH&lt;/t0&gt; environment variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072225Z" creationid="pingfangx" creationdate="20191014T072225Z">
        <seg>例如，在 UNIX 系统中，虚拟机从 &lt;t0&gt;CLASSPATH&lt;/t0&gt; 环境变量定义的目录中加载类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, reversing "\uDC00\uD800" produces "\uD800\uDC00" which is a valid surrogate pair.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063604Z" creationid="pingfangx" creationdate="20191014T063604Z">
        <seg>例如，反转 "\\uDC00\\uD800" 将生成有效的代理项对 "\\uD800\\uDC00"。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, setting the command attribute to an empty list will not throw an exception unless &lt;c4&gt;&lt;a5&gt;start()&lt;/a5&gt;&lt;/c4&gt; is invoked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075844Z" creationid="pingfangx" creationdate="20191014T075844Z">
        <seg>例如，将命令属性设置为一个空列表将不会抛出异常，除非包含了 &lt;c4&gt;&lt;a5&gt;start()&lt;/a5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose a persistent collection conforms to the &lt;c0&gt;&lt;a1&gt;Collection&lt;/a1&gt;&lt;/c0&gt; interface, and that its persistence is implemented atop &lt;c2&gt;java.io&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113328Z" creationid="pingfangx" creationdate="20191013T113328Z">
        <seg>例如，假定持久集合符合 &lt;c0&gt;&lt;a1&gt;Collection&lt;/a1&gt;&lt;/c0&gt; 接口，而其持久性在 &lt;c2&gt;java.io&lt;/c2&gt; 的基础上实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the VM may limit the number of interfaces that a class may implement to 65535; in that case, the size of the &lt;c0&gt;interfaces&lt;/c0&gt; array must not exceed 65535.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113706Z" creationid="pingfangx" creationdate="20191015T113706Z">
        <seg>例如，虚拟机可以限制某一类实现至多 65535 的接口数；在这种情况下，&lt;c0&gt;interfaces&lt;/c0&gt; 数组的大小必须不超过 65535。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the class below generates unique identifiers local to each thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095859Z" creationid="pingfangx" creationdate="20191014T095859Z">
        <seg>例如，以下类生成对每个线程唯一的局部标识符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140120Z" creationid="pingfangx" creationdate="20191014T140120Z">
        <seg>例如，表示输入/输出连接的对象的 finalize 方法可执行显式 I/O 事务，以便在永久丢弃对象之前中断连接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following meta-annotation is illegal:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152308Z" creationid="pingfangx" creationdate="20191014T152308Z">
        <seg>例如，以下元注释是非法的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, there is no atomic class for representing &lt;c5&gt;byte&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122307Z" creationid="pingfangx" creationdate="20191025T122307Z">
        <seg>例如，没有表示 &lt;c5&gt;byte&lt;/c5&gt; 的原子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this bit might be used inside a data structure to mean that the object being referenced has logically been deleted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122154Z" creationid="pingfangx" creationdate="20191025T122154Z">
        <seg>例如，可以在数据结构内部使用此位，这意味着引用的对象在逻辑上已被删除。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this meta-annotation indicates that the declared type is itself a meta-annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152256Z" creationid="pingfangx" creationdate="20191014T152256Z">
        <seg>例如，此元注释指示该声明类型是其自身，即元注释类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T035854Z" creationid="pingfangx" creationdate="20191013T035854Z">
        <seg>例如：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For further documentation, please see:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152025Z" creationid="pingfangx" creationdate="20191011T152025Z">
        <seg>有关进一步文档，请参阅：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance if it is set to &lt;c1&gt;myapp.protocols&lt;/c1&gt;, then the URL code will try, in the case of http, first to load &lt;c2&gt;myapp.protocols.http.Handler&lt;/c2&gt;, then, if this fails, &lt;c3&gt;http.Handler&lt;/c3&gt; from the default location.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082906Z" creationid="pingfangx" creationdate="20191011T082906Z">
        <seg>例如，如果将其设置为 &lt;c1&gt;myapp.protocols&lt;/c1&gt;，则 URL 代码将首先尝试（对于 http 而言）加载 &lt;c2&gt;myapp.protocols.http.Handler&lt;/c2&gt;，然后，如果失败，则尝试从默认位置加载 &lt;c3&gt;http.Handler&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on Unicode terminology, refer to the &lt;a4&gt;Unicode Glossary&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143803Z" creationid="pingfangx" creationdate="20191013T143803Z">
        <seg>有关 Unicode 技术的详细信息，请参阅 &lt;a4&gt;Unicode Glossary&lt;/a4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see &lt;a1&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082626Z" creationid="pingfangx" creationdate="20191014T082626Z">
        <seg>有关更多信息，请参阅 &lt;a1&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see &lt;a2&gt; Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081940Z" creationid="pingfangx" creationdate="20191014T081940Z">
        <seg>有关更多信息，请参阅 &lt;a2&gt; Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see &lt;a2&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082120Z" creationid="pingfangx" creationdate="20191014T082120Z">
        <seg>有关更多信息，请参阅 &lt;a2&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see &lt;a3&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082713Z" creationid="pingfangx" creationdate="20191014T082713Z">
        <seg>有关更多信息，请参阅 &lt;a3&gt;Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For objects of type &lt;c0&gt;Class,&lt;/c0&gt; by executing a synchronized static method of that class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132916Z" creationid="pingfangx" creationdate="20191014T132916Z">
        <seg>对于 &lt;c0&gt;Class&lt;/c0&gt; 类型的对象，可以通过执行该类的同步静态方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For overviews, tutorials, examples, guides, and tool documentation, please see:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T085358Z" creationid="pingfangx" creationdate="20191010T085358Z">
        <seg>有关概述、教程、示例、指南和工具文档的信息，请参阅：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the mathematically inclined, the &lt;i0&gt;relation&lt;/i0&gt; that defines the natural ordering on a given class C is:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101931Z" creationid="pingfangx" creationdate="20191014T101931Z">
        <seg>从数学上讲，定义给定类 C 上自然排序的&lt;i0&gt;关系式&lt;/i0&gt; 如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the purposes of compile-time checking of exceptions, &lt;c3&gt;Throwable&lt;/c3&gt; and any subclass of &lt;c4&gt;Throwable&lt;/c4&gt; that is not also a subclass of either &lt;c5&gt;&lt;a6&gt;RuntimeException&lt;/a6&gt;&lt;/c5&gt; or &lt;c7&gt;&lt;a8&gt;Error&lt;/a8&gt;&lt;/c7&gt; are regarded as checked exceptions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114204Z" creationid="pingfangx" creationdate="20191013T114204Z">
        <seg>为编译时异常的检查的目的，&lt;c3&gt;Throwable&lt;/c3&gt; 和 &lt;c4&gt;Throwable&lt;/c4&gt; 的任何子类，只要不是 &lt;c5&gt;&lt;a6&gt;RuntimeException&lt;/a6&gt;&lt;/c5&gt; 或 &lt;c7&gt;&lt;a8&gt;Error&lt;/a8&gt;&lt;/c7&gt; 的子类，都被视为检查型异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this reason, attempts to modify the map may fail with &lt;c0&gt;&lt;a1&gt;UnsupportedOperationException&lt;/a1&gt;&lt;/c0&gt; or &lt;c2&gt;&lt;a3&gt;IllegalArgumentException&lt;/a3&gt;&lt;/c2&gt; if the modification is not permitted by the operating system.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080051Z" creationid="pingfangx" creationdate="20191014T080051Z">
        <seg>出于此原因，如果不允许操作系统修改的话，试图修改映射可能失败，并抛出 &lt;c0&gt;&lt;a1&gt;UnsupportedOperationException&lt;/a1&gt;&lt;/c0&gt; 或 &lt;c2&gt;&lt;a3&gt;IllegalArgumentException&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For treeifyBin</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100130Z" creationid="pingfangx" creationdate="20191026T100130Z">
        <seg>用于 treeifyBin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Forcibly terminates the currently running Java virtual machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153626Z" creationid="pingfangx" creationdate="20191013T153626Z">
        <seg>强行终止目前正在运行的 Java 虚拟机。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Formal parameter declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152419Z" creationid="pingfangx" creationdate="20191014T152419Z">
        <seg>形式参数的声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Forms tree of the nodes linked from this node.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100722Z" creationid="pingfangx" creationdate="20191026T100722Z">
        <seg>将从此节点链接的节点转为树形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Four predefined handler policies are provided:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125549Z" creationid="pingfangx" creationdate="20191025T125549Z">
        <seg>下面提供了四种预定义的处理程序策略：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Frequently it is necessary to represent a value of primitive type as if it were an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T061440Z" creationid="pingfangx" creationdate="20191012T061440Z">
        <seg>把基本类型的值当成一个对象来表示通常很有必要。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From that URL, you can either get the &lt;c4&gt;&lt;a5&gt;URLConnection&lt;/a5&gt;&lt;/c4&gt; for fine control, or get directly the InputStream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082828Z" creationid="pingfangx" creationdate="20191011T082828Z">
        <seg>从该 URL 可以获取 &lt;c4&gt;&lt;a5&gt;URLConnection&lt;/a5&gt;&lt;/c4&gt; 以进行良好控制，也可以直接获取 InputStream。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Full name</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114421Z" creationid="pingfangx" creationdate="20191011T114421Z">
        <seg>Full name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further, doing so would tie the API of the upper layer to the details of its implementation, assuming the lower layer's exception was a checked exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113303Z" creationid="pingfangx" creationdate="20191013T113303Z">
        <seg>此外，这样做将高层 API 与其实现细节关联起来，假定低层异常是经过检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further, the behavior of this call was never specified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093155Z" creationid="pingfangx" creationdate="20191014T093155Z">
        <seg>更进一步地说，此调用的行为从不被指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further, the results of this call were never well-defined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081612Z" creationid="pingfangx" creationdate="20191014T081612Z">
        <seg>此外，该调用的结果从来都不是意义明确的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further, those subclasses that might likely have a cause associated with them should have two more constructors, one that takes a &lt;c2&gt;Throwable&lt;/c2&gt; (the cause), and one that takes a &lt;c3&gt;String&lt;/c3&gt; (the detail message) and a &lt;c4&gt;Throwable&lt;/c4&gt; (the cause).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114004Z" creationid="pingfangx" creationdate="20191013T114004Z">
        <seg>此外，这些子类很可能有与其相关联的 cause，因此也应有两个构造方法，一个带 &lt;c2&gt;Throwable&lt;/c2&gt; (cause)，一个带 &lt;c3&gt;String&lt;/c3&gt;（详细消息）和 &lt;c4&gt;Throwable&lt;/c4&gt; (cause)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Games</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114426Z" creationid="pingfangx" creationdate="20191011T114426Z">
        <seg>Games</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Cc" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143921Z" creationid="pingfangx" creationdate="20191013T143921Z">
        <seg>Unicode 规范中的常规类别“Cc”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Cf" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144032Z" creationid="pingfangx" creationdate="20191013T144032Z">
        <seg>Unicode 规范中的常规类别“Cf”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Cn" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144925Z" creationid="pingfangx" creationdate="20191013T144925Z">
        <seg>Unicode 规范中的常规类别“Cn”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Co" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144857Z" creationid="pingfangx" creationdate="20191013T144857Z">
        <seg>Unicode 规范中的常规类别“Co”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Cs" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144923Z" creationid="pingfangx" creationdate="20191013T144923Z">
        <seg>Unicode 规范中的常规类别“Cs”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Ll" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144035Z" creationid="pingfangx" creationdate="20191013T144035Z">
        <seg>Unicode 规范中的常规类别“Ll”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Lm" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144846Z" creationid="pingfangx" creationdate="20191013T144846Z">
        <seg>Unicode 规范中的常规类别“Lm”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Lo" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144850Z" creationid="pingfangx" creationdate="20191013T144850Z">
        <seg>Unicode 规范中的常规类别“Lo”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Lt" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144923Z" creationid="pingfangx" creationdate="20191013T144923Z">
        <seg>Unicode 规范中的常规类别“Lt”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Lu" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144926Z" creationid="pingfangx" creationdate="20191013T144926Z">
        <seg>Unicode 规范中的常规类别“Lu”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Mc" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143918Z" creationid="pingfangx" creationdate="20191013T143918Z">
        <seg>Unicode 规范中的常规类别“Mc”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Me" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143959Z" creationid="pingfangx" creationdate="20191013T143959Z">
        <seg>Unicode 规范中的常规类别“Me”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Mn" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144849Z" creationid="pingfangx" creationdate="20191013T144849Z">
        <seg>Unicode 规范中的常规类别“Mn”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Nd" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143924Z" creationid="pingfangx" creationdate="20191013T143924Z">
        <seg>Unicode 规范中的常规类别“Nd”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Nl" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144034Z" creationid="pingfangx" creationdate="20191013T144034Z">
        <seg>Unicode 规范中的常规类别“Nl”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "No" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144851Z" creationid="pingfangx" creationdate="20191013T144851Z">
        <seg>Unicode 规范中的常规类别“No”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Pc" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143919Z" creationid="pingfangx" creationdate="20191013T143919Z">
        <seg>Unicode 规范中的常规类别“Pc”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Pd" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143923Z" creationid="pingfangx" creationdate="20191013T143923Z">
        <seg>Unicode 规范中的常规类别“Pd”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Pe" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144000Z" creationid="pingfangx" creationdate="20191013T144000Z">
        <seg>Unicode 规范中的常规类别“Pe”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Pf" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144003Z" creationid="pingfangx" creationdate="20191013T144003Z">
        <seg>Unicode 规范中的常规类别“Pf”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Pi" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144032Z" creationid="pingfangx" creationdate="20191013T144032Z">
        <seg>Unicode 规范中的常规类别“Pi”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Po" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144853Z" creationid="pingfangx" creationdate="20191013T144853Z">
        <seg>Unicode 规范中的常规类别“Po”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Ps" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144922Z" creationid="pingfangx" creationdate="20191013T144922Z">
        <seg>Unicode 规范中的常规类别“Ps”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Sc" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143922Z" creationid="pingfangx" creationdate="20191013T143922Z">
        <seg>Unicode 规范中的常规类别“Sc”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Sk" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144848Z" creationid="pingfangx" creationdate="20191013T144848Z">
        <seg>Unicode 规范中的常规类别“Sk”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Sm" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144036Z" creationid="pingfangx" creationdate="20191013T144036Z">
        <seg>Unicode 规范中的常规类别“Sm”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "So" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144854Z" creationid="pingfangx" creationdate="20191013T144854Z">
        <seg>Unicode 规范中的常规类别“So”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Zl" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144035Z" creationid="pingfangx" creationdate="20191013T144035Z">
        <seg>Unicode 规范中的常规类别“Zl”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Zp" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144855Z" creationid="pingfangx" creationdate="20191013T144855Z">
        <seg>Unicode 规范中的常规类别“Zp”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General category "Zs" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144921Z" creationid="pingfangx" creationdate="20191013T144921Z">
        <seg>Unicode 规范中的常规类别“Zs”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally speaking, any class that implements the &lt;t2&gt;Comparable&lt;/t2&gt; interface and violates this condition should clearly indicate this fact.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103155Z" creationid="pingfangx" creationdate="20191014T103155Z">
        <seg>一般来说，任何实现 &lt;t2&gt;Comparable&lt;/t2&gt; 接口和违背此条件的类都应该清楚地指出这一事实。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally, this corresponds to the &lt;c0&gt;SourceFile&lt;/c0&gt; attribute of the relevant &lt;c1&gt;class&lt;/c1&gt; file (as per &lt;i2&gt;The Java Virtual Machine Specification&lt;/i2&gt;, Section 4.7.7).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095355Z" creationid="pingfangx" creationdate="20191014T095355Z">
        <seg>通常，这对应于相关 &lt;c0&gt;class&lt;/c0&gt; 文件的 &lt;c1&gt;SourceFile&lt;/c1&gt; 属性（根据 &lt;i2&gt;The Java Virtual Machine Specification&lt;/i2&gt; 中的第 4.7.7 小节）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally, this is derived from the &lt;c0&gt;LineNumberTable&lt;/c0&gt; attribute of the relevant &lt;c1&gt;class&lt;/c1&gt; file (as per &lt;i2&gt;The Java Virtual Machine Specification&lt;/i2&gt;, Section 4.7.8).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095316Z" creationid="pingfangx" creationdate="20191014T095316Z">
        <seg>通常，该方法派生自相关 &lt;c0&gt;class&lt;/c0&gt; 文件的 &lt;c1&gt;LineNumberTable&lt;/c1&gt; 属性（根据 &lt;i2&gt;The Java Virtual Machine Specification&lt;/i2&gt; 中的第 4.7.8 小节）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get news &amp; tips</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083551Z" creationid="pingfangx" creationdate="20191011T083551Z">
        <seg>获取新闻和提示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get the thrown target exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110932Z" creationid="pingfangx" creationdate="20191015T110932Z">
        <seg>获取抛出的目标异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get the value of the &lt;c0&gt;accessible&lt;/c0&gt; flag for this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090612Z" creationid="pingfangx" creationdate="20191015T090612Z">
        <seg>获取此对象的 &lt;c0&gt;accessible&lt;/c0&gt; 标志的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get/put, compact, views; allocate, wrap</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102735Z" creationid="pingfangx" creationdate="20191011T102735Z">
        <seg>Get/put，压缩，查看；分配，包装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get/put, compact; allocate, wrap</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102741Z" creationid="pingfangx" creationdate="20191011T102741Z">
        <seg>Get/put，压缩；分配，包装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the package for this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101332Z" creationid="pingfangx" creationdate="20191013T101332Z">
        <seg>获取此类的包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the signers of this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101411Z" creationid="pingfangx" creationdate="20191013T101411Z">
        <seg>获取此类的标记。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the system property indicated by the specified key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154240Z" creationid="pingfangx" creationdate="20191013T154240Z">
        <seg>获取用指定键描述的系统属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance &lt;c0&gt;boolean&lt;/c0&gt; field.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104513Z" creationid="pingfangx" creationdate="20191015T104513Z">
        <seg>获取一个静态或实例 &lt;c0&gt;boolean&lt;/c0&gt; 字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance &lt;c0&gt;byte&lt;/c0&gt; field.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104515Z" creationid="pingfangx" creationdate="20191015T104515Z">
        <seg>获取一个静态或实例 &lt;c0&gt;byte&lt;/c0&gt; 字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance field of type &lt;c0&gt;char&lt;/c0&gt; or of another primitive type convertible to type &lt;c1&gt;char&lt;/c1&gt; via a widening conversion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104524Z" creationid="pingfangx" creationdate="20191015T104524Z">
        <seg>获取 &lt;c0&gt;char&lt;/c0&gt; 类型或另一个通过扩展转换可以转换为 &lt;c1&gt;char&lt;/c1&gt; 类型的基本类型的静态或实例字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance field of type &lt;c0&gt;double&lt;/c0&gt; or of another primitive type convertible to type &lt;c1&gt;double&lt;/c1&gt; via a widening conversion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104530Z" creationid="pingfangx" creationdate="20191015T104530Z">
        <seg>获取 &lt;c0&gt;double&lt;/c0&gt; 类型或另一个通过扩展转换可以转换为 &lt;c1&gt;double&lt;/c1&gt; 类型的基本类型的静态或实例字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance field of type &lt;c0&gt;float&lt;/c0&gt; or of another primitive type convertible to type &lt;c1&gt;float&lt;/c1&gt; via a widening conversion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104532Z" creationid="pingfangx" creationdate="20191015T104532Z">
        <seg>获取 &lt;c0&gt;float&lt;/c0&gt; 类型或另一个通过扩展转换可以转换为 &lt;c1&gt;float&lt;/c1&gt; 类型的基本类型的静态或实例字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance field of type &lt;c0&gt;int&lt;/c0&gt; or of another primitive type convertible to type &lt;c1&gt;int&lt;/c1&gt; via a widening conversion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104540Z" creationid="pingfangx" creationdate="20191015T104540Z">
        <seg>获取 &lt;c0&gt;int&lt;/c0&gt; 类型或另一个通过扩展转换可以转换为 &lt;c1&gt;int&lt;/c1&gt; 类型的基本类型的静态或实例字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance field of type &lt;c0&gt;long&lt;/c0&gt; or of another primitive type convertible to type &lt;c1&gt;long&lt;/c1&gt; via a widening conversion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104541Z" creationid="pingfangx" creationdate="20191015T104541Z">
        <seg>获取 &lt;c0&gt;long&lt;/c0&gt; 类型或另一个通过扩展转换可以转换为 &lt;c1&gt;long&lt;/c1&gt; 类型的基本类型的静态或实例字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of a static or instance field of type &lt;c0&gt;short&lt;/c0&gt; or of another primitive type convertible to type &lt;c1&gt;short&lt;/c1&gt; via a widening conversion.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104545Z" creationid="pingfangx" creationdate="20191015T104545Z">
        <seg>获取 &lt;c0&gt;short&lt;/c0&gt; 类型或另一个通过扩展转换可以转换为 &lt;c1&gt;short&lt;/c1&gt; 类型的基本类型的静态或实例字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of the specified environment variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154303Z" creationid="pingfangx" creationdate="20191013T154303Z">
        <seg>获取指定的环境变量值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given a proxy instance &lt;c0&gt;proxy&lt;/c0&gt; and one of the interfaces implemented by its proxy class &lt;c1&gt;Foo&lt;/c1&gt;, the following expression will return true:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112637Z" creationid="pingfangx" creationdate="20191015T112637Z">
        <seg>提供代理实例 &lt;c0&gt;proxy&lt;/c0&gt; 和一个由其代理类 &lt;c1&gt;Foo&lt;/c1&gt; 实现的接口，以下表达式将返回 true：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given the &lt;a1&gt;binary name&lt;/a1&gt; of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071405Z" creationid="pingfangx" creationdate="20191014T071405Z">
        <seg>如果给定类的&lt;a1&gt;二进制名称&lt;/a1&gt;，那么类加载器会试图查找或生成构成类定义的数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Going from strongest to weakest, the different levels of reachability reflect the life cycle of an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090540Z" creationid="pingfangx" creationdate="20191012T090540Z">
        <seg>从最强到最弱，不同的可到达性级别反映了对象的生命周期。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash table and linked list implementation of the &lt;t0&gt;Map&lt;/t0&gt; interface, with predictable iteration order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045710Z" creationid="pingfangx" creationdate="20191012T045710Z">
        <seg>&lt;t0&gt;Map&lt;/t0&gt; 接口的哈希表和链接列表实现，具有可预知的迭代顺序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash table and linked list implementation of the &lt;t0&gt;Set&lt;/t0&gt; interface, with predictable iteration order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045713Z" creationid="pingfangx" creationdate="20191012T045713Z">
        <seg>具有可预知迭代顺序的 &lt;t0&gt;Set&lt;/t0&gt; 接口的哈希表和链接列表实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash table based implementation of the &lt;t0&gt;Map&lt;/t0&gt; interface, with &lt;e1&gt;weak keys&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050316Z" creationid="pingfangx" creationdate="20191012T050316Z">
        <seg>以 &lt;e1&gt;弱键&lt;/e1&gt; 实现的基于哈希表的 &lt;t0&gt;Map&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash table based implementation of the &lt;t0&gt;Map&lt;/t0&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045633Z" creationid="pingfangx" creationdate="20191012T045633Z">
        <seg>基于哈希表的 &lt;t0&gt;Map&lt;/t0&gt; 接口的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash table based implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T183514Z" creationid="pingfangx" creationdate="20191025T183435Z">
        <seg>Hash table based implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are brief descriptions of the main components.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T105044Z" creationid="pingfangx" creationdate="20191025T105044Z">
        <seg>下面简要描述主要的组件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are some more examples of how strings can be used:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T020951Z" creationid="pingfangx" creationdate="20191014T020951Z">
        <seg>下面给出了一些如何使用字符串的更多示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is an example that starts a process with a modified working directory and environment:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075855Z" creationid="pingfangx" creationdate="20191014T075855Z">
        <seg>下面是一个利用修改过的工作目录和环境启动进程的例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is an example:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082830Z" creationid="pingfangx" creationdate="20191011T082830Z">
        <seg>下面是一个示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, an attempt to queue a task will fail if no threads are immediately available to run it, so a new thread will be constructed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125013Z" creationid="pingfangx" creationdate="20191025T125013Z">
        <seg>在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>High level API</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081017Z" creationid="pingfangx" creationdate="20191011T081017Z">
        <seg>高级 API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the &lt;t0&gt;HashMap&lt;/t0&gt; class, including &lt;t1&gt;get&lt;/t1&gt; and &lt;t2&gt;put&lt;/t2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134447Z" creationid="pingfangx" creationdate="20191025T134447Z">
        <seg>加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 &lt;t0&gt;HashMap&lt;/t0&gt; 类的操作中，包括 &lt;t1&gt;get&lt;/t1&gt; 和 &lt;t2&gt;put&lt;/t2&gt; 操作，都反映了这一点）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Holds cached entrySet().</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083816Z" creationid="pingfangx" creationdate="20191026T083816Z">
        <seg>持有的缓存的 entrySet()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hook methods</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125712Z" creationid="pingfangx" creationdate="20191025T125712Z">
        <seg>钩子 (hook) 方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hooray!</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114420Z" creationid="pingfangx" creationdate="20191011T114420Z">
        <seg>Hooray!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However on some platforms, support may entail some form of internal locking.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120747Z" creationid="pingfangx" creationdate="20191025T120747Z">
        <seg>但是在某些平台上，该支持可能需要某种形式的内部锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, all instances representing a type variable must be equal() to each other.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082022Z" creationid="pingfangx" creationdate="20191015T082022Z">
        <seg>不过，表示类型变量的所有实例彼此必须相等 (equal())。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, an indefinite amount of time may elapse between a time-out being detected and a thread actually executing again after that time-out.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111416Z" creationid="pingfangx" creationdate="20191025T111416Z">
        <seg>但是，在检测超时与超时之后再次实际执行线程之间可能要经过不确定的时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, its subclasses still need to register themselves if they are parallel capable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072852Z" creationid="pingfangx" creationdate="20191014T072852Z">
        <seg>但是，如果其子类具有并行能力，则仍需要注册它们自己。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, programmers are urged to use the more convenient &lt;c0&gt;&lt;a1&gt;Executors&lt;/a1&gt;&lt;/c0&gt; factory methods &lt;c2&gt;&lt;a3&gt;newCachedThreadPool()&lt;/a3&gt;&lt;/c2&gt; (unbounded thread pool, with automatic thread reclamation), &lt;c4&gt;&lt;a5&gt;newFixedThreadPool(int)&lt;/a5&gt;&lt;/c4&gt; (fixed size thread pool) and &lt;c6&gt;&lt;a7&gt;newSingleThreadExecutor()&lt;/a7&gt;&lt;/c6&gt; (single background thread), that preconfigure settings for the most common usage scenarios.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123633Z" creationid="pingfangx" creationdate="20191025T123633Z">
        <seg>但是，强烈建议程序员使用较为方便的 &lt;c0&gt;&lt;a1&gt;Executors&lt;/a1&gt;&lt;/c0&gt; 工厂方法 &lt;c2&gt;&lt;a3&gt;newCachedThreadPool()&lt;/a3&gt;&lt;/c2&gt;（无界线程池，可以进行自动线程回收）、&lt;c4&gt;&lt;a5&gt;newFixedThreadPool(int)&lt;/a5&gt;&lt;/c4&gt;（固定大小线程池）和 &lt;c6&gt;&lt;a7&gt;newSingleThreadExecutor()&lt;/a7&gt;&lt;/c6&gt;（单个后台线程），它们均为大多数使用场景预定义了设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, since the vast majority of bins in normal use are not overpopulated, checking for existence of tree bins may be delayed in the course of table methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080242Z" creationid="pingfangx" creationdate="20191026T080242Z">
        <seg>然而，大多数情况下 bin 容量不会过大，检查树 bin 的存在可能会延时到 table 方法中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072232Z" creationid="pingfangx" creationdate="20191014T072232Z">
        <seg>然而，有些类可能并非源自一个文件；它们可能源自其他来源（如网络），也可能是由应用程序构造的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, sometimes (currently only upon Iterator.remove), the root might be elsewhere, but can be recovered following parent links (method TreeNode.root()).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081522Z" creationid="pingfangx" creationdate="20191026T081522Z">
        <seg>但是，有时（当前仅在 Iterator.remove 时）根可能在其他地方，但可以用父链接取得（方法 TreeNode.root()）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the method may be useful for updating counters and statistics when such updates are unrelated to the other happens-before orderings of a program.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122054Z" creationid="pingfangx" creationdate="20191025T122054Z">
        <seg>但是，在这样的更新与程序的其他 happen-before 排序不相关时，该方法可用于更新计数器和统计数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the method was never implemented.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081852Z" creationid="pingfangx" creationdate="20191014T081852Z">
        <seg>不过，该方法决不会被实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132423Z" creationid="pingfangx" creationdate="20191014T132423Z">
        <seg>但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>I/O&lt;/a0&gt; facility.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102050Z" creationid="pingfangx" creationdate="20191011T102050Z">
        <seg>I/O&lt;/a0&gt; 族。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ideally, under random hashCodes, the frequency of nodes in bins follows a Poisson distribution (http://en.wikipedia.org/wiki/Poisson_distribution) with a parameter of about 0.5 on average for the default resizing threshold of 0.75, although with a large variance because of resizing granularity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081040Z" creationid="pingfangx" creationdate="20191026T081040Z">
        <seg>对于默认的 resizing 阈值 0.75 ，bin 中节点的频率遵循泊松分布（http://en.wikipedia.org/wiki/Poisson_distribution），参数约为 0.5，尽管由于 resizing 粒度会具有很大的变动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identifies the set of all public members of a class or interface, including inherited members.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014850Z" creationid="pingfangx" creationdate="20191015T014850Z">
        <seg>标识类或接口的所有公共成员（包括继承成员）的集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identifies the set of declared members of a class or interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014842Z" creationid="pingfangx" creationdate="20191015T014842Z">
        <seg>标识类或接口的所有已声明成员的集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c0&gt;componentType&lt;/c0&gt; represents a non-array class or interface, the new array has &lt;c1&gt;dimensions.length&lt;/c1&gt; dimensions and &lt;c2&gt;componentType&lt;/c2&gt; as its component type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103728Z" creationid="pingfangx" creationdate="20191015T103728Z">
        <seg>如果 &lt;c0&gt;componentType&lt;/c0&gt; 表示一个非数组类或接口，则新数组具有 &lt;c1&gt;dimensions.length&lt;/c1&gt; 维度，并且将 &lt;c2&gt;componentType&lt;/c2&gt; 作为其组件类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c0&gt;s&lt;/c0&gt; is &lt;c1&gt;null&lt;/c1&gt;, then the four characters &lt;c2&gt;"null"&lt;/c2&gt; are appended.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064753Z" creationid="pingfangx" creationdate="20191014T064753Z">
        <seg>如果 &lt;c0&gt;s&lt;/c0&gt; 为 &lt;c1&gt;null&lt;/c1&gt;，则追加 4 个字符 &lt;c2&gt;"null"&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c0&gt;s&lt;/c0&gt; is &lt;c1&gt;null&lt;/c1&gt;, then the four characters &lt;c2&gt;"null"&lt;/c2&gt; are inserted into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041011Z" creationid="pingfangx" creationdate="20191014T041011Z">
        <seg>如果 &lt;c0&gt;s&lt;/c0&gt; 为 &lt;c1&gt;null&lt;/c1&gt;，则向此序列中插入 4 个字符 &lt;c2&gt;"null"&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c0&gt;s&lt;/c0&gt; is &lt;c1&gt;null&lt;/c1&gt;, then this method appends characters as if the s parameter was a sequence containing the four characters &lt;c2&gt;"null"&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035347Z" creationid="pingfangx" creationdate="20191014T035347Z">
        <seg>如果 &lt;c0&gt;s&lt;/c0&gt; 为 &lt;c1&gt;null&lt;/c1&gt;，则认为 s 参数包含 4 个字符 &lt;c2&gt;"null"&lt;/c2&gt;，并以此为根据添加字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c0&gt;s&lt;/c0&gt; is &lt;c1&gt;null&lt;/c1&gt;, then this method inserts characters as if the s parameter was a sequence containing the four characters &lt;c2&gt;"null"&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063058Z" creationid="pingfangx" creationdate="20191014T063058Z">
        <seg>如果 &lt;c0&gt;s&lt;/c0&gt; 为 &lt;c1&gt;null&lt;/c1&gt;，则认为 s 参数包含 4 个字符 &lt;c2&gt;"null"&lt;/c2&gt;，并以此为根据插入字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c0&gt;timeout&lt;/c0&gt; is zero, however, then real time is not taken into consideration and the thread simply waits until notified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133835Z" creationid="pingfangx" creationdate="20191014T133835Z">
        <seg>但是，如果 &lt;c0&gt;timeout&lt;/c0&gt; 为零，则不考虑实际时间，在获得通知前该线程将一直等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c1&gt;str&lt;/c1&gt; is &lt;c2&gt;null&lt;/c2&gt;, then the four characters &lt;c3&gt;"null"&lt;/c3&gt; are appended.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034829Z" creationid="pingfangx" creationdate="20191014T034829Z">
        <seg>如果 &lt;c1&gt;str&lt;/c1&gt; 为 &lt;c2&gt;null&lt;/c2&gt;，则追加 4 个字符 &lt;c3&gt;"null"&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c1&gt;str&lt;/c1&gt; is &lt;c2&gt;null&lt;/c2&gt;, then the four characters &lt;c3&gt;"null"&lt;/c3&gt; are inserted into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041100Z" creationid="pingfangx" creationdate="20191014T041044Z">
        <seg>如果 &lt;c1&gt;s&lt;/c1&gt; 为 &lt;c2&gt;null&lt;/c2&gt;，则向此序列中插入 4 个字符 &lt;c3&gt;"null"&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c2&gt;start&lt;/c2&gt; is equal to &lt;c3&gt;end&lt;/c3&gt;, no changes are made.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040239Z" creationid="pingfangx" creationdate="20191014T040239Z">
        <seg>如果 &lt;c2&gt;start&lt;/c2&gt; 等于 &lt;c3&gt;end&lt;/c3&gt;，则不发生任何更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;c3&gt;componentType&lt;/c3&gt; represents an array class, the number of dimensions of the new array is equal to the sum of &lt;c4&gt;dimensions.length&lt;/c4&gt; and the number of dimensions of &lt;c5&gt;componentType&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103732Z" creationid="pingfangx" creationdate="20191015T103732Z">
        <seg>如果 &lt;c3&gt;componentType&lt;/c3&gt; 表示一个数组类，则新数组的维数等于 &lt;c4&gt;dimensions.length&lt;/c4&gt; 和 &lt;c5&gt;componentType&lt;/c5&gt; 的维数的总和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;t1&gt;sb&lt;/t1&gt; is &lt;t2&gt;null&lt;/t2&gt;, then the four characters &lt;t3&gt;"null"&lt;/t3&gt; are appended to this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035027Z" creationid="pingfangx" creationdate="20191014T035027Z">
        <seg>如果 &lt;t1&gt;sb&lt;/t1&gt; 为 &lt;t2&gt;null&lt;/t2&gt;，则向该序列追加 4 个字符 &lt;t3&gt;"null"&lt;/t3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;t3&gt;sb&lt;/t3&gt; is &lt;t4&gt;null&lt;/t4&gt;, then the four characters &lt;t5&gt;"null"&lt;/t5&gt; are appended to this &lt;t6&gt;StringBuffer&lt;/t6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064337Z" creationid="pingfangx" creationdate="20191014T064306Z">
        <seg>如果 &lt;t3&gt;sb&lt;/t3&gt; 为 &lt;t4&gt;null&lt;/t4&gt;，则将 4 个字符 &lt;t5&gt;"null"&lt;/t5&gt; 追加到此 &lt;t6&gt;StringBuffer&lt;/t6&gt; 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;c7&gt;ThreadFactory&lt;/c7&gt; fails to create a thread when asked by returning null from &lt;c8&gt;newThread&lt;/c8&gt;, the executor will continue, but might not be able to execute any tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124250Z" creationid="pingfangx" creationdate="20191025T124250Z">
        <seg>如果从 &lt;c7&gt;newThread&lt;/c7&gt; 返回 null 时 &lt;c8&gt;ThreadFactory&lt;/c8&gt; 未能创建线程，则执行程序将继续运行，但不能执行任何任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a Target meta-annotation is not present on an annotation type declaration, the declared type may be used on any program element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152251Z" creationid="pingfangx" creationdate="20191014T152251Z">
        <seg>如果注释类型声明中不存在 Target 元注释，则声明的类型可以用在任一程序元素上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a checked exception is thrown by this method that is not assignable to any of the exception types declared in the &lt;c3&gt;throws&lt;/c3&gt; clause of the interface method, then an &lt;c4&gt;&lt;a5&gt;UndeclaredThrowableException&lt;/a5&gt;&lt;/c4&gt; containing the exception that was thrown by this method will be thrown by the method invocation on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121449Z" creationid="pingfangx" creationdate="20191015T121449Z">
        <seg>如果此方法抛出经过检查的异常，该异常不可分配到在接口方法的 &lt;c3&gt;throws&lt;/c3&gt; 子句中声明的任一异常类型，代理实例的方法调用将抛出包含此方法曾抛出的异常的 &lt;c4&gt;&lt;a5&gt;UndeclaredThrowableException&lt;/a5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class and all of its superclasses (except &lt;c1&gt;Object&lt;/c1&gt;) obey this convention, it will be the case that &lt;c2&gt;x.clone().getClass() == x.getClass()&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135431Z" creationid="pingfangx" creationdate="20191014T135431Z">
        <seg>如果一个类及其所有的超类（&lt;c1&gt;Object&lt;/c1&gt; 除外）都遵守此约定，则 &lt;c2&gt;x.clone().getClass() == x.getClass()&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by &lt;c1&gt;super.clone&lt;/c1&gt; need to be modified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135501Z" creationid="pingfangx" creationdate="20191014T135501Z">
        <seg>如果一个类只包含基本字段或对不变对象的引用，那么通常不需要修改 &lt;c1&gt;super.clone&lt;/c1&gt; 返回的对象中的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a method always has an error less than 0.5 ulps, the method always returns the floating-point number nearest the exact result; such a method is &lt;i2&gt;correctly rounded&lt;/i2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151251Z" creationid="pingfangx" creationdate="20191013T151251Z">
        <seg>如果一个方法的误差总是小于 0.5 ulp，那么该方法始终返回最接近准确结果的浮点数；这种方法就是&lt;i2&gt;正确舍入&lt;/i2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a method is annotated with this annotation type compilers are required to generate an error message unless at least one of the following conditions hold:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101147Z" creationid="pingfangx" creationdate="20191014T101147Z">
        <seg>如果使用此批注类型对方法进行批注，则编译器需要生成错误消息，除非至少满足以下条件之一：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a name is not specified when a thread is created, a new name is generated for it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081335Z" creationid="pingfangx" creationdate="20191014T081335Z">
        <seg>如果线程创建时没有指定标识名，就会为其生成一个新名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a proxy class for the same permutation of interfaces has already been defined by the class loader, then the existing proxy class will be returned; otherwise, a proxy class for those interfaces will be generated dynamically and defined by the class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113541Z" creationid="pingfangx" creationdate="20191015T113541Z">
        <seg>如果类加载器已经定义了具有相同排列接口的代理类，那么现有的代理类将被返回；否则，类加载器将动态生成并定义这些接口的代理类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a proxy class implements a non-public interface, then it will be defined in the same package as that interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112353Z" creationid="pingfangx" creationdate="20191015T112353Z">
        <seg>如果代理类实现了非公共接口，那么它将在与该接口相同的包中定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a proxy interface contains a method with the same name and parameter signature as the &lt;c0&gt;hashCode&lt;/c0&gt;, &lt;c1&gt;equals&lt;/c1&gt;, or &lt;c2&gt;toString&lt;/c2&gt; methods of &lt;c3&gt;java.lang.Object&lt;/c3&gt;, when such a method is invoked on a proxy instance, the &lt;c4&gt;Method&lt;/c4&gt; object passed to the invocation handler will have &lt;c5&gt;java.lang.Object&lt;/c5&gt; as its declaring class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113122Z" creationid="pingfangx" creationdate="20191015T113122Z">
        <seg>如果代理接口包含某一方法，它的名称和参数签名与 &lt;c0&gt;java.lang.Object&lt;/c0&gt; 的 &lt;c1&gt;hashCode&lt;/c1&gt;、&lt;c2&gt;equals&lt;/c2&gt; 或 &lt;c3&gt;toString&lt;/c3&gt; 方法相同，那么在代理实例上调用这样的方法时，传递到调用处理程序的 &lt;c4&gt;Method&lt;/c4&gt; 对象将使 &lt;c5&gt;java.lang.Object&lt;/c5&gt; 成为其声明类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a registered reference becomes unreachable itself, then it will never be enqueued.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090236Z" creationid="pingfangx" creationdate="20191012T090236Z">
        <seg>如果一个已注册的引用本身变得不可到达，则永远不会将它加入到队列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a request cannot be queued, a new thread is created unless this would exceed maximumPoolSize, in which case, the task will be rejected.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124556Z" creationid="pingfangx" creationdate="20191025T124556Z">
        <seg>如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a security manager exists, its &lt;c0&gt;&lt;a1&gt;checkPermission&lt;/a1&gt;&lt;/c0&gt; method is called with a &lt;c2&gt;&lt;a3&gt;RuntimePermission&lt;/a3&gt;&lt;/c2&gt;&lt;c4&gt;("getenv.*")&lt;/c4&gt; permission.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080059Z" creationid="pingfangx" creationdate="20191014T080059Z">
        <seg>如果安全管理器存在，则其 &lt;c0&gt;&lt;a1&gt;checkPermission&lt;/a1&gt;&lt;/c0&gt; 方法通过 &lt;c2&gt;&lt;a3&gt;RuntimePermission&lt;/a3&gt;&lt;/c2&gt;&lt;c4&gt;("getenv.*")&lt;/c4&gt; 权限进行调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a thread has not had its &lt;t4&gt;UncaughtExceptionHandler&lt;/t4&gt; explicitly set, then its &lt;t5&gt;ThreadGroup&lt;/t5&gt; object acts as its &lt;t6&gt;UncaughtExceptionHandler&lt;/t6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T092624Z" creationid="pingfangx" creationdate="20191014T092624Z">
        <seg>如果某一线程没有明确设置其 &lt;t4&gt;UncaughtExceptionHandler&lt;/t4&gt;，则将它的 &lt;t5&gt;ThreadGroup&lt;/t5&gt; 对象作为其 &lt;t6&gt;UncaughtExceptionHandler&lt;/t6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type declaration is annotated with Documented, its annotations become part of the public API of the annotated elements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151833Z" creationid="pingfangx" creationdate="20191014T151833Z">
        <seg>如果类型声明是用 Documented 来注释的，则其注释将成为注释元素的公共 API 的一部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type variable t is referenced by a type (i.e, class, interface or annotation type) T, and T is declared by the nth enclosing class of T (see JLS 8.1.2), then the creation of t requires the resolution (see JVMS 5) of the ith enclosing class of T, for i = 0 to n, inclusive.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T081929Z" creationid="pingfangx" creationdate="20191015T081929Z">
        <seg>如果类型变量 t 由类型（即类、接口或注释类型）T 引用，而且 T 由 T 的第 n 个封闭类声明（请参见 JLS 8.1.2），那么创建 t 需要解析（请参见 JVMS 5）T 的第 i 个封闭类，其中 i = 0 到 n（包含）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an Inherited meta-annotation is present on an annotation type declaration, and the user queries the annotation type on a class declaration, and the class declaration has no annotation for this type, then the class's superclass will automatically be queried for the annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151856Z" creationid="pingfangx" creationdate="20191014T151856Z">
        <seg>如果在注释类型声明中存在 Inherited 元注释，并且用户在某一类声明中查询该注释类型，同时该类声明中没有此类型的注释，则将在该类的超类中自动查询该注释类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an annotation returned by a method in this interface contains (directly or indirectly) a &lt;c0&gt;&lt;a1&gt;Class&lt;/a1&gt;&lt;/c0&gt;-valued member referring to a class that is not accessible in this VM, attempting to read the class by calling the relevant Class-returning method on the returned annotation will result in a &lt;c2&gt;&lt;a3&gt;TypeNotPresentException&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161042Z" creationid="pingfangx" creationdate="20191014T161042Z">
        <seg>如果此接口中的方法返回的注释（直接或间接地）包含一个已赋值的 &lt;c0&gt;&lt;a1&gt;Class&lt;/a1&gt;&lt;/c0&gt; 成员，该成员引用了一个在此 VM 中不可访问的类，则试图通过在返回的注释上调用相关的类返回的方法来读取该类，将导致一个 &lt;c2&gt;&lt;a3&gt;TypeNotPresentException&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140222Z" creationid="pingfangx" creationdate="20191014T140222Z">
        <seg>如果 finalize 方法抛出未捕获的异常，那么该异常将被忽略，并且该对象的终结操作将终止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If another thread ever attempted to lock this resource, deadlock would result.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081919Z" creationid="pingfangx" creationdate="20191014T081919Z">
        <seg>如果另一个线程曾试图锁定该资源，则会出现死锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If any of the objects previously protected by these monitors were in an inconsistent state, the damaged objects become visible to other threads, potentially resulting in arbitrary behavior.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082829Z" creationid="pingfangx" creationdate="20191014T082829Z">
        <seg>如果这些监视器以前保护的任何对象处于不一致状态，则损坏的对象对其他线程可见，可能导致任意行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If any of these restrictions are violated, &lt;c0&gt;Proxy.getProxyClass&lt;/c0&gt; will throw an &lt;c1&gt;IllegalArgumentException&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113711Z" creationid="pingfangx" creationdate="20191015T113711Z">
        <seg>如果违反了这些限制，&lt;c0&gt;Proxy.getProxyClass&lt;/c0&gt; 将抛出 &lt;c1&gt;IllegalArgumentException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If any threads are waiting on this object, one of them is chosen to be awakened.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132727Z" creationid="pingfangx" creationdate="20191014T132727Z">
        <seg>如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If corePoolSize or more threads are running, the Executor always prefers queuing a request rather than adding a new thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124551Z" creationid="pingfangx" creationdate="20191025T124551Z">
        <seg>如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If correct handling of supplementary characters is required, determine the number of &lt;c0&gt;char&lt;/c0&gt;s to remove by calling &lt;c1&gt;Character.charCount(thisSequence.codePointAt(index))&lt;/c1&gt;, where &lt;c2&gt;thisSequence&lt;/c2&gt; is this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040242Z" creationid="pingfangx" creationdate="20191014T040242Z">
        <seg>如果需要准确处理增补字符，那么可以通过调用 &lt;c0&gt;Character.charCount(thisSequence.codePointAt(index))&lt;/c0&gt;（用此序列取代 &lt;c1&gt;thisSequence&lt;/c1&gt;）来确定要移除的 &lt;c2&gt;char&lt;/c2&gt; 数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If fewer than corePoolSize threads are running, the Executor always prefers adding a new thread rather than queuing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124543Z" creationid="pingfangx" creationdate="20191025T124543Z">
        <seg>如果运行的线程少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If hook, callback, or BlockingQueue methods throw exceptions, internal worker threads may in turn fail, abruptly terminate, and possibly be replaced.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125744Z" creationid="pingfangx" creationdate="20191025T125744Z">
        <seg>如果钩子 (hook) ，回调或回调方法抛出异常，则内部辅助线程将依次失败并突然终止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If if were to be implemented, it would be deadlock-prone in much the manner of &lt;c0&gt;&lt;a1&gt;suspend()&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081906Z" creationid="pingfangx" creationdate="20191014T081906Z">
        <seg>即使要实现，它也极有可能以 &lt;c0&gt;&lt;a1&gt;suspend()&lt;/a1&gt;&lt;/c0&gt; 方式被死锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If many mappings are to be stored in a &lt;t0&gt;HashMap&lt;/t0&gt; instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134515Z" creationid="pingfangx" creationdate="20191025T134515Z">
        <seg>如果很多映射关系要存储在 &lt;t0&gt;HashMap&lt;/t0&gt; 实例中，则相对于按需执行自动的 rehash 操作以增大表的容量来说，使用足够大的初始容量创建它将使得映射关系能更有效地存储。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no Retention annotation is present on an annotation type declaration, the retention policy defaults to &lt;c0&gt;RetentionPolicy.CLASS&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152140Z" creationid="pingfangx" creationdate="20191014T152140Z">
        <seg>如果注释类型声明中不存在 Retention 注释，则保留策略默认为 &lt;c0&gt;RetentionPolicy.CLASS&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no such object exists, the map should be "wrapped" using the &lt;a0&gt;Collections#synchronizedMap Collections.synchronizedMap&lt;/a0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T075316Z" creationid="pingfangx" creationdate="20191026T075316Z">
        <seg>如果不存在这样的对象，则应该使用 &lt;a0&gt;Collections#synchronizedMap Collections.synchronizedMap&lt;/a0&gt; 方法来“包装”该映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no such object exists, the map should be "wrapped" using the &lt;a2&gt;Collections#synchronizedMap Collections.synchronizedMap&lt;/a2&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T051404Z" creationid="pingfangx" creationdate="20191026T051404Z">
        <seg>如果不存在这样的对象，则应该使用 &lt;a2&gt;Collections#synchronizedMap Collections.synchronizedMap&lt;/a2&gt; 方法来“包装”该映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no such object exists, the map should be "wrapped" using the &lt;c2&gt;&lt;a3&gt;Collections.synchronizedMap&lt;/a3&gt;&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134819Z" creationid="pingfangx" creationdate="20191025T134819Z">
        <seg>如果不存在这样的对象，则应该使用 &lt;c2&gt;&lt;a3&gt;Collections.synchronizedMap&lt;/a3&gt;&lt;/c2&gt; 方法来“包装”该映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no such value of &lt;i0&gt;k&lt;/i0&gt; exists, then -1 is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040456Z" creationid="pingfangx" creationdate="20191014T040456Z">
        <seg>如果不存在这样的值 &lt;i0&gt;k&lt;/i0&gt;，则返回-1。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no superclass has an annotation for this type, then the query will indicate that the class in question has no such annotation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151900Z" creationid="pingfangx" creationdate="20191014T151900Z">
        <seg>如果没有超类具有该类型的注释，则查询将指示当前类没有这样的注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If not otherwise specified, a &lt;c2&gt;&lt;a3&gt;defaultThreadFactory()&lt;/a3&gt;&lt;/c2&gt; is used, that creates threads to all be in the same &lt;c4&gt;&lt;a5&gt;ThreadGroup&lt;/a5&gt;&lt;/c4&gt; and with the same &lt;c6&gt;NORM_PRIORITY&lt;/c6&gt; priority and non-daemon status.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124234Z" creationid="pingfangx" creationdate="20191025T124234Z">
        <seg>如果没有另外说明，则在同一个 &lt;c2&gt;&lt;a3&gt;ThreadGroup&lt;/a3&gt;&lt;/c2&gt; 中一律使用 &lt;c4&gt;&lt;a5&gt;defaultThreadFactory()&lt;/a5&gt;&lt;/c4&gt; 创建线程，并且这些线程具有相同的 &lt;c6&gt;NORM_PRIORITY&lt;/c6&gt; 优先级和非守护进程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If null, allocates in accord with initial capacity target held in field threshold.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094512Z" creationid="pingfangx" creationdate="20191026T094436Z">
        <seg>如果为空，则根据 threshold 中保存的阈值对应的初始容量进行分配。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one is available without further delay then it is removed from the queue and returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155313Z" creationid="pingfangx" creationdate="20191014T155313Z">
        <seg>如果存在一个立即可用的对象，则从该队列中移除此对象并返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If such a meta-annotation is present, the compiler will enforce the specified usage restriction.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152254Z" creationid="pingfangx" creationdate="20191014T152254Z">
        <seg>如果存在这样的元注释，则编译器强制实施指定的使用限制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If such synchronization is required then it is recommended that &lt;c1&gt;&lt;a2&gt;StringBuffer&lt;/a2&gt;&lt;/c1&gt; be used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030446Z" creationid="pingfangx" creationdate="20191014T030446Z">
        <seg>如果需要这样的同步，则建议使用 &lt;c1&gt;&lt;a2&gt;StringBuffer&lt;/a2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125441Z" creationid="pingfangx" creationdate="20191025T125441Z">
        <seg>如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c0&gt;char&lt;/c0&gt; value at &lt;c1&gt;(index - 1)&lt;/c1&gt; is in the low-surrogate range, &lt;c2&gt;(index - 2)&lt;/c2&gt; is not negative, and the &lt;c3&gt;char&lt;/c3&gt; value at &lt;c4&gt;(index - 2)&lt;/c4&gt; is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040218Z" creationid="pingfangx" creationdate="20191014T040218Z">
        <seg>如果 &lt;c0&gt;(index - 1)&lt;/c0&gt; 处的 &lt;c1&gt;char&lt;/c1&gt; 值属于低代理项范围，则 &lt;c2&gt;(index - 2)&lt;/c2&gt; 为非负；如果&lt;c3&gt;(index - 2)&lt;/c3&gt; 处的 &lt;c4&gt;char&lt;/c4&gt; 值属于高代理项范围，则返回该代理项对的增补代码点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c0&gt;char&lt;/c0&gt; value specified at the given index is in the high-surrogate range, the following index is less than the length of this sequence, and the &lt;c1&gt;char&lt;/c1&gt; value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040213Z" creationid="pingfangx" creationdate="20191014T040213Z">
        <seg>如果给定的索引指定的 &lt;c0&gt;char&lt;/c0&gt; 值属于高代理项范围，则后续索引小于此序列的长度；如果后续索引处的 &lt;c1&gt;char&lt;/c1&gt; 值属于低代理项范围，则返回该代理项对对应的增补代码点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c0&gt;char&lt;/c0&gt; value specified by the index is a &lt;a1&gt;surrogate&lt;/a1&gt;, the surrogate value is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040207Z" creationid="pingfangx" creationdate="20191014T040207Z">
        <seg>如果索引指定的 &lt;c0&gt;char&lt;/c0&gt; 值是&lt;a1&gt;代理项&lt;/a1&gt;，则返回代理项值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c0&gt;minimumCapacity&lt;/c0&gt; argument is nonpositive, this method takes no action and simply returns.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040330Z" creationid="pingfangx" creationdate="20191014T040330Z">
        <seg>如果 &lt;c0&gt;minimumCapacity&lt;/c0&gt; 参数为非正数，则此方法不执行任何操作并返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c0&gt;newLength&lt;/c0&gt; argument is greater than or equal to the current length, sufficient null characters (&lt;c1&gt;'\u0000'&lt;/c1&gt;) are appended so that length becomes the &lt;c2&gt;newLength&lt;/c2&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041640Z" creationid="pingfangx" creationdate="20191014T041640Z">
        <seg>如果 &lt;c0&gt;newLength&lt;/c0&gt; 参数大于或等于当前长度，则将追加有效的 null 字符 (&lt;c1&gt;'\u0000'&lt;/c1&gt;)，使长度满足 &lt;c2&gt;newLength&lt;/c2&gt; 参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c2&gt;interfaces&lt;/c2&gt; array argument or any of its elements are &lt;c3&gt;null&lt;/c3&gt;, a &lt;c4&gt;NullPointerException&lt;/c4&gt; will be thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113714Z" creationid="pingfangx" creationdate="20191015T113714Z">
        <seg>如果 &lt;c2&gt;interfaces&lt;/c2&gt; 数组参数或其任何元素为 &lt;c3&gt;null&lt;/c3&gt;，则将抛出 &lt;c4&gt;NullPointerException&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c3&gt;invoke&lt;/c3&gt; method throws a checked exception that is not assignable to any of the exception types declared by the method in one of the proxy interfaces that it can be invoked through, then an unchecked &lt;c4&gt;UndeclaredThrowableException&lt;/c4&gt; will be thrown by the invocation on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113235Z" creationid="pingfangx" creationdate="20191015T113235Z">
        <seg>如果 &lt;c3&gt;invoke&lt;/c3&gt; 方法抛出一个经过检查的异常，该异常没有指派给任何由一个代理接口（可以通过它调用）中的方法声明的异常类型，那么该代理实例上的调用将抛出一个未经检查的 &lt;c4&gt;UndeclaredThrowableException&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;c5&gt;char&lt;/c5&gt; value at &lt;c6&gt;index - 1&lt;/c6&gt; is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040220Z" creationid="pingfangx" creationdate="20191014T040220Z">
        <seg>如果 &lt;c5&gt;index - 1&lt;/c5&gt; 处的 &lt;c6&gt;char&lt;/c6&gt; 值是未配对的低（高）代理项，则返回代理项值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the &lt;t7&gt;ThreadGroup&lt;/t7&gt; object has no special requirements for dealing with the exception, it can forward the invocation to the &lt;a8&gt;default uncaught exception handler&lt;/a8&gt;&lt;/a9&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T092636Z" creationid="pingfangx" creationdate="20191014T092636Z">
        <seg>如果 &lt;t7&gt;ThreadGroup&lt;/t7&gt; 对象对处理异常没有什么特殊要求，那么它可以将调用转发给&lt;a8&gt;默认的未捕获异常处理程序&lt;/a8&gt;&lt;/a9&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the buffer is larger than necessary to hold its current sequence of characters, then it may be resized to become more space efficient.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041733Z" creationid="pingfangx" creationdate="20191014T041733Z">
        <seg>如果缓冲区大于保存当前字符序列所需的存储空间，则将重新调整其大小，以便更好地利用存储空间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the class or interface represented by this &lt;c0&gt;Class&lt;/c0&gt; object is a member of another class, returns the &lt;c1&gt;Class&lt;/c1&gt; object representing the class in which it was declared.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100726Z" creationid="pingfangx" creationdate="20191013T100726Z">
        <seg>如果此 &lt;c0&gt;Class&lt;/c0&gt; 对象所表示的类或接口是另一个类的成员，则返回的 &lt;c1&gt;Class&lt;/c1&gt; 对象表示该对象的声明类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the current capacity is less than the argument, then a new internal array is allocated with greater capacity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040244Z" creationid="pingfangx" creationdate="20191014T040244Z">
        <seg>如果当前容量小于参数，则可分配一个更大容量的新内部数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the current thread is &lt;a0&gt;interrupted&lt;/a0&gt;&lt;/a1&gt; by any thread before or while it is waiting, then an &lt;c2&gt;InterruptedException&lt;/c2&gt; is thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134811Z" creationid="pingfangx" creationdate="20191014T134802Z">
        <seg>如果当前线程在等待之前或在等待时被任何线程 &lt;a0&gt;中断&lt;/a0&gt;&lt;/a1&gt;，则会抛出 &lt;c2&gt;InterruptedException&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the current tree appears to have too few nodes, the bin is converted back to a plain bin.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100826Z" creationid="pingfangx" creationdate="20191026T100826Z">
        <seg>如果当前树看起来节点太少，则该 bin 将转换回普通 bin。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121154Z" creationid="pingfangx" creationdate="20191015T121154Z">
        <seg>如果接口方法的声明返回类型是基本类型，则此方法返回的值一定是相应基本包装对象类的实例；否则，它一定是可分配到声明返回类型的类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the execution point is contained in an instance or class initializer, this method will return the appropriate &lt;i0&gt;special method name&lt;/i0&gt;, &lt;c1&gt;&lt;init&gt;&lt;/c1&gt; or &lt;c2&gt;&lt;clinit&gt;&lt;/c2&gt;, as per Section 3.9 of &lt;i3&gt;The Java Virtual Machine Specification&lt;/i3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095319Z" creationid="pingfangx" creationdate="20191014T095319Z">
        <seg>如果执行点包含在某个实例或类初始化程序中，则此方法将返回适当的&lt;i0&gt;特殊方法名&lt;/i0&gt;：&lt;c1&gt;&lt;init&gt;&lt;/c1&gt; 或 &lt;c2&gt;&lt;clinit&gt;&lt;/c2&gt;（根据 &lt;i3&gt;The Java Virtual Machine Specification&lt;/i3&gt; 中的第 3.9 节）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the garbage collector determines at a certain point in time that the referent of a phantom reference is &lt;a0&gt;phantom reachable&lt;/a0&gt;, then at that time or at some later time it will enqueue the reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154651Z" creationid="pingfangx" creationdate="20191014T154651Z">
        <seg>如果垃圾回收器确定在某一特定时间点上虚引用的指示对象是&lt;a0&gt;虚可到达对象&lt;/a0&gt;，那么在那时或者在以后的某一时间，它会将该引用加入队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134508Z" creationid="pingfangx" creationdate="20191025T134508Z">
        <seg>如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the internal buffer overflows, it is automatically made larger.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030439Z" creationid="pingfangx" creationdate="20191014T030439Z">
        <seg>如果内部缓冲区溢出，则此容量自动增大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the length of the specified &lt;c0&gt;CharSequence&lt;/c0&gt; is less than or equal to zero, then an empty buffer of capacity &lt;c1&gt;16&lt;/c1&gt; is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T065217Z" creationid="pingfangx" creationdate="20191014T065217Z">
        <seg>如果指定的 &lt;c0&gt;CharSequence&lt;/c0&gt; 的长度小于或等于 0，则返回容量为 &lt;c1&gt;16&lt;/c1&gt; 的空缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the map is modified while an iteration over the collection is in progress (except through the iterator's own &lt;t1&gt;remove&lt;/t1&gt; operation), the results of the iteration are undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095157Z" creationid="pingfangx" creationdate="20191026T095157Z">
        <seg>如果在对 collection 进行迭代的同时修改了映射（通过迭代器自己的 &lt;t1&gt;remove&lt;/t1&gt; 操作除外），则迭代结果是不确定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the map is modified while an iteration over the collection is in progress (except through the iterator's own &lt;t2&gt;remove&lt;/t2&gt; operation), the results of the iteration are undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141344Z" creationid="pingfangx" creationdate="20191025T141344Z">
        <seg>如果在对 collection 进行迭代的同时修改了映射（通过迭代器自己的 &lt;t2&gt;remove&lt;/t2&gt; 操作除外），则迭代结果是不确定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the map is modified while an iteration over the set is in progress (except through the iterator's own &lt;t1&gt;remove&lt;/t1&gt; operation), the results of the iteration are undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095038Z" creationid="pingfangx" creationdate="20191026T095038Z">
        <seg>如果在对 set 进行迭代的同时修改了映射（通过迭代器自己的 &lt;t1&gt;remove&lt;/t1&gt; 操作除外），则迭代结果是不确定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the map is modified while an iteration over the set is in progress (except through the iterator's own &lt;t1&gt;remove&lt;/t1&gt; operation, or through the &lt;t2&gt;setValue&lt;/t2&gt; operation on a map entry returned by the iterator) the results of the iteration are undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095210Z" creationid="pingfangx" creationdate="20191026T095210Z">
        <seg>如果在对 set 进行迭代的同时修改了映射（通过迭代器自己的 &lt;t1&gt;remove&lt;/t1&gt; 操作，或者通过在该迭代器返回的映射项上执行 &lt;t2&gt;setValue&lt;/t2&gt; 操作除外），则迭代结果是不确定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the map is modified while an iteration over the set is in progress (except through the iterator's own &lt;t2&gt;remove&lt;/t2&gt; operation), the results of the iteration are undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141113Z" creationid="pingfangx" creationdate="20191025T141113Z">
        <seg>如果在对 set 进行迭代的同时修改了映射（通过迭代器自己的 &lt;t2&gt;remove&lt;/t2&gt; 操作除外），则迭代结果是不确定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the map is modified while an iteration over the set is in progress (except through the iterator's own &lt;t2&gt;remove&lt;/t2&gt; operation, or through the &lt;t3&gt;setValue&lt;/t3&gt; operation on a map entry returned by the iterator) the results of the iteration are undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140625Z" creationid="pingfangx" creationdate="20191025T140625Z">
        <seg>如果在对 set 进行迭代的同时修改了映射（通过迭代器自己的 &lt;t2&gt;remove&lt;/t2&gt; 操作，或者通过在该迭代器返回的映射项上执行 &lt;t3&gt;setValue&lt;/t3&gt; 操作除外），则迭代结果是不确定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the map previously contained a mapping for the key, the old value is replaced.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141121Z" creationid="pingfangx" creationdate="20191025T141121Z">
        <seg>如果该映射以前包含了一个该键的映射关系，则旧值被替换。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the pool becomes more active later, new threads will be constructed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124424Z" creationid="pingfangx" creationdate="20191025T124424Z">
        <seg>如果池后来变得更为活动，则可以创建新的线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the pool currently has more than corePoolSize threads, excess threads will be terminated if they have been idle for more than the keepAliveTime (see &lt;c0&gt;&lt;a1&gt;getKeepAliveTime(TimeUnit)&lt;/a1&gt;&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124413Z" creationid="pingfangx" creationdate="20191025T124413Z">
        <seg>如果池中当前有多于 corePoolSize 的线程，则这些多出的线程在空闲时间超过 keepAliveTime 时将会终止（参见 &lt;c0&gt;&lt;a1&gt;getKeepAliveTime(TimeUnit)&lt;/a1&gt;&lt;/c0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the return type of any of the methods is a primitive type or void, then all of the methods must have that same return type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113646Z" creationid="pingfangx" creationdate="20191015T113640Z">
        <seg>如果任何方法的返回类型是基本类型或 void，那么所有的方法必须具有与此相同的返回类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T090700Z" creationid="pingfangx" creationdate="20191014T090700Z">
        <seg>若返回的数组不是长度为 0 的数组，则其第一个元素代表堆栈顶，它是该序列中最新的方法调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the sequence is mutated while the stream is being read, the result is undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070708Z" creationid="pingfangx" creationdate="20191014T070708Z">
        <seg>如果序列在读取流时发生变异，则结果未定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified &lt;c0&gt;index&lt;/c0&gt; argument is negative, or if it is greater than or equal to the length of the specified array</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103556Z" creationid="pingfangx" creationdate="20191015T103556Z">
        <seg>如果 &lt;c0&gt;index&lt;/c0&gt; 参数为负，或者它大于等于指定数组的长度</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified key is not already associated with a value (or is mapped to &lt;c0&gt;null&lt;/c0&gt;) associates it with the given value and returns &lt;c1&gt;null&lt;/c1&gt;, else returns the current value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140355Z" creationid="pingfangx" creationdate="20191025T140355Z">
        <seg>如果指定的键尚未与值关联(或映射到 &lt;c0&gt;null&lt;/c0&gt;)，则将其与给定值关联并返回 &lt;c1&gt;null&lt;/c1&gt;，否则返回当前值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified key is not already associated with a value (or is mapped to &lt;c0&gt;null&lt;/c0&gt;), attempts to compute its value using the given mapping function and enters it into this map unless &lt;c1&gt;null&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140240Z" creationid="pingfangx" creationdate="20191025T140240Z">
        <seg>如果指定的键尚未与值关联(或映射到 &lt;c0&gt;null&lt;/c0&gt;)，则尝试使用给定的映射函数计算其值并将其输入此映射，除非 &lt;c1&gt;null&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140344Z" creationid="pingfangx" creationdate="20191025T140344Z">
        <seg>如果指定的键尚未与值关联或与 null 关联，请将其与给定的非 null 值关联。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified object is not an array</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103534Z" creationid="pingfangx" creationdate="20191015T103534Z">
        <seg>如果指定对象不是一个数组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified object is not an array, or if the indexed element cannot be converted to the return type by an identity or widening conversion</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103626Z" creationid="pingfangx" creationdate="20191015T103626Z">
        <seg>如果指定对象不是一个数组，或者无法通过一个恒等或扩展转换将索引元素转换为返回类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified object is null</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103532Z" creationid="pingfangx" creationdate="20191015T103532Z">
        <seg>如果指定对象为 null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the subprocess has not yet terminated, the calling thread will be blocked until the subprocess exits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075648Z" creationid="pingfangx" creationdate="20191014T075648Z">
        <seg>如果没有终止该子进程，调用的线程将被阻塞，直到退出子进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the system does not support environment variables, an empty map is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080045Z" creationid="pingfangx" creationdate="20191014T080045Z">
        <seg>如果系统不支持环境变量，将返回空映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the target thread held a lock protecting a critical system resource when it was destroyed, no thread could ever access this resource again.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081914Z" creationid="pingfangx" creationdate="20191014T081914Z">
        <seg>如果目标线程被破坏时保持一个保护关键系统资源的锁，则任何线程在任何时候都无法再次访问该资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the target thread holds a lock on the monitor protecting a critical system resource when it is suspended, no thread can access this resource until the target thread is resumed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082554Z" creationid="pingfangx" creationdate="20191014T082554Z">
        <seg>如果目标线程在监视器上持有一个锁，以在挂起关键系统资源时保护该资源，则在恢复目标线程之前，任何线程都无法访问该资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the target thread waits for long periods (on a condition variable, for example), the &lt;c2&gt;interrupt&lt;/c2&gt; method should be used to interrupt the wait.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082848Z" creationid="pingfangx" creationdate="20191014T082848Z">
        <seg>如果目标线程等待很长时间(例如，在条件变量上)，则应使用 &lt;c2&gt;interrupt&lt;/c2&gt; 方法来中断等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the thread that would resume the target thread attempts to lock this monitor prior to calling &lt;c0&gt;resume&lt;/c0&gt;, deadlock results.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082617Z" creationid="pingfangx" creationdate="20191014T082617Z">
        <seg>如果要恢复目标线程的线程在调用 &lt;c0&gt;resume&lt;/c0&gt; 之前试图锁定此监视器，则会导致死锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140254Z" creationid="pingfangx" creationdate="20191025T140254Z">
        <seg>如果指定键的值存在且不为空，则尝试计算给定键及其当前映射值的新映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value returned by this method is &lt;c0&gt;null&lt;/c0&gt; and the interface method's return type is primitive, then a &lt;c1&gt;NullPointerException&lt;/c1&gt; will be thrown by the method invocation on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121222Z" creationid="pingfangx" creationdate="20191015T121222Z">
        <seg>如果此方法返回的值为 &lt;c0&gt;null&lt;/c0&gt; 并且接口方法的返回类型是基本类型，则代理实例上的方法调用将抛出 &lt;c1&gt;NullPointerException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value returned by this method is otherwise not compatible with the interface method's declared return type as described above, a &lt;c2&gt;ClassCastException&lt;/c2&gt; will be thrown by the method invocation on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121224Z" creationid="pingfangx" creationdate="20191015T121224Z">
        <seg>否则，如果此方法返回的值与上述接口方法的声明返回类型不兼容，则代理实例上的方法调用将抛出 &lt;c2&gt;ClassCastException&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the variable has no value for the current thread, it is first initialized to the value returned by an invocation of the &lt;c0&gt;&lt;a1&gt;initialValue()&lt;/a1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100805Z" creationid="pingfangx" creationdate="20191014T100805Z">
        <seg>如果变量没有用于当前线程的值，则先将其初始化为调用 &lt;c0&gt;&lt;a1&gt;initialValue()&lt;/a1&gt;&lt;/c0&gt; 方法返回的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are any surrogate pairs included in the sequence, these are treated as single characters for the reverse operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063422Z" creationid="pingfangx" creationdate="20191014T063422Z">
        <seg>如果序列中存在代理项对 (surrogate pair)，在 reverse 操作中将其作为单个字符处理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123947Z" creationid="pingfangx" creationdate="20191025T123947Z">
        <seg>如果运行的线程多于 corePoolSize 而少于 maximumPoolSize，则仅当队列满时才创建新线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is a security manager, and this thread is not the current thread, then the security manager's &lt;t0&gt;checkPermission&lt;/t0&gt; method is called with a &lt;t1&gt;RuntimePermission("getStackTrace")&lt;/t1&gt; permission to see if it's ok to get the stack trace.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T090744Z" creationid="pingfangx" creationdate="20191014T090744Z">
        <seg>如果有安全管理器，并且该线程不是当前线程，则通过 &lt;t1&gt;RuntimePermission("getStackTrace")&lt;/t1&gt; 权限调用安全管理器的 &lt;t0&gt;checkPermission&lt;/t0&gt; 方法，查看是否可以获取堆栈跟踪。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is a security manager, its &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;checkCreateClassLoader&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; method is invoked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073509Z" creationid="pingfangx" creationdate="20191014T073509Z">
        <seg>如果存在安全管理器，则调用其 &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;checkCreateClassLoader&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is a security manager, its &lt;c0&gt;&lt;a1&gt;checkAccess&lt;/a1&gt;&lt;/c0&gt; method is invoked with the ThreadGroup as its argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084215Z" creationid="pingfangx" creationdate="20191014T084215Z">
        <seg>如果有安全管理器，则调用其 &lt;c0&gt;&lt;a1&gt;checkAccess&lt;/a1&gt;&lt;/c0&gt; 方法，并将该线程作为其参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is a security manager, its &lt;c0&gt;&lt;a1&gt;checkExec&lt;/a1&gt;&lt;/c0&gt; method is called with the first component of this object's &lt;c2&gt;command&lt;/c2&gt; array as its argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080219Z" creationid="pingfangx" creationdate="20191014T080200Z">
        <seg>如果有安全管理器，则用此对象的 &lt;c2&gt;command&lt;/c2&gt; 数组的首个元素作为其参数来调用安全管理器的 &lt;c0&gt;&lt;a1&gt;checkExec&lt;/a1&gt;&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is a security manager, its &lt;c0&gt;checkAccess&lt;/c0&gt; method is called with this thread as its argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084258Z" creationid="pingfangx" creationdate="20191014T084258Z">
        <seg>如果有安全管理器，则调用其 &lt;c0&gt;checkAccess&lt;/c0&gt; 方法，并将该线程作为其参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this &lt;c0&gt;Class&lt;/c0&gt; object represents a local or anonymous class within a constructor, returns a &lt;c1&gt;&lt;a2&gt;Constructor&lt;/a2&gt;&lt;/c1&gt; object representing the immediately enclosing constructor of the underlying class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100746Z" creationid="pingfangx" creationdate="20191013T100746Z">
        <seg>如果该 &lt;c0&gt;Class&lt;/c0&gt; 对象表示构造方法中的一个本地或匿名类，则返回 &lt;c1&gt;&lt;a2&gt;Constructor&lt;/a2&gt;&lt;/c1&gt; 对象，它表示底层类的立即封闭构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this &lt;c0&gt;Class&lt;/c0&gt; object represents a local or anonymous class within a method, returns a &lt;c1&gt;&lt;a2&gt;Method&lt;/a2&gt;&lt;/c1&gt; object representing the immediately enclosing method of the underlying class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100756Z" creationid="pingfangx" creationdate="20191013T100756Z">
        <seg>如果此 &lt;c0&gt;Class&lt;/c0&gt; 对象表示某一方法中的一个本地或匿名类，则返回 &lt;c1&gt;&lt;a2&gt;Method&lt;/a2&gt;&lt;/c1&gt; 对象，它表示底层类的立即封闭方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this property is &lt;c0&gt;true&lt;/c0&gt;, then any error output generated by subprocesses subsequently started by this object's &lt;c1&gt;&lt;a2&gt;start()&lt;/a2&gt;&lt;/c1&gt; method will be merged with the standard output, so that both can be read using the &lt;c3&gt;&lt;a4&gt;getInputStream()&lt;/a4&gt;&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080106Z" creationid="pingfangx" creationdate="20191014T080106Z">
        <seg>如果此属性为 &lt;c0&gt;true&lt;/c0&gt;，则任何由通过此对象的 &lt;c1&gt;&lt;a2&gt;start()&lt;/a2&gt;&lt;/c1&gt; 方法启动的后续子进程生成的错误输出都将与标准输出合并，因此两者均可使用 &lt;c3&gt;&lt;a4&gt;getInputStream()&lt;/a4&gt;&lt;/c3&gt; 方法读取。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this reference object has been cleared, either by the program or by the garbage collector, then this method returns &lt;c0&gt;null&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155209Z" creationid="pingfangx" creationdate="20191014T155209Z">
        <seg>如果此引用对象已经由程序或垃圾回收器清除，则此方法将返回 &lt;c0&gt;null&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this reference object was not registered with a queue when it was created, then this method will always return &lt;c0&gt;false&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155216Z" creationid="pingfangx" creationdate="20191014T155216Z">
        <seg>如果创建此引用对象时没有在队列中注册它，则该方法将总是返回 &lt;c0&gt;false&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this thread was constructed using a separate &lt;c0&gt;Runnable&lt;/c0&gt; run object, then that &lt;c1&gt;Runnable&lt;/c1&gt; object's &lt;c2&gt;run&lt;/c2&gt; method is called; otherwise, this method does nothing and returns.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082128Z" creationid="pingfangx" creationdate="20191014T082128Z">
        <seg>如果该线程是使用独立的 &lt;c0&gt;Runnable&lt;/c0&gt; 运行对象构造的，则调用该 &lt;c1&gt;Runnable&lt;/c1&gt; 对象的 &lt;c2&gt;run&lt;/c2&gt; 方法；否则，该方法不执行任何操作并返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this thread-local variable is subsequently &lt;a0&gt;read&lt;/a0&gt;&lt;/a1&gt; by the current thread, its value will be reinitialized by invoking its &lt;c2&gt;&lt;a3&gt;initialValue()&lt;/a3&gt;&lt;/c2&gt; method, unless its value is &lt;a4&gt;set&lt;/a4&gt;&lt;/a5&gt; by the current thread in the interim.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100857Z" creationid="pingfangx" creationdate="20191014T100821Z">
        <seg>如果此线程局部变量随后被当前线程&lt;a0&gt;读取&lt;/a0&gt;&lt;/a1&gt;，且这期间当前线程没有&lt;a4&gt;设置&lt;/a4&gt;&lt;/a5&gt;其值，则将调用其 &lt;c2&gt;&lt;a3&gt;&gt;initialValue()&lt;/a3&gt;&lt;/c2&gt; 方法重新初始化其值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this type is a top-level type, &lt;c0&gt;null&lt;/c0&gt; is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071746Z" creationid="pingfangx" creationdate="20191015T071746Z">
        <seg>如果此类型为顶层类型，则返回 &lt;c0&gt;null&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this type is a top-level type, &lt;c1&gt;null&lt;/c1&gt; is returned</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071749Z" creationid="pingfangx" creationdate="20191015T071749Z">
        <seg>如果此类型是顶层类型，则返回 &lt;c1&gt;null&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If two objects are equal according to the &lt;c0&gt;equals(Object)&lt;/c0&gt; method, then calling the &lt;c1&gt;hashCode&lt;/c1&gt; method on each of the two objects must produce the same integer result.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132205Z" creationid="pingfangx" creationdate="20191014T132205Z">
        <seg>如果根据 &lt;c0&gt;equals(Object)&lt;/c0&gt; 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 &lt;c1&gt;hashCode&lt;/c1&gt; 方法都必须生成相同的整数结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If worker threads or other threads using the pool do not possess this permission, service may be degraded: configuration changes may not take effect in a timely manner, and a shutdown pool may remain in a state in which termination is possible but not completed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124352Z" creationid="pingfangx" creationdate="20191025T124352Z">
        <seg>如果工作线程或使用池的其他线程不具有此权限，则服务可能会降级：配置更改可能不会及时生效，关闭池可能仍处于可以终止但未完成的状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you would like to ensure that unreferenced pools are reclaimed even if users forget to call &lt;c2&gt;&lt;a3&gt;shutdown()&lt;/a3&gt;&lt;/c2&gt;, then you must arrange that unused threads eventually die, by setting appropriate keep-alive times, using a lower bound of zero core threads and/or setting &lt;c4&gt;&lt;a5&gt;allowCoreThreadTimeOut(boolean)&lt;/a5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125811Z" creationid="pingfangx" creationdate="20191025T125811Z">
        <seg>如果希望确保回收取消引用的池（即使用户忘记调用 &lt;c2&gt;&lt;a3&gt;shutdown()&lt;/a3&gt;&lt;/c2&gt;），则必须安排未使用的线程最终终止：设置适当保持活动时间，使用 0 核心线程的下边界和/或设置 &lt;c4&gt;&lt;a5&gt;allowCoreThreadTimeOut(boolean)&lt;/a5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ignoring variance, the expected occurrences of list size k are (exp(-0.5) * pow(0.5, k) / factorial(k)).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081116Z" creationid="pingfangx" creationdate="20191026T081116Z">
        <seg>忽略变动，大小为 k 的列表的预期出现为 (exp(-0.5) * pow(0.5, k) / factorial(k))，前几个值为：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Immutable objects describing settings such as rounding mode and digit precision for the numerical operations provided by class &lt;c0&gt;&lt;a1&gt;BigDecimal&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T070654Z" creationid="pingfangx" creationdate="20191011T070654Z">
        <seg>描述由 &lt;c0&gt;&lt;a1&gt;BigDecimal&lt;/a1&gt;&lt;/c0&gt; 类提供的数值运算的舍入模式和数字精度等设置的不可变对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementation note: It is a good idea for the returned input stream to be buffered.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075414Z" creationid="pingfangx" creationdate="20191014T075414Z">
        <seg>实现注意事项：对返回的输入流进行缓冲是一个好主意。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementation note: It is a good idea for the returned output stream to be buffered.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075642Z" creationid="pingfangx" creationdate="20191014T075642Z">
        <seg>实现注意事项：对返回的输出流进行缓冲是一个好主意。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementation note: The implementations of the "bit twiddling" methods (such as &lt;c0&gt;&lt;a1&gt;highestOneBit&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;numberOfTrailingZeros&lt;/a3&gt;&lt;/c2&gt;) are based on material from Henry S. Warren, Jr.'s &lt;i4&gt;Hacker's Delight&lt;/i4&gt;, (Addison Wesley, 2002).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123036Z" creationid="pingfangx" creationdate="20191013T122943Z">
        <seg>实现注意事项："bit twiddling" 方法（如 &lt;c0&gt;&lt;a1&gt;highestOneBit&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;numberOfTrailingZeros&lt;/a3&gt;&lt;/c2&gt;）的实现基于 Henry S. Warren 和 Jr. 撰写的 &lt;i4&gt;Hacker's Delight&lt;/i4&gt; (Addison Wesley, 2002) 一书中的资料。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementation notes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T075359Z" creationid="pingfangx" creationdate="20191026T075359Z">
        <seg>实现说明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementations make a "best effort" to detect time-outs as soon as possible after they occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111412Z" creationid="pingfangx" creationdate="20191025T111412Z">
        <seg>在超时发生后，实现会“尽力”检测超时。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementing this interface allows an object to be the target of the "for-each loop" statement.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065851Z" creationid="pingfangx" creationdate="20191012T065851Z">
        <seg>实现这个接口允许对象成为 "for-each 循环" 语句的目标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implements Map.get and related methods</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090801Z" creationid="pingfangx" creationdate="20191026T090801Z">
        <seg>实现 Map.get 和相关方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implements Map.put and related methods</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T092929Z" creationid="pingfangx" creationdate="20191026T092929Z">
        <seg>实现 Map.put 和相关的方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implements Map.putAll and Map constructor</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090521Z" creationid="pingfangx" creationdate="20191026T090521Z">
        <seg>实现 Map.putAll 和 Map 构造函数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implements Map.remove and related methods</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094841Z" creationid="pingfangx" creationdate="20191026T094841Z">
        <seg>实现 Map.remove 和相关的方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.CallerRunsPolicy&lt;/a1&gt;&lt;/c0&gt;, the thread that invokes &lt;c2&gt;execute&lt;/c2&gt; itself runs the task.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125555Z" creationid="pingfangx" creationdate="20191025T125555Z">
        <seg>在 &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.CallerRunsPolicy&lt;/a1&gt;&lt;/c0&gt; 中，线程调用运行该任务的 &lt;c2&gt;execute&lt;/c2&gt; 本身。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.DiscardOldestPolicy&lt;/a1&gt;&lt;/c0&gt;, if the executor is not shut down, the task at the head of the work queue is dropped, and then execution is retried (which can fail again, causing this to be repeated.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125601Z" creationid="pingfangx" creationdate="20191025T125601Z">
        <seg>在 &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.DiscardOldestPolicy&lt;/a1&gt;&lt;/c0&gt; 中，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.DiscardPolicy&lt;/a1&gt;&lt;/c0&gt;, a task that cannot be executed is simply dropped.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125600Z" creationid="pingfangx" creationdate="20191025T125600Z">
        <seg>在 &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.DiscardPolicy&lt;/a1&gt;&lt;/c0&gt; 中，不能执行的任务将被删除。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to classes representing single values, this package contains &lt;e0&gt;Updater&lt;/e0&gt; classes that can be used to obtain &lt;c1&gt;compareAndSet&lt;/c1&gt; operations on any selected &lt;c2&gt;volatile&lt;/c2&gt; field of any selected class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121841Z" creationid="pingfangx" creationdate="20191025T121841Z">
        <seg>除了包含表示单个值的类之外，此包还包含 &lt;e0&gt;Updater&lt;/e0&gt; 类，该类可用于获取任意选定类的任意选定 &lt;c1&gt;volatile&lt;/c1&gt; 字段上的 &lt;c2&gt;compareAndSet&lt;/c2&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to its content a buffer has a &lt;i1&gt;position&lt;/i1&gt;, which is the index of the next element to be read or written, and a &lt;i2&gt;limit&lt;/i2&gt;, which is the index of the first element that should not be read or written.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T110800Z" creationid="pingfangx" creationdate="20191011T110800Z">
        <seg>除内容之外，缓冲区还具有 &lt;i1&gt;位置&lt;/i1&gt; 和 &lt;i2&gt;界限&lt;/i2&gt;，其中位置是要读写的下一个元素的索引，界限是第一个应该读写的元素的索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, &lt;c0&gt;Runnable&lt;/c0&gt; provides the means for a class to be active while not subclassing &lt;c1&gt;Thread&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154710Z" creationid="pingfangx" creationdate="20191013T154710Z">
        <seg>此外，&lt;c0&gt;Runnable&lt;/c0&gt; 为非 &lt;c1&gt;Thread&lt;/c1&gt; 子类的类提供了一种激活方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, a thread group can also include other thread groups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T092721Z" creationid="pingfangx" creationdate="20191014T092721Z">
        <seg>此外，线程组也可以包含其他线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides many methods for converting a &lt;c0&gt;boolean&lt;/c0&gt; to a &lt;c1&gt;String&lt;/c1&gt; and a &lt;c2&gt;String&lt;/c2&gt; to a &lt;c3&gt;boolean&lt;/c3&gt;, as well as other constants and methods useful when dealing with a &lt;c4&gt;boolean&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133237Z" creationid="pingfangx" creationdate="20191013T133237Z">
        <seg>此外，该类提供了多个方法，可以将 &lt;c0&gt;boolean&lt;/c0&gt; 转换为 &lt;c1&gt;String&lt;/c1&gt;，将 &lt;c2&gt;String&lt;/c2&gt; 转换为 &lt;c3&gt;boolean&lt;/c3&gt;，除此之外，还提供了其他一些处理 &lt;c4&gt;boolean&lt;/c4&gt; 时有用的常量和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides several methods for converting a &lt;c0&gt;byte&lt;/c0&gt; to a &lt;c1&gt;String&lt;/c1&gt; and a &lt;c2&gt;String&lt;/c2&gt; to a &lt;c3&gt;byte&lt;/c3&gt;, as well as other constants and methods useful when dealing with a &lt;c4&gt;byte&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121210Z" creationid="pingfangx" creationdate="20191013T121059Z">
        <seg>此外，该类还提供了 &lt;c0&gt;byte&lt;/c0&gt; 到 &lt;c1&gt;String&lt;/c1&gt; 和 &lt;c2&gt;String&lt;/c2&gt; 到 &lt;c3&gt;byte&lt;/c3&gt; 的几种转换方法，并提供了处理 &lt;c4&gt;byte&lt;/c4&gt; 时非常有用的其他一些常量和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides several methods for converting a &lt;c0&gt;double&lt;/c0&gt; to a &lt;c1&gt;String&lt;/c1&gt; and a &lt;c2&gt;String&lt;/c2&gt; to a &lt;c3&gt;double&lt;/c3&gt;, as well as other constants and methods useful when dealing with a &lt;c4&gt;double&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132549Z" creationid="pingfangx" creationdate="20191013T132536Z">
        <seg>此外，该类提供了多个方法，可以将 &lt;c0&gt;double&lt;/c0&gt; 转换为 &lt;c1&gt;String&lt;/c1&gt;，将 &lt;c2&gt;String&lt;/c2&gt; 转换为 &lt;c3&gt;double&lt;/c3&gt;，除此之外，还提供了其他一些处理 &lt;c4&gt;double&lt;/c4&gt; 时有用的常量和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides several methods for converting a &lt;c0&gt;float&lt;/c0&gt; to a &lt;c1&gt;String&lt;/c1&gt; and a &lt;c2&gt;String&lt;/c2&gt; to a &lt;c3&gt;float&lt;/c3&gt;, as well as other constants and methods useful when dealing with a &lt;c4&gt;float&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T131345Z" creationid="pingfangx" creationdate="20191013T131345Z">
        <seg>此外，该类提供了多个方法，可以将 &lt;c0&gt;float&lt;/c0&gt; 转换为 &lt;c1&gt;String&lt;/c1&gt;，将 &lt;c2&gt;String&lt;/c2&gt; 转换为 &lt;c3&gt;float&lt;/c3&gt;，除此之外，还提供了其他一些处理 &lt;c4&gt;float&lt;/c4&gt; 时有用的常量和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides several methods for converting a &lt;c0&gt;long&lt;/c0&gt; to a &lt;c1&gt;String&lt;/c1&gt; and a &lt;c2&gt;String&lt;/c2&gt; to a &lt;c3&gt;long&lt;/c3&gt;, as well as other constants and methods useful when dealing with a &lt;c4&gt;long&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124748Z" creationid="pingfangx" creationdate="20191013T124748Z">
        <seg>此外，该类提供了多个方法，可以将 &lt;c0&gt;long&lt;/c0&gt; 转换为 &lt;c1&gt;String&lt;/c1&gt;，将 &lt;c2&gt;String&lt;/c2&gt; 转换为 &lt;c3&gt;long&lt;/c3&gt;，除此之外，还提供了其他一些处理 &lt;c4&gt;long&lt;/c4&gt; 时有用的常量和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides several methods for converting a &lt;c0&gt;short&lt;/c0&gt; to a &lt;c1&gt;String&lt;/c1&gt; and a &lt;c2&gt;String&lt;/c2&gt; to a &lt;c3&gt;short&lt;/c3&gt;, as well as other constants and methods useful when dealing with a &lt;c4&gt;short&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121954Z" creationid="pingfangx" creationdate="20191013T121954Z">
        <seg>另外，该类提供了多个方法，可以将 &lt;c0&gt;short&lt;/c0&gt; 转换为 &lt;c1&gt;String&lt;/c1&gt;，将 &lt;c2&gt;String&lt;/c2&gt; 转换为 &lt;c3&gt;short&lt;/c3&gt;，同时还提供了其他一些处理 &lt;c4&gt;short&lt;/c4&gt; 时有用的常量和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides several methods for converting an &lt;c0&gt;int&lt;/c0&gt; to a &lt;c1&gt;String&lt;/c1&gt; and a &lt;c2&gt;String&lt;/c2&gt; to an &lt;c3&gt;int&lt;/c3&gt;, as well as other constants and methods useful when dealing with an &lt;c4&gt;int&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122836Z" creationid="pingfangx" creationdate="20191013T122658Z">
        <seg>另外，该类提供了多个方法，可以将 &lt;c0&gt;int&lt;/c0&gt; 转换为 &lt;c1&gt;String&lt;/c1&gt;，将 &lt;c2&gt;String&lt;/c2&gt; 转换为 &lt;c3&gt;int&lt;/c3&gt;，同时还提供了其他一些处理 &lt;c4&gt;int&lt;/c4&gt; 时有用的常量和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, this class provides several methods for determining a character's category (lowercase letter, digit, etc.) and for converting characters from uppercase to lowercase and vice versa.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T135049Z" creationid="pingfangx" creationdate="20191013T135049Z">
        <seg>此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In all cases that time-outs are used, the time-out specifies the minimum time that the method should wait before indicating that it timed-out.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111407Z" creationid="pingfangx" creationdate="20191025T111407Z">
        <seg>在使用超时的所有情况中，超时指定了在表明已超时前该方法应该等待的最少时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In all other respects, this method does the same thing as the method &lt;c0&gt;&lt;a1&gt;wait(long)&lt;/a1&gt;&lt;/c0&gt; of one argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133421Z" creationid="pingfangx" creationdate="20191014T133421Z">
        <seg>在其他所有方面，此方法执行的操作与带有一个参数的 &lt;c0&gt;&lt;a1&gt;wait(long)&lt;/a1&gt;&lt;/c0&gt; 方法相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In either case, the &lt;c3&gt;execute&lt;/c3&gt; method invokes the &lt;c4&gt;&lt;a5&gt;rejectedExecution(Runnable, ThreadPoolExecutor)&lt;/a5&gt;&lt;/c4&gt; method of its &lt;c6&gt;&lt;a7&gt;RejectedExecutionHandler&lt;/a7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125546Z" creationid="pingfangx" creationdate="20191025T125546Z">
        <seg>在以上两种情况下，&lt;c3&gt;execute&lt;/c3&gt; 方法都将调用其 &lt;c6&gt;&lt;a7&gt;RejectedExecutionHandler&lt;/a7&gt;&lt;/c6&gt; 的 &lt;c4&gt;&lt;a5&gt;rejectedExecution(Runnable, ThreadPoolExecutor)&lt;/a5&gt;&lt;/c4&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In environments in which the delegation model is not strictly hierarchical, class loaders need to be parallel capable, otherwise class loading can lead to deadlocks because the loader lock is held for the duration of the class loading process (see &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;loadClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; methods).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072939Z" creationid="pingfangx" creationdate="20191014T072939Z">
        <seg>在委托模型不严格分层的环境中，类装入器需要具有并行能力，否则类装入可能导致死锁，因为装入器锁在类装入过程的持续时间内保持(请参见 &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;loadClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 方法)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In essence, the classes in this package extend the notion of &lt;c0&gt;volatile&lt;/c0&gt; values, fields, and array elements to those that also provide an atomic conditional update operation of the form:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120727Z" creationid="pingfangx" creationdate="20191025T120727Z">
        <seg>事实上，此包中的类可将 &lt;c0&gt;volatile&lt;/c0&gt; 值、字段和数组元素的概念扩展到那些也提供原子条件更新操作的类，其形式如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, if sb refers to an instance of a &lt;c0&gt;StringBuffer&lt;/c0&gt;, then &lt;c1&gt;sb.append(x)&lt;/c1&gt; has the same effect as &lt;c2&gt;sb.insert(sb.length(), x)&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063929Z" creationid="pingfangx" creationdate="20191014T063929Z">
        <seg>通常，如果 sb 引用 &lt;c0&gt;StringBuilder&lt;/c0&gt; 的一个实例，则 &lt;c1&gt;sb.append(x)&lt;/c1&gt; 和 &lt;c2&gt;sb.insert(sb.length(), x)&lt;/c2&gt; 具有相同的效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, if sb refers to an instance of a &lt;c0&gt;StringBuilder&lt;/c0&gt;, then &lt;c1&gt;sb.append(x)&lt;/c1&gt; has the same effect as &lt;c2&gt;sb.insert(sb.length(), x)&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030426Z" creationid="pingfangx" creationdate="20191014T030426Z">
        <seg>通常，如果 sb 引用 &lt;c0&gt;StringBuilder&lt;/c0&gt; 的实例，则 &lt;c1&gt;sb.append(x)&lt;/c1&gt; 和 &lt;c2&gt;sb.insert(sb.length(), x)&lt;/c2&gt; 具有相同的效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, the &lt;c0&gt;toString&lt;/c0&gt; method returns a string that "textually represents" this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133148Z" creationid="pingfangx" creationdate="20191014T133148Z">
        <seg>通常，&lt;c0&gt;toString&lt;/c0&gt; 方法会返回一个“以文本方式表示”此对象的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In most cases, the &lt;c5&gt;Runnable&lt;/c5&gt; interface should be used if you are only planning to override the &lt;c6&gt;run()&lt;/c6&gt; method and no other &lt;c7&gt;Thread&lt;/c7&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154735Z" creationid="pingfangx" creationdate="20191013T154735Z">
        <seg>大多数情况下，如果只想重写 &lt;c5&gt;run()&lt;/c5&gt; 方法，而不重写其他 &lt;c6&gt;Thread&lt;/c6&gt; 方法，那么应使用 &lt;c7&gt;Runnable&lt;/c7&gt; 接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to ensure that a reclaimable object remains so, the referent of a phantom reference may not be retrieved: The &lt;c0&gt;get&lt;/c0&gt; method of a phantom reference always returns &lt;c1&gt;null&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154656Z" creationid="pingfangx" creationdate="20191014T154656Z">
        <seg>为了确保可回收的对象仍然保持原状，虚引用的指示对象不能被获取：虚引用的 &lt;c0&gt;get&lt;/c0&gt; 方法总是返回 &lt;c1&gt;null&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other cases in which multiple threads are expected to access a common collection, "concurrent" versions are normally preferable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112543Z" creationid="pingfangx" creationdate="20191025T112543Z">
        <seg>在期望多个线程访问公共 collection 的其他情况中，通常“并发”版本要更好一些。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, for class loader &lt;c0&gt;cl&lt;/c0&gt; and every interface &lt;c1&gt;i&lt;/c1&gt;, the following expression must be true:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113615Z" creationid="pingfangx" creationdate="20191015T113615Z">
        <seg>换句话说，对于类加载器 &lt;c0&gt;cl&lt;/c0&gt; 和所有接口 &lt;c1&gt;i&lt;/c1&gt;，以下表达式必须为 true：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, if the &lt;c6&gt;newLength&lt;/c6&gt; argument is less than the current length, the length is changed to the specified length.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041613Z" creationid="pingfangx" creationdate="20191014T041401Z">
        <seg>换句话说，如果 &lt;c6&gt;newLength&lt;/c6&gt; 参数小于当前长度，则长度将更改为指定的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, returns true if the specified object is an instance of the same annotation type as this instance, all of whose members are equal to the corresponding member of this annotation, as defined below:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150206Z" creationid="pingfangx" creationdate="20191014T150206Z">
        <seg>换句话说，如果指定对象是一个与此实例相同的 annotation 类型的实例，即其所有成员都与此实例中所对应的成员相等，则返回 true，具体说明如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, the public, non-final methods of &lt;c6&gt;java.lang.Object&lt;/c6&gt; logically precede all of the proxy interfaces for the determination of which &lt;c7&gt;Method&lt;/c7&gt; object to pass to the invocation handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113144Z" creationid="pingfangx" creationdate="20191015T113144Z">
        <seg>换句话说，&lt;c6&gt;java.lang.Object&lt;/c6&gt; 公共的非最终方法理论上在所有代理接口之前，以便确定哪一个 &lt;c7&gt;Method&lt;/c7&gt; 对象传递到调用处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, this method behaves exactly as if it simply performs the call &lt;c4&gt;wait(0)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135117Z" creationid="pingfangx" creationdate="20191014T135117Z">
        <seg>换句话说，此方法的行为就好像它仅执行 &lt;c4&gt;wait(0)&lt;/c4&gt; 调用一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, this method returns a string equal to the value of:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133325Z" creationid="pingfangx" creationdate="20191014T133325Z">
        <seg>换句话说，该方法返回一个字符串，它的值等于：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, waits should always occur in loops, like this one:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134647Z" creationid="pingfangx" creationdate="20191014T134647Z">
        <seg>换句话说，等待应总是发生在循环中，如下面的示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, &lt;c2&gt;wait(0, 0)&lt;/c2&gt; means the same thing as &lt;c3&gt;wait(0)&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133425Z" creationid="pingfangx" creationdate="20191014T133425Z">
        <seg>需要特别指出的是，&lt;c2&gt;wait(0, 0)&lt;/c2&gt; 与 &lt;c3&gt;wait(0)&lt;/c3&gt; 相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, a thread may not be restarted once it has completed execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085223Z" creationid="pingfangx" creationdate="20191014T085223Z">
        <seg>特别是当线程已经结束执行后，不能再重新启动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, multiple &lt;c3&gt;Condition&lt;/c3&gt; objects may be associated with a single &lt;c4&gt;Lock&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122840Z" creationid="pingfangx" creationdate="20191025T122840Z">
        <seg>需要特别指出的是，单个 &lt;c3&gt;Lock&lt;/c3&gt; 可能与多个 &lt;c4&gt;Condition&lt;/c4&gt; 对象关联。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the &lt;t0&gt;equals&lt;/t0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101850Z" creationid="pingfangx" creationdate="20191014T101850Z">
        <seg>尤其是，这样的有序集合（或有序映射表）违背了根据 &lt;t0&gt;equals&lt;/t0&gt; 方法定义的集合（或映射表）的常规协定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113158Z" creationid="pingfangx" creationdate="20191025T113158Z">
        <seg>尤其是：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In practice, soft references are inefficient for caching.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155843Z" creationid="pingfangx" creationdate="20191014T155843Z">
        <seg>实际上，软引用对于缓存是低效的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some systems, the name may refer to some source code unit other than a file, such as an entry in source repository.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095356Z" creationid="pingfangx" creationdate="20191014T095356Z">
        <seg>在某些系统中，该名称可能指的是源代码单元而不是某个文件，如源存储库中的某个项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In such cases an exception will be thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080233Z" creationid="pingfangx" creationdate="20191014T080233Z">
        <seg>在这些情况中将会抛出一个异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Java SE API documentation, &lt;e0&gt;Unicode code point&lt;/e0&gt; is used for character values in the range between U+0000 and U+10FFFF, and &lt;e1&gt;Unicode code unit&lt;/e1&gt; is used for 16-bit &lt;c2&gt;char&lt;/c2&gt; values that are code units of the &lt;e3&gt;UTF-16&lt;/e3&gt; encoding.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143835Z" creationid="pingfangx" creationdate="20191013T143800Z">
        <seg>在 Java SE API 文档中，&lt;e0&gt;Unicode 代码点&lt;/e0&gt; 用于范围在 U+0000 与 U+10FFFF 之间的字符值，而 &lt;e1&gt;Unicode 代码点&lt;/e1&gt; 用于作为 &lt;e3&gt;UTF-16&lt;/e3&gt; 编码的代码单元的 16 位 &lt;c2&gt;char&lt;/c2&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the case where IPv6 is not available, or explicitly disabled, Inet6Address are not valid arguments for most networking operations any more.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080432Z" creationid="pingfangx" creationdate="20191011T080432Z">
        <seg>在 IPv6 不可用或被显式禁用的情况下，Inet6Address 对大多数网络连接操作都不再是有效参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the default &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.AbortPolicy&lt;/a1&gt;&lt;/c0&gt;, the handler throws a runtime &lt;c2&gt;&lt;a3&gt;RejectedExecutionException&lt;/a3&gt;&lt;/c2&gt; upon rejection.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125551Z" creationid="pingfangx" creationdate="20191025T125551Z">
        <seg>在默认的 &lt;c0&gt;&lt;a1&gt;ThreadPoolExecutor.AbortPolicy&lt;/a1&gt;&lt;/c0&gt; 中，处理程序遭到拒绝将抛出运行时 &lt;c2&gt;&lt;a3&gt;RejectedExecutionException&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the event of such a SecurityException, the accessibility of objects is set to &lt;c8&gt;flag&lt;/c8&gt; for array elements upto (and excluding) the element for which the exception occurred; the accessibility of elements beyond (and including) the element for which the exception occurred is unchanged.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T091119Z" creationid="pingfangx" creationdate="20191015T091119Z">
        <seg>如果发生 SecurityException，对于少于（不包括）发生异常的元素的数组元素，可以将对象的可访问性设置为 &lt;c8&gt;flag&lt;/c8&gt;；对于超出（包括）引发异常的元素的那些元素，则不更改其可访问性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the extreme case, a virtual machine that has no stack trace information concerning this thread is permitted to return a zero-length array from this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T090826Z" creationid="pingfangx" creationdate="20191014T090826Z">
        <seg>在极端情况下，没有该线程堆栈跟踪信息的虚拟机可以从该方法返回一个零长度数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the foregoing description, the notation &lt;t0&gt;sgn(&lt;/t0&gt;&lt;i1&gt;expression&lt;/i1&gt;&lt;t2&gt;)&lt;/t2&gt; designates the mathematical &lt;i3&gt;signum&lt;/i3&gt; function, which is defined to return one of &lt;t4&gt;-1&lt;/t4&gt;, &lt;t5&gt;0&lt;/t5&gt;, or &lt;t6&gt;1&lt;/t6&gt; according to whether the value of &lt;i7&gt;expression&lt;/i7&gt; is negative, zero or positive.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103253Z" creationid="pingfangx" creationdate="20191014T103209Z">
        <seg>在前面的描述中，符号 &lt;t0&gt;sgn(&lt;/t0&gt;&lt;i1&gt;expression&lt;/i1&gt;&lt;t2&gt;)&lt;/t2&gt; 指定 &lt;i3&gt;signum&lt;/i3&gt; 数学函数，该函数根据 &lt;i7&gt;expression&lt;/i7&gt; 的值是负数、零还是正数，分别返回 &lt;t4&gt;-1&lt;/t4&gt;、&lt;t5&gt;0&lt;/t5&gt; 或 &lt;t6&gt;1&lt;/t6&gt; 中的一个值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the particular case of ConcurrentHashMap, it safely permits any number of concurrent reads as well as a tunable number of concurrent writes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112230Z" creationid="pingfangx" creationdate="20191025T112230Z">
        <seg>在 ConcurrentHashMap 这一特定情况下，它可以安全地允许进行任意数目的并发读取，以及数目可调的并发写入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, a zero length array is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T085926Z" creationid="pingfangx" creationdate="20191015T085926Z">
        <seg>在此情况下，将返回长度为零的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the component type of the new array is the component type of &lt;c6&gt;componentType&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103734Z" creationid="pingfangx" creationdate="20191015T103734Z">
        <seg>在这种情况下，新数组的组件类型为 &lt;c6&gt;componentType&lt;/c6&gt; 的组件类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this representation, supplementary characters are represented as a pair of &lt;c7&gt;char&lt;/c7&gt; values, the first from the &lt;e8&gt;high-surrogates&lt;/e8&gt; range, (\uD800-\uDBFF), the second from the &lt;e9&gt;low-surrogates&lt;/e9&gt; range (\uDC00-\uDFFF).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143424Z" creationid="pingfangx" creationdate="20191013T143310Z">
        <seg>在这种表现形式中，增补字符表示为一对 &lt;c7&gt;char&lt;/c7&gt; 值，第一个值取自&lt;e8&gt;高代理项&lt;/e8&gt; 范围，即 (\uD800-\uDBFF)，第二个值取自&lt;e9&gt;低代理项&lt;/e9&gt; 范围，即 (\uDC00-\uDFFF)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In those infrequent cases where you would like to do so, you can use an &lt;c6&gt;AtomicInteger&lt;/c6&gt; to hold &lt;c7&gt;byte&lt;/c7&gt; values, and cast appropriately.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122313Z" creationid="pingfangx" creationdate="20191025T122313Z">
        <seg>这种情况不常见，如果要这样做，可以使用 &lt;c6&gt;AtomicInteger&lt;/c6&gt; 来保持 &lt;c7&gt;byte&lt;/c7&gt; 值，并进行适当的强制转换。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In usages with well-distributed user hashCodes, tree bins are rarely used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081004Z" creationid="pingfangx" creationdate="20191026T081004Z">
        <seg>在具有分布良好的用户散列码的使用中，很少使用 tree bins。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In which case, most methods, when called with an Inet6Address will throw an Exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080454Z" creationid="pingfangx" creationdate="20191011T080454Z">
        <seg>在此情况下，大多数方法在使用 Inet6Address 调用时都将抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Index values refer to &lt;c5&gt;char&lt;/c5&gt; code units, so a supplementary character uses two positions in a &lt;c6&gt;String&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022303Z" creationid="pingfangx" creationdate="20191014T022303Z">
        <seg>索引值是指 &lt;c5&gt;char&lt;/c5&gt; 代码单元，因此增补字符在 &lt;c6&gt;String&lt;/c6&gt; 中占用两个位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates how long annotations with the annotated type are to be retained.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082754Z" creationid="pingfangx" creationdate="20191012T082720Z">
        <seg>指示注释类型的注释要保留多久。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates that a method declaration is intended to override a method declaration in a supertype.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065020Z" creationid="pingfangx" creationdate="20191012T065020Z">
        <seg>表示一个方法声明打算重写超类中的另一个方法声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates that an annotation type is automatically inherited.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082731Z" creationid="pingfangx" creationdate="20191012T082607Z">
        <seg>指示注释类型被自动继承。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates that annotations with a type are to be documented by javadoc and similar tools by default.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082730Z" creationid="pingfangx" creationdate="20191012T082558Z">
        <seg>指示某一类型的注释将通过 javadoc 和类似的默认工具进行文档化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates that one or more deserialized objects failed validation tests.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065505Z" creationid="pingfangx" creationdate="20191011T065505Z">
        <seg>指示一个或多个反序列化对象未通过验证测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates that the named compiler warnings should be suppressed in the annotated element (and in all program elements contained in the annotated element).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065056Z" creationid="pingfangx" creationdate="20191012T065056Z">
        <seg>指示应该在注释元素（以及包含在该注释元素中的所有程序元素）中取消显示指定的编译器警告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates the kinds of program element to which an annotation type is applicable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082726Z" creationid="pingfangx" creationdate="20191012T082726Z">
        <seg>指示注释类型所适用的程序元素的种类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates whether some other object is "equal to" this one.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094753Z" creationid="pingfangx" creationdate="20191012T094753Z">
        <seg>指示其他某个对象是否与此对象“相等”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Informally, with a 1 ulp error bound, when the exact result is a representable number, the exact result should be returned as the computed result; otherwise, either of the two floating-point values which bracket the exact result may be returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151318Z" creationid="pingfangx" creationdate="20191013T151318Z">
        <seg>非正式地，对于 1 ulp 的误差范围，当准确结果是可表示的数值时，应该按照计算结果返回准确结果；否则，返回包括准确结果的两个浮点值中的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inheritable thread-local variables are used in preference to ordinary thread-local variables when the per-thread-attribute being maintained in the variable (e.g., User ID, Transaction ID) must be automatically transmitted to any child threads that are created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094727Z" creationid="pingfangx" creationdate="20191014T094727Z">
        <seg>当必须将变量（如用户 ID 和 事务 ID）中维护的每线程属性（per-thread-attribute）自动传送给创建的所有子线程时，应尽可能地采用可继承的线程局部变量，而不是采用普通的线程局部变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inherited members are not included.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014921Z" creationid="pingfangx" creationdate="20191015T014921Z">
        <seg>不包括继承成员。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes a newly created &lt;c0&gt;String&lt;/c0&gt; object so that it represents an empty character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022425Z" creationid="pingfangx" creationdate="20191014T022425Z">
        <seg>初始化一个新创建的 &lt;c0&gt;String&lt;/c0&gt; 对象，使其表示一个空字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes a newly created &lt;c0&gt;String&lt;/c0&gt; object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022433Z" creationid="pingfangx" creationdate="20191014T022433Z">
        <seg>初始化一个新创建的 &lt;c0&gt;String&lt;/c0&gt; 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes or doubles table size.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094425Z" creationid="pingfangx" creationdate="20191026T094425Z">
        <seg>初始化或加倍表的大小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the &lt;i0&gt;cause&lt;/i0&gt; of this throwable to the specified value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115239Z" creationid="pingfangx" creationdate="20191013T115239Z">
        <seg>将此抛出对象的&lt;i0&gt;原因&lt;/i0&gt; 初始化为指定值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130306Z" creationid="pingfangx" creationdate="20191025T130306Z">
        <seg>按过去执行已提交任务的顺序发起一个有序的关闭，但是不接受新任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts a subsequence of the specified &lt;c0&gt;CharSequence&lt;/c0&gt; into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033838Z" creationid="pingfangx" creationdate="20191014T033838Z">
        <seg>将指定 &lt;c0&gt;CharSequence&lt;/c0&gt; 的子序列插入到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the specified &lt;c0&gt;CharSequence&lt;/c0&gt; into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033609Z" creationid="pingfangx" creationdate="20191014T033609Z">
        <seg>将指定 &lt;c0&gt;CharSequence&lt;/c0&gt; 插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string into this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033737Z" creationid="pingfangx" creationdate="20191014T033737Z">
        <seg> 将字符串插入此字符序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of a subarray of the &lt;c0&gt;str&lt;/c0&gt; array argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033612Z" creationid="pingfangx" creationdate="20191014T033612Z">
        <seg>将 &lt;c0&gt;str&lt;/c0&gt; 数组参数的子数组的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the &lt;c0&gt;Object&lt;/c0&gt; argument into this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033858Z" creationid="pingfangx" creationdate="20191014T033858Z">
        <seg>将 &lt;c0&gt;Object&lt;/c0&gt; 参数的字符串表示形式插入此字符序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the &lt;c0&gt;boolean&lt;/c0&gt; argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033900Z" creationid="pingfangx" creationdate="20191014T033900Z">
        <seg>将 &lt;c0&gt;boolean&lt;/c0&gt; 参数的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the &lt;c0&gt;char&lt;/c0&gt; argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033610Z" creationid="pingfangx" creationdate="20191014T033610Z">
        <seg>将 &lt;c0&gt;char&lt;/c0&gt; 参数的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the &lt;c0&gt;char&lt;/c0&gt; array argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033606Z" creationid="pingfangx" creationdate="20191014T033606Z">
        <seg>将 &lt;c0&gt;char&lt;/c0&gt; 数组参数的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the &lt;c0&gt;double&lt;/c0&gt; argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033739Z" creationid="pingfangx" creationdate="20191014T033739Z">
        <seg>将 &lt;c0&gt;double&lt;/c0&gt; 参数的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the &lt;c0&gt;float&lt;/c0&gt; argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033607Z" creationid="pingfangx" creationdate="20191014T033607Z">
        <seg>将 &lt;c0&gt;float&lt;/c0&gt; 参数的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the &lt;c0&gt;long&lt;/c0&gt; argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033611Z" creationid="pingfangx" creationdate="20191014T033611Z">
        <seg>将 &lt;c0&gt;long&lt;/c0&gt; 参数的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the string representation of the second &lt;c0&gt;int&lt;/c0&gt; argument into this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033614Z" creationid="pingfangx" creationdate="20191014T033614Z">
        <seg>将 &lt;c0&gt;int&lt;/c0&gt; 参数的字符串表示形式插入此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of &lt;c0&gt;StringBuilder&lt;/c0&gt; are not safe for use by multiple threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030441Z" creationid="pingfangx" creationdate="20191014T030441Z">
        <seg>将 &lt;c0&gt;StringBuilder&lt;/c0&gt; 的实例用于多个线程是不安全的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of classes &lt;c0&gt;&lt;a1&gt;AtomicBoolean&lt;/a1&gt;&lt;/c0&gt;, &lt;c2&gt;&lt;a3&gt;AtomicInteger&lt;/a3&gt;&lt;/c2&gt;, &lt;c4&gt;&lt;a5&gt;AtomicLong&lt;/a5&gt;&lt;/c4&gt;, and &lt;c6&gt;&lt;a7&gt;AtomicReference&lt;/a7&gt;&lt;/c6&gt; each provide access and updates to a single variable of the corresponding type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120758Z" creationid="pingfangx" creationdate="20191025T120758Z">
        <seg>类 &lt;c0&gt;&lt;a1&gt;AtomicBoolean&lt;/a1&gt;&lt;/c0&gt;、&lt;c2&gt;&lt;a3&gt;AtomicInteger&lt;/a3&gt;&lt;/c2&gt;、&lt;c4&gt;&lt;a5&gt;AtomicLong&lt;/a5&gt;&lt;/c4&gt; 和 &lt;c6&gt;&lt;a7&gt;AtomicReference&lt;/a7&gt;&lt;/c6&gt; 的实例各自提供对相应类型单个变量的访问和更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of classes that implement this interface are used to filter filenames.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094042Z" creationid="pingfangx" creationdate="20191010T094042Z">
        <seg>实现此接口的类实例可用于过滤器文件名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of classes that implement this interface must implement an equals() method that equates any two instances that share the same generic type declaration and have equal type parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071643Z" creationid="pingfangx" creationdate="20191015T071643Z">
        <seg>实现此接口的类的实例必须实现 equals() 方法，该方法用于比较两个共享相同一般类型声明和具有相同类型参数的任何实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of the class &lt;c0&gt;Class&lt;/c0&gt; represent classes and interfaces in a running Java application.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071229Z" creationid="pingfangx" creationdate="20191012T071229Z">
        <seg>&lt;c0&gt;Class&lt;/c0&gt; 类的实例表示正在运行的 Java 应用程序中的类和接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of the file descriptor class serve as an opaque handle to the underlying machine-specific structure representing an open file, an open socket, or another source or sink of bytes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094742Z" creationid="pingfangx" creationdate="20191010T094742Z">
        <seg>文件描述符类的实例用作与基础机器有关的某种结构的不透明句柄，该结构表示开放文件、开放套接字或者字节的另一个源或接收者。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of this class represent particular subsets of the Unicode character set.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071221Z" creationid="pingfangx" creationdate="20191012T071221Z">
        <seg>此类的实例表示 Unicode 字符集的特定子集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of this class support both reading and writing to a random access file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102743Z" creationid="pingfangx" creationdate="20191010T102743Z">
        <seg>此类的实例支持对随机访问文件的读取和写入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of this newly defined class can be created using &lt;c4&gt;&lt;a5&gt;&lt;t6&gt;Class.newInstance&lt;/t6&gt;&lt;/a5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072246Z" creationid="pingfangx" creationdate="20191014T072246Z">
        <seg>这种新定义的类的实例可以使用 &lt;c4&gt;&lt;a5&gt;&lt;t6&gt;Class.newInstance&lt;/t6&gt;&lt;/a5&gt;&lt;/c4&gt; 来创建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of two subclasses, &lt;c0&gt;&lt;a1&gt;Error&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;Exception&lt;/a3&gt;&lt;/c2&gt;, are conventionally used to indicate that exceptional situations have occurred.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113216Z" creationid="pingfangx" creationdate="20191013T113216Z">
        <seg>两个子类的实例，&lt;c0&gt;&lt;a1&gt;Error&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;Exception&lt;/a3&gt;&lt;/c2&gt;，通常用于指示发生了异常情况。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead &lt;c1&gt;Class&lt;/c1&gt; objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the &lt;c2&gt;defineClass&lt;/c2&gt; method in the class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T024756Z" creationid="pingfangx" creationdate="20191013T024756Z">
        <seg>&lt;c1&gt;Class&lt;/c1&gt; 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 &lt;c2&gt;defineClass&lt;/c2&gt; 方法自动构造的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, for the &lt;c3&gt;Math&lt;/c3&gt; class, a larger error bound of 1 or 2 ulps is allowed for certain methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151309Z" creationid="pingfangx" creationdate="20191013T151309Z">
        <seg>相反，对于 &lt;c3&gt;Math&lt;/c3&gt; 类，某些方法允许误差在 1 或 2 ulp 的范围内。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface for extending managed parallelism for tasks running in &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt;s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T115644Z" creationid="pingfangx" creationdate="20191025T115644Z">
        <seg>用于扩展在 &lt;c0&gt;&lt;a1&gt;ForkJoinPool&lt;/a1&gt;&lt;/c0&gt; 中运行的任务的托管并行性的接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface for handlers invoked when a &lt;t0&gt;Thread&lt;/t0&gt; abruptly terminates due to an uncaught exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T070031Z" creationid="pingfangx" creationdate="20191012T070031Z">
        <seg>当 &lt;t0&gt;Thread&lt;/t0&gt; 因未捕获的异常而突然终止时，调用处理程序的接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface of methods to get/set socket options.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083127Z" creationid="pingfangx" creationdate="20191011T083127Z">
        <seg>获取/设置套接字选项的方法的接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interfaces</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T093602Z" creationid="pingfangx" creationdate="20191010T093602Z">
        <seg>接口</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122735Z" creationid="pingfangx" creationdate="20191025T122735Z">
        <seg>为锁和等待条件提供一个框架的接口和类，它不同于内置同步和监视器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interrupts all threads in this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093218Z" creationid="pingfangx" creationdate="20191014T093218Z">
        <seg>中断此线程组中的所有线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interrupts this thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082021Z" creationid="pingfangx" creationdate="20191014T082021Z">
        <seg>中断线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>InvocationTargetException is a checked exception that wraps an exception thrown by an invoked method or constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092154Z" creationid="pingfangx" creationdate="20191012T092154Z">
        <seg>InvocationTargetException 是一种包装由调用方法或构造方法所抛出异常的经过检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes &lt;c0&gt;shutdown&lt;/c0&gt; when this executor is no longer referenced and it has no threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130403Z" creationid="pingfangx" creationdate="20191025T130403Z">
        <seg>当不再引用此执行程序并且没有线程时，调用 &lt;c0&gt;shutdown&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes the underlying method represented by this &lt;c0&gt;Method&lt;/c0&gt; object, on the specified object with the specified parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110235Z" creationid="pingfangx" creationdate="20191015T110235Z">
        <seg>对带有指定参数的指定对象调用由此 &lt;c0&gt;Method&lt;/c0&gt; 对象表示的底层方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking Object's clone method on an instance that does not implement the &lt;c0&gt;Cloneable&lt;/c0&gt; interface results in the exception &lt;c1&gt;CloneNotSupportedException&lt;/c1&gt; being thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101447Z" creationid="pingfangx" creationdate="20191014T101447Z">
        <seg>如果在没有实现 &lt;c0&gt;Cloneable&lt;/c0&gt; 接口的实例上调用 Object 的 clone 方法，则会导致抛出 &lt;c1&gt;CloneNotSupportedException&lt;/c1&gt; 异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking this method is equivalent to creating an array as follows:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103804Z" creationid="pingfangx" creationdate="20191015T103804Z">
        <seg>调用此方法等效于如下创建一个数组：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking this method will not cause this object to be enqueued.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155154Z" creationid="pingfangx" creationdate="20191014T155154Z">
        <seg>调用此方法不会导致对象被加入队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It applies only when critical updates for an object are confined to a &lt;e1&gt;single&lt;/e1&gt; variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122203Z" creationid="pingfangx" creationdate="20191025T122203Z">
        <seg>仅当对象的重要更新限定于&lt;e1&gt;单个&lt;/e1&gt; 变量时才应用它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can also contain a message string that gives more information about the error.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113231Z" creationid="pingfangx" creationdate="20191013T113231Z">
        <seg>它还包含了给出有关错误更多信息的消息字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can only be used on annotation type declarations:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152258Z" creationid="pingfangx" creationdate="20191014T152258Z">
        <seg>它只能用在注释类型声明上：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It cannot be instantiated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153934Z" creationid="pingfangx" creationdate="20191013T153934Z">
        <seg>它不能被实例化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It cannot be used to annotate anything directly:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152302Z" creationid="pingfangx" creationdate="20191014T152302Z">
        <seg>它不能直接用于注释：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It does not support the &lt;t7&gt;add&lt;/t7&gt; or &lt;t8&gt;addAll&lt;/t8&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095053Z" creationid="pingfangx" creationdate="20191026T095053Z">
        <seg>它不支持 &lt;t7&gt;add&lt;/t7&gt; 或 &lt;t8&gt;addAll&lt;/t8&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It does not support the &lt;t8&gt;add&lt;/t8&gt; or &lt;t9&gt;addAll&lt;/t9&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141116Z" creationid="pingfangx" creationdate="20191025T141116Z">
        <seg>它不支持 &lt;t8&gt;add&lt;/t8&gt; 或 &lt;t9&gt;addAll&lt;/t9&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It does not support the &lt;t9&gt;add&lt;/t9&gt; or &lt;t10&gt;addAll&lt;/t10&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140631Z" creationid="pingfangx" creationdate="20191025T140631Z">
        <seg>它不支持 &lt;t9&gt;add&lt;/t9&gt; 或 &lt;t10&gt;addAll&lt;/t10&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It follows immediately from the contract for &lt;t0&gt;compareTo&lt;/t0&gt; that the quotient is an &lt;i1&gt;equivalence relation&lt;/i1&gt; on &lt;t2&gt;C&lt;/t2&gt;, and that the natural ordering is a &lt;i3&gt;total order&lt;/i3&gt; on &lt;t4&gt;C&lt;/t4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T102140Z" creationid="pingfangx" creationdate="20191014T102140Z">
        <seg>紧接着从 &lt;t0&gt;compareTo&lt;/t0&gt; 的合同开始，商是 &lt;t2&gt;C&lt;/t2&gt; 上的 &lt;i1&gt;equivalence relation (等价关系)&lt;/i1&gt;，自然顺序是 &lt;t4&gt;C&lt;/t4&gt; 上的 &lt;i3&gt;total order (总顺序)&lt;/i3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has no effect if the meta-annotated type is used as a member type in another annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152149Z" creationid="pingfangx" creationdate="20191014T152149Z">
        <seg>如果元注释类型用作另一种注释类型的成员，则无效。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has two subclasses:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080207Z" creationid="pingfangx" creationdate="20191011T080207Z">
        <seg>它拥有两个子类：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is &lt;e0&gt;not&lt;/e0&gt; required that if two objects are unequal according to the &lt;c1&gt;&lt;a2&gt;equals(java.lang.Object)&lt;/a2&gt;&lt;/c1&gt; method, then calling the &lt;c3&gt;hashCode&lt;/c3&gt; method on each of the two objects must produce distinct integer results.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132408Z" creationid="pingfangx" creationdate="20191014T132408Z">
        <seg>如果根据 &lt;c1&gt;&lt;a2&gt;equals(java.lang.Object)&lt;/a2&gt;&lt;/c1&gt; 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 &lt;c3&gt;hashCode&lt;/c3&gt; 方法&lt;e0&gt;不&lt;/e0&gt; 要求一定生成不同的整数结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is &lt;i0&gt;consistent&lt;/i0&gt;: for any non-null reference values &lt;c1&gt;x&lt;/c1&gt; and &lt;c2&gt;y&lt;/c2&gt;, multiple invocations of &lt;c3&gt;x.equals(y)&lt;/c3&gt; consistently return &lt;c4&gt;true&lt;/c4&gt; or consistently return &lt;c5&gt;false&lt;/c5&gt;, provided no information used in &lt;c6&gt;equals&lt;/c6&gt; comparisons on the objects is modified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130258Z" creationid="pingfangx" creationdate="20191014T130258Z">
        <seg>&lt;i0&gt;一致性&lt;/i0&gt;：对于任何非空引用值 &lt;c1&gt;x&lt;/c1&gt; 和 &lt;c2&gt;y&lt;/c2&gt;，多次调用 &lt;c3&gt;x.equals(y)&lt;/c3&gt; 始终返回 &lt;c4&gt;true&lt;/c4&gt; 或始终返回 &lt;c5&gt;false&lt;/c5&gt;，前提是对象上 &lt;c6&gt;equals&lt;/c6&gt; 比较中所用的信息没有被修改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is &lt;i0&gt;reflexive&lt;/i0&gt;: for any non-null reference value &lt;c1&gt;x&lt;/c1&gt;, &lt;c2&gt;x.equals(x)&lt;/c2&gt; should return &lt;c3&gt;true&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130159Z" creationid="pingfangx" creationdate="20191014T130124Z">
        <seg> &lt;i0&gt;自反性&lt;/i0&gt;：对于任何非空引用值 &lt;c1&gt;x&lt;/c1&gt;，&lt;c2&gt;x.equals(x)&lt;/c2&gt; 都应返回 &lt;c3&gt;true&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is &lt;i0&gt;symmetric&lt;/i0&gt;: for any non-null reference values &lt;c1&gt;x&lt;/c1&gt; and &lt;c2&gt;y&lt;/c2&gt;, &lt;c3&gt;x.equals(y)&lt;/c3&gt; should return &lt;c4&gt;true&lt;/c4&gt; if and only if &lt;c5&gt;y.equals(x)&lt;/c5&gt; returns &lt;c6&gt;true&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130214Z" creationid="pingfangx" creationdate="20191014T130214Z">
        <seg>&lt;i0&gt;对称性&lt;/i0&gt;：对于任何非空引用值 &lt;c1&gt;x&lt;/c1&gt; 和 &lt;c2&gt;y&lt;/c2&gt;，当且仅当 &lt;c3&gt;y.equals(x)&lt;/c3&gt; 返回 &lt;c4&gt;true&lt;/c4&gt; 时，&lt;c5&gt;x.equals(y)&lt;/c5&gt; 才应返回 &lt;c6&gt;true&lt;/c6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is &lt;i0&gt;transitive&lt;/i0&gt;: for any non-null reference values &lt;c1&gt;x&lt;/c1&gt;, &lt;c2&gt;y&lt;/c2&gt;, and &lt;c3&gt;z&lt;/c3&gt;, if &lt;c4&gt;x.equals(y)&lt;/c4&gt; returns &lt;c5&gt;true&lt;/c5&gt; and &lt;c6&gt;y.equals(z)&lt;/c6&gt; returns &lt;c7&gt;true&lt;/c7&gt;, then &lt;c8&gt;x.equals(z)&lt;/c8&gt; should return &lt;c9&gt;true&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130242Z" creationid="pingfangx" creationdate="20191014T130242Z">
        <seg>&lt;i0&gt;传递性&lt;/i0&gt;：对于任何非空引用值 &lt;c1&gt;x&lt;/c1&gt;、&lt;c2&gt;y&lt;/c2&gt; 和 &lt;c3&gt;z&lt;/c3&gt;，如果 &lt;c4&gt;x.equals(y)&lt;/c4&gt; 返回 &lt;c5&gt;true&lt;/c5&gt;，并且 &lt;c6&gt;y.equals(z)&lt;/c6&gt; 返回 &lt;c7&gt;true&lt;/c7&gt;，那么 &lt;c8&gt;x.equals(z)&lt;/c8&gt; 应返回 &lt;c9&gt;true&lt;/c9&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a compile-time error for a single ElementType constant to appear more than once in a Target annotation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152306Z" creationid="pingfangx" creationdate="20191014T152306Z">
        <seg>这是一个编译时错误，它表明一个 ElementType 常量在 Target 注释中出现了不只一次。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also possible to get the &lt;c0&gt;Class&lt;/c0&gt; object for a named type (or for void) using a class literal.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T035844Z" creationid="pingfangx" creationdate="20191013T035844Z">
        <seg>还可以使用一个类字面值来获取指定类型（或 void）的 &lt;c0&gt;Class&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is designed for use by sophisticated enum-based data structures, such as &lt;c0&gt;&lt;a1&gt;EnumSet&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;EnumMap&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094530Z" creationid="pingfangx" creationdate="20191014T094530Z">
        <seg>它被设计用于复杂的基于枚举的数据结构，比如 &lt;c0&gt;&lt;a1&gt;EnumSet&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;EnumMap&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is for use by code emitted by the compiler in response to enum type declarations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094154Z" creationid="pingfangx" creationdate="20191014T094154Z">
        <seg>它由编译器发出的代码用于响应枚举类型声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140218Z" creationid="pingfangx" creationdate="20191014T140218Z">
        <seg>但可以保证在调用 finalize 时，调用 finalize 的线程将不会持有任何用户可见的同步锁定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is never legal to start a thread more than once.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085212Z" creationid="pingfangx" creationdate="20191014T085212Z">
        <seg>多次启动一个线程是非法的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is not checked whether &lt;c1&gt;command&lt;/c1&gt; corresponds to a valid operating system command.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075957Z" creationid="pingfangx" creationdate="20191014T075957Z">
        <seg>不必检查 &lt;c1&gt;command&lt;/c1&gt; 是否为一个有效的操作系统命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is not checked whether &lt;c2&gt;command&lt;/c2&gt; corresponds to a valid operating system command.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075953Z" creationid="pingfangx" creationdate="20191014T075953Z">
        <seg>不必检查 &lt;c2&gt;command&lt;/c2&gt; 是否为一个有效的操作系统命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is permissible for the caller to modify the arrays returned by accessors for array-valued enum members; it will have no affect on the arrays returned to other callers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161037Z" creationid="pingfangx" creationdate="20191014T161037Z">
        <seg>调用者可以修改已赋值数组枚举成员的访问器返回的数组；这不会对其他调用者返回的数组产生任何影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to create a phantom reference with a &lt;t0&gt;null&lt;/t0&gt; queue, but such a reference is completely useless: Its &lt;t1&gt;get&lt;/t1&gt; method will always return null and, since it does not have a queue, it will never be enqueued.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154804Z" creationid="pingfangx" creationdate="20191014T154804Z">
        <seg>可能用一个 &lt;t0&gt;null&lt;/t0&gt; 队列创建虚引用，但这样的引用是完全无用的：其 &lt;t1&gt;get&lt;/t1&gt; 方法将总是返回 null，同时，因为它没有队列，所以将永远无法把它加入队列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to define and use other kinds of &lt;c0&gt;&lt;a1&gt;RejectedExecutionHandler&lt;/a1&gt;&lt;/c0&gt; classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125711Z" creationid="pingfangx" creationdate="20191025T125711Z">
        <seg>定义和使用其他种类的 &lt;c0&gt;&lt;a1&gt;RejectedExecutionHandler&lt;/a1&gt;&lt;/c0&gt; 类也是可能的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to modify the state of an object so that &lt;c2&gt;&lt;a3&gt;start()&lt;/a3&gt;&lt;/c2&gt; will fail.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075835Z" creationid="pingfangx" creationdate="20191014T075835Z">
        <seg>可以修改对象的状态，但这样 &lt;c2&gt;&lt;a3&gt;start()&lt;/a3&gt;&lt;/c2&gt; 将会失败。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is recommended that all subclasses override this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133223Z" creationid="pingfangx" creationdate="20191014T133223Z">
        <seg>建议所有子类都重写此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is straightforward to define new utility functions that, like &lt;c0&gt;getAndIncrement&lt;/c0&gt;, apply a function to a value atomically.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121022Z" creationid="pingfangx" creationdate="20191025T121022Z">
        <seg>很容易定义新的实用程序函数，比如 &lt;c0&gt;getAndIncrement&lt;/c0&gt;，它自动地将函数应用于值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is strongly recommended (though not required) that natural orderings be consistent with equals.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101844Z" creationid="pingfangx" creationdate="20191014T101844Z">
        <seg>建议（虽然不是必需的）最好使自然排序与 equals 一致。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is strongly recommended, but &lt;i0&gt;not&lt;/i0&gt; strictly required that &lt;t1&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/t1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103152Z" creationid="pingfangx" creationdate="20191014T103059Z">
        <seg>强烈推荐 &lt;t1&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/t1&gt; 这种做法，但并&lt;i0&gt;不是&lt;/i0&gt; 严格要求这样做。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is the responsibility of the program using reference objects to ensure that the objects remain reachable for as long as the program is interested in their referents.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090241Z" creationid="pingfangx" creationdate="20191012T090241Z">
        <seg>使用引用对象的程序的责任是，确保对象是可达到的，只要程序对其指示对象感兴趣。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is therefore inappropriate to use arbitrary &lt;t5&gt;CharSequence&lt;/t5&gt; instances as elements in a set or as keys in a map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070412Z" creationid="pingfangx" creationdate="20191014T070412Z">
        <seg>因此，使用任意 &lt;t5&gt;CharSequence&lt;/t5&gt; 实例作为集合中的元素或映射中的键是不合适的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is through that class that you can check if any of the local interfaces is configured to support IPv6.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081014Z" creationid="pingfangx" creationdate="20191011T081014Z">
        <seg>只有通过该类才可以检查是否将所有本地接口都配置为支持 IPv6。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is, however, possible to add to the search path by setting the &lt;c0&gt;java.protocol.handler.pkgs&lt;/c0&gt; system property.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082904Z" creationid="pingfangx" creationdate="20191011T082904Z">
        <seg>但是，通过设置 &lt;c0&gt;java.protocol.handler.pkgs&lt;/c0&gt; 系统属性也可能增加搜索路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154455Z" creationid="pingfangx" creationdate="20191013T154455Z">
        <seg>它可能对正在使用的对象调用终结方法，而其他线程同时正在操作这些对象，从而导致不正确的行为或死锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It preserves the flexibility to change the implementation of the upper layer without changing its API (in particular, the set of exceptions thrown by its methods).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113314Z" creationid="pingfangx" creationdate="20191013T113314Z">
        <seg>这种方式保留了改变高层实现而不改变其 API 的灵活性（尤其是，异常集合通过其方法抛出）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It provides the ability to flag a reflected object as suppressing default Java language access control checks when it is used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090432Z" creationid="pingfangx" creationdate="20191015T090432Z">
        <seg>它提供了将反射的对象标记为在使用时取消默认 Java 语言访问控制检查的能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It then competes in the usual manner with other threads for the right to synchronize on the object; once it has gained control of the object, all its synchronization claims on the object are restored to the status quo ante - that is, to the situation as of the time that the &lt;c1&gt;wait&lt;/c1&gt; method was invoked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134250Z" creationid="pingfangx" creationdate="20191014T134250Z">
        <seg>然后，该线程以常规方式与其他线程竞争，以获得在该对象上同步的权利；一旦获得对该对象的控制权，该对象上的所有其同步声明都将被恢复到以前的状态，这就是调用 &lt;c1&gt;wait&lt;/c1&gt; 方法时的情况。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It would be bad design to let the throwable thrown by the lower layer propagate outward, as it is generally unrelated to the abstraction provided by the upper layer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113258Z" creationid="pingfangx" creationdate="20191013T113258Z">
        <seg>让低层抛出的 throwable 向外传播是一种糟糕的设计方法，因为它通常与高层提供的抽象不相关。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iteration over collection views requires time proportional to the "capacity" of the &lt;t2&gt;HashMap&lt;/t2&gt; instance (the number of buckets) plus its size (the number of key-value mappings).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T131753Z" creationid="pingfangx" creationdate="20191025T131753Z">
        <seg>迭代 collection 视图所需的时间与 &lt;t2&gt;HashMap&lt;/t2&gt; 实例的“容量”（桶的数量）及其大小（键-值映射关系数）成比例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its functionality has been replaced by &lt;c1&gt;java.security.KeyStore&lt;/c1&gt;, the &lt;c2&gt;java.security.cert&lt;/c2&gt; package, and &lt;c3&gt;java.security.Principal&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032236Z" creationid="pingfangx" creationdate="20191012T032236Z">
        <seg>其功能已由 &lt;c1&gt;java.security.KeyStore&lt;/c1&gt; 、 &lt;c2&gt;java.security.cert&lt;/c2&gt; 包和 &lt;c3&gt;java.security.Principal&lt;/c3&gt; 所取代。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Keep-alive times</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124359Z" creationid="pingfangx" creationdate="20191025T124359Z">
        <seg>保持活动时间</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key factories are used to convert &lt;i0&gt;keys&lt;/i0&gt; (opaque cryptographic keys of type &lt;c1&gt;Key&lt;/c1&gt;) into &lt;i2&gt;key specifications&lt;/i2&gt; (transparent representations of the underlying key material), and vice versa.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032253Z" creationid="pingfangx" creationdate="20191012T032253Z">
        <seg>密钥工厂用于将 &lt;i0&gt;密钥&lt;/i0&gt; （ &lt;c1&gt;Key&lt;/c1&gt; 类型的不透明加密密钥）转换成 &lt;i2&gt;密钥规范&lt;/i2&gt; （底层密钥材料的透明表示），反之亦然。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032559Z" creationid="pingfangx" creationdate="20191012T032559Z">
        <seg>Key 类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Kills the subprocess.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074900Z" creationid="pingfangx" creationdate="20191014T074900Z">
        <seg>杀掉子进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Known Direct Subclasses</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T105642Z" creationid="pingfangx" creationdate="20191013T105642Z">
        <seg>直接已知子类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Known Indirect Subclasses</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T105727Z" creationid="pingfangx" creationdate="20191013T105727Z">
        <seg>已知间接子类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Legacy security code; do not use.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100343Z" creationid="pingfangx" creationdate="20191010T100343Z">
        <seg>遗留安全代码；不要使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let &lt;i0&gt;n&lt;/i0&gt; be the character length of this character sequence (not the length in &lt;c1&gt;char&lt;/c1&gt; values) just prior to execution of the &lt;c2&gt;reverse&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063523Z" creationid="pingfangx" creationdate="20191014T063523Z">
        <seg>假设 &lt;i0&gt;n&lt;/i0&gt; 为执行 &lt;c2&gt;reverse&lt;/c2&gt; 方法前此字符序列的字符长度（并非 &lt;c1&gt;char&lt;/c1&gt; 值的长度），</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let &lt;i0&gt;n&lt;/i0&gt; be the length of the old character sequence, the one contained in the &lt;t1&gt;StringBuffer&lt;/t1&gt; just prior to execution of the &lt;t2&gt;append&lt;/t2&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064429Z" creationid="pingfangx" creationdate="20191014T064429Z">
        <seg>在执行 &lt;t2&gt;append&lt;/t2&gt; 方法前，让 &lt;t1&gt;StringBuffer&lt;/t1&gt; 中包含的原有字符序列的长度为 &lt;i0&gt;n&lt;/i0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let &lt;i0&gt;n&lt;/i0&gt; be the length of this character sequence just prior to execution of the &lt;c1&gt;append&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034850Z" creationid="pingfangx" creationdate="20191014T034850Z">
        <seg>假设此字符序列的长度在执行 &lt;c1&gt;append&lt;/c1&gt; 方法前为 &lt;i0&gt;n&lt;/i0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let &lt;i0&gt;n&lt;/i0&gt; be the length of this character sequence just prior to execution of the &lt;t1&gt;append&lt;/t1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035044Z" creationid="pingfangx" creationdate="20191014T035044Z">
        <seg>假设此字符序列的长度在执行 &lt;t1&gt;append&lt;/t1&gt; 方法前为 &lt;i0&gt;n&lt;/i0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LinkedHashMap support</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095915Z" creationid="pingfangx" creationdate="20191026T095915Z">
        <seg>LinkedHashMap 支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Links the specified class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073423Z" creationid="pingfangx" creationdate="20191014T073423Z">
        <seg>链接指定的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lists (and arrays) of objects that implement this interface can be sorted automatically by &lt;c0&gt;&lt;a1&gt;Collections.sort&lt;/a1&gt;&lt;/c0&gt; (and &lt;c2&gt;&lt;a3&gt;Arrays.sort&lt;/a3&gt;&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101627Z" creationid="pingfangx" creationdate="20191014T101627Z">
        <seg>实现此接口的对象列表（和数组）可以通过 &lt;c0&gt;&lt;a1&gt;Collections.sort&lt;/a1&gt;&lt;/c0&gt;（和 &lt;c2&gt;&lt;a3&gt;Arrays.sort&lt;/a3&gt;&lt;/c2&gt;）进行自动排序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Loads a code file with the specified filename from the local file system as a dynamic library.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154355Z" creationid="pingfangx" creationdate="20191013T154355Z">
        <seg>从作为动态库的本地文件系统中以指定的文件名加载代码文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Loads the class with the specified &lt;a0&gt;binary name&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073053Z" creationid="pingfangx" creationdate="20191014T073053Z">
        <seg>使用指定的&lt;a0&gt;二进制名称&lt;/a0&gt;来加载类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Loads the dynamic library with the specified library name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153634Z" creationid="pingfangx" creationdate="20191013T153634Z">
        <seg>加载具有指定库名的动态库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Loads the specified filename as a dynamic library.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153632Z" creationid="pingfangx" creationdate="20191013T153632Z">
        <seg>加载作为动态库的指定文件名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Loads the system library specified by the &lt;c0&gt;libname&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154359Z" creationid="pingfangx" creationdate="20191013T154359Z">
        <seg>加载由 &lt;c0&gt;libname&lt;/c0&gt; 参数指定的系统库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Local variable declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152407Z" creationid="pingfangx" creationdate="20191014T152407Z">
        <seg>局部变量声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LruCache has an effective eviction policy and lets the user tune how much memory is allotted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155942Z" creationid="pingfangx" creationdate="20191014T155942Z">
        <seg>LruCache 有一个有效的逐出策略，允许用户调整分配了多少内存。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MUST be a power of two &lt;= 1&lt;&lt;30.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082318Z" creationid="pingfangx" creationdate="20191026T082318Z">
        <seg>必须是 2 的幂，&lt;= 1&lt;&lt;30。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many of the classes provided in this package (the cryptographic and secure random number generator classes in particular) are provider-based.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T151954Z" creationid="pingfangx" creationdate="20191011T151954Z">
        <seg>此包中提供的许多类（特别是密码和安全随机数生成器类）是基于提供商的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many uses of &lt;c1&gt;stop&lt;/c1&gt; should be replaced by code that simply modifies some variable to indicate that the target thread should stop running.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082835Z" creationid="pingfangx" creationdate="20191014T082835Z">
        <seg>许多使用 &lt;c1&gt;stop&lt;/c1&gt; 的代码应该被简单地修改一些变量以指示目标线程应该停止运行的代码所替代。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Maps a library name into a platform-specific string representing a native library.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154403Z" creationid="pingfangx" creationdate="20191013T154403Z">
        <seg>将一个库名称映射到特定于平台的、表示本机库的字符串中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marker interface used by &lt;t0&gt;List&lt;/t0&gt; implementations to indicate that they support fast (generally constant time) random access.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034836Z" creationid="pingfangx" creationdate="20191012T034836Z">
        <seg>&lt;t0&gt;List&lt;/t0&gt; 实现所使用的标记接口，用来表明其支持快速（通常是固定时间）随机访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks this thread as either a &lt;a0&gt;daemon&lt;/a0&gt;&lt;/a1&gt; thread or a user thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082151Z" creationid="pingfangx" creationdate="20191014T082151Z">
        <seg>将该线程标记为 &lt;a0&gt;守护&lt;/a0&gt;&lt;/a1&gt; 线程或用户线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Maximum exponent a finite &lt;c0&gt;double&lt;/c0&gt; variable may have.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132604Z" creationid="pingfangx" creationdate="20191013T132604Z">
        <seg>有限 &lt;c0&gt;double&lt;/c0&gt; 变量可能具有的最大指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Maximum exponent a finite &lt;c0&gt;float&lt;/c0&gt; variable may have.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T131354Z" creationid="pingfangx" creationdate="20191013T131354Z">
        <seg>有限 &lt;c0&gt;float&lt;/c0&gt; 变量可能具有的最大指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Member is an interface that reflects identifying information about a single member (a field or a method) or a constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091109Z" creationid="pingfangx" creationdate="20191012T091109Z">
        <seg>成员是一种接口，反映有关单个成员（字段或方法）或构造方法的标识信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory Consistency Properties</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112751Z" creationid="pingfangx" creationdate="20191025T112751Z">
        <seg>内存一致性属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method &lt;c0&gt;&lt;a1&gt;getQueue()&lt;/a1&gt;&lt;/c0&gt; allows access to the work queue for purposes of monitoring and debugging.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125750Z" creationid="pingfangx" creationdate="20191025T125750Z">
        <seg>方法 &lt;c0&gt;&lt;a1&gt;getQueue()&lt;/a1&gt;&lt;/c0&gt; 允许出于监控和调试目的而访问工作队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152408Z" creationid="pingfangx" creationdate="20191014T152408Z">
        <seg>方法声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method invoked prior to executing the given Runnable in the given thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130333Z" creationid="pingfangx" creationdate="20191025T130333Z">
        <seg>在执行给定线程中的给定 Runnable 之前调用的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method invoked upon completion of execution of the given Runnable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130332Z" creationid="pingfangx" creationdate="20191025T130332Z">
        <seg>基于完成执行给定 Runnable 所调用的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method invoked when the Executor has terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130405Z" creationid="pingfangx" creationdate="20191025T130405Z">
        <seg>当 Executor 已经终止时调用的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method invoked when the given thread terminates due to the given uncaught exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T092646Z" creationid="pingfangx" creationdate="20191014T092646Z">
        <seg>当给定线程因给定的未捕获异常而终止时，调用该方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method's declaring class</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104119Z" creationid="pingfangx" creationdate="20191015T104119Z">
        <seg>方法的声明类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods Duplicated in Multiple Proxy Interfaces</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112931Z" creationid="pingfangx" creationdate="20191015T112931Z">
        <seg>在多代理接口中重复的方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods to access the character-based console device, if any, associated with the current Java virtual machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094710Z" creationid="pingfangx" creationdate="20191010T094710Z">
        <seg>此类包含多个方法，可访问与当前 Java 虚拟机关联的基于字符的控制台设备（如果有）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Minimum exponent a normalized &lt;c0&gt;double&lt;/c0&gt; variable may have.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132609Z" creationid="pingfangx" creationdate="20191013T132609Z">
        <seg>标准化 &lt;c0&gt;double&lt;/c0&gt; 变量可能具有的最小指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Minimum exponent a normalized &lt;c0&gt;float&lt;/c0&gt; variable may have.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T131951Z" creationid="pingfangx" creationdate="20191013T131951Z">
        <seg>标准化 &lt;c0&gt;float&lt;/c0&gt; 变量可能具有的最小指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modifying a process builder's attributes will affect processes subsequently started by that object's &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; method, but will never affect previously started processes or the Java process itself.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075829Z" creationid="pingfangx" creationdate="20191014T075829Z">
        <seg>修改进程构建器的属性将影响后续由该对象的 &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; 方法启动的进程，但从不会影响以前启动的进程或 Java 自身的进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More formally, if this map contains a mapping from a key &lt;c0&gt;k&lt;/c0&gt; to a value &lt;c1&gt;v&lt;/c1&gt; such that &lt;c2&gt;(key==null ?</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140858Z" creationid="pingfangx" creationdate="20191025T140731Z">
        <seg>更确切地讲，如果此映射包含一个从 &lt;c0&gt;k&lt;/c0&gt; 键到 &lt;c1&gt;v&lt;/c1&gt; 值的映射关系满足 &lt;c2&gt;(key==null ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More information about annotation types can be found in section 9.6 of &lt;c1&gt;The Java™ Language Specification&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094245Z" creationid="pingfangx" creationdate="20191012T094245Z">
        <seg>关于注释类型的更多信息可以在 &lt;c1&gt;The Java™ Language Specification&lt;/c1&gt; 9.6 节中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More information about enums, including descriptions of the implicitly declared methods synthesized by the compiler, can be found in section 8.9 of &lt;c0&gt;The Java™ Language Specification&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093927Z" creationid="pingfangx" creationdate="20191014T093927Z">
        <seg>有关枚举的更多信息，包括编译器合成的隐式声明方法的描述，可以在 &lt;c0&gt;The Java™ Language Specification&lt;/c0&gt; 第 8.9 节中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More than one thread may have the same name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081331Z" creationid="pingfangx" creationdate="20191014T081331Z">
        <seg>多个线程可以同名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most applications should use an &lt;c0&gt;android.util.LruCache&lt;/c0&gt; instead of soft references.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155924Z" creationid="pingfangx" creationdate="20191014T155924Z">
        <seg>大多数应用程序应使用 &lt;c0&gt;android.util.LruCache&lt;/c0&gt; 而不是软引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most classes in the package contain operations based on time-outs in addition to indefinite waits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111401Z" creationid="pingfangx" creationdate="20191025T111401Z">
        <seg>该包中的大多数类除了包含不确定的等待之外，还包含基于超时的操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most concurrent Collection implementations (including most Queues) also differ from the usual &lt;c0&gt;java.util&lt;/c0&gt; conventions in that their &lt;a1&gt;Iterators&lt;/a1&gt;&lt;/a2&gt; and &lt;a3&gt;Spliterators&lt;/a3&gt;&lt;/a4&gt; provide &lt;e5&gt;weakly consistent&lt;/e5&gt; rather than fast-fail traversal:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112712Z" creationid="pingfangx" creationdate="20191025T112712Z">
        <seg>大多数并发 Collection 实现（包括大多数 Queue）与常规的 &lt;c0&gt;java.util&lt;/c0&gt; 约定也不同，因为它们的 &lt;a1&gt;Iterators&lt;/a1&gt;&lt;/a2&gt; 和 &lt;a3&gt;Spliterators&lt;/a3&gt;&lt;/a4&gt; 提供了&lt;e5&gt;弱一致的&lt;/e5&gt;，而不是快速失败的遍历。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most error checking is performed by the &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075832Z" creationid="pingfangx" creationdate="20191014T075832Z">
        <seg>大多数错误检查由 &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; 方法执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most extensions of this class override one or more of the protected hook methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125848Z" creationid="pingfangx" creationdate="20191025T125848Z">
        <seg>此类的大多数扩展可以重写一个或多个受保护的钩子 (hook) 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most fatally, it doesn't know what to do when given the choice between clearing a soft reference and growing the heap.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155859Z" creationid="pingfangx" creationdate="20191014T155859Z">
        <seg>最致命的是，当在清除软引用和增加堆之间做出选择时，它不知道该怎么做。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most internal methods also accept a "tab" argument, that is normally the current table, but may be a new or old one when resizing or converting.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081640Z" creationid="pingfangx" creationdate="20191026T081640Z">
        <seg>大多数内部方法也接受一个 “tab” 参数，通常是当前表，但在调整大小或转换时可能是新的或旧的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most methods try to use normal bins, but relay to TreeNode methods when applicable (simply by checking instanceof a node).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T075819Z" creationid="pingfangx" creationdate="20191026T075819Z">
        <seg>大多数方法尝试使用普通的 bin，但在适用时会转到 TreeNode 方法(只需要用 instanceof 检查节点)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most programmers will have no use for this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094526Z" creationid="pingfangx" creationdate="20191014T094526Z">
        <seg>大多数程序员不会使用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most subclasses will have no need to override this method, relying solely on the &lt;c0&gt;&lt;a1&gt;initialValue()&lt;/a1&gt;&lt;/c0&gt; method to set the values of thread-locals.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100905Z" creationid="pingfangx" creationdate="20191014T100905Z">
        <seg>大部分子类不需要重写此方法，它们只依靠 &lt;c0&gt;&lt;a1&gt;initialValue()&lt;/a1&gt;&lt;/c0&gt; 方法来设置线程局部变量的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most such errors are abnormal conditions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115514Z" creationid="pingfangx" creationdate="20191013T115514Z">
        <seg>大多数这样的错误都是异常条件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using &lt;c10&gt;&lt;a11&gt;setCorePoolSize(int)&lt;/a11&gt;&lt;/c10&gt; and &lt;c12&gt;&lt;a13&gt;setMaximumPoolSize(int)&lt;/a13&gt;&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124055Z" creationid="pingfangx" creationdate="20191025T124010Z">
        <seg>在大多数情况下，核心和最大池大小仅基于构造来设置，不过也可以使用 &lt;c10&gt;&lt;a11&gt;setCorePoolSize(int)&lt;/a11&gt;&lt;/c10&gt; 和 &lt;c12&gt;&lt;a13&gt;setMaximumPoolSize(int)&lt;/a13&gt;&lt;/c12&gt; 进行动态更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple objects may be instantiated at run-time to represent a given type variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T081950Z" creationid="pingfangx" creationdate="20191015T081950Z">
        <seg>可以在运行时将多个对象实例化，以表示一个给定的类型变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nearly all other internal methods are also package-protected but are declared final, so can be used by LinkedHashMap, view classes, and HashSet.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100003Z" creationid="pingfangx" creationdate="20191026T100003Z">
        <seg>几乎所有其他的内部方法也被封装保护，但被声明为 final，因此可以被 LinkedHashMap，视图类和 HashSet 使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Neutral bidirectional character type "B" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143936Z" creationid="pingfangx" creationdate="20191013T143936Z">
        <seg>Unicode 规范中的非特定双向字符类型“B”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Neutral bidirectional character type "ON" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143935Z" creationid="pingfangx" creationdate="20191013T143935Z">
        <seg>Unicode 规范中的非特定双向字符类型“ON”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Neutral bidirectional character type "S" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143941Z" creationid="pingfangx" creationdate="20191013T143941Z">
        <seg>Unicode 规范中的非特定双向字符类型“S”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Neutral bidirectional character type "WS" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143958Z" creationid="pingfangx" creationdate="20191013T143958Z">
        <seg>Unicode 规范中的非特定双向字符类型“WS”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nevertheless, the map is implemented in such a way that environment variables which are not modified by Java code will have an unmodified native representation in the subprocess.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080053Z" creationid="pingfangx" creationdate="20191014T080053Z">
        <seg>此外，映射以这种方式实现：不能由 Java 代码修改的环境变量在子进程中将有一个不可修改的本机表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>New tasks submitted in method &lt;c0&gt;&lt;a1&gt;execute(Runnable)&lt;/a1&gt;&lt;/c0&gt; will be &lt;e2&gt;rejected&lt;/e2&gt; when the Executor has been shut down, and also when the Executor uses finite bounds for both maximum threads and work queue capacity, and is saturated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125454Z" creationid="pingfangx" creationdate="20191025T125454Z">
        <seg>当 Executor 已经关闭，并且 Executor 将有限边界用于最大线程和工作队列容量，且已经饱和时，在方法 &lt;c0&gt;&lt;a1&gt;execute(Runnable)&lt;/a1&gt;&lt;/c0&gt; 中提交的新任务将被&lt;e2&gt;拒绝&lt;/e2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>New threads are created using a &lt;c0&gt;&lt;a1&gt;ThreadFactory&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124124Z" creationid="pingfangx" creationdate="20191025T124124Z">
        <seg>使用 &lt;c0&gt;&lt;a1&gt;ThreadFactory&lt;/a1&gt;&lt;/c0&gt; 创建新线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>New throwable classes that wish to allow causes to be associated with them should provide constructors that take a cause and delegate (perhaps indirectly) to one of the &lt;c2&gt;Throwable&lt;/c2&gt; constructors that takes a cause.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113933Z" creationid="pingfangx" creationdate="20191013T113933Z">
        <seg>对于那些希望将 cause 与其关联起来的新 throwable 类，应该提供带有 cause 的构造方法，并委托（可能间接）给一个带有 cause 的 &lt;c2&gt;Throwable&lt;/c2&gt; 构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No flipping or rewinding of the buffer is performed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103621Z" creationid="pingfangx" creationdate="20191014T103621Z">
        <seg>不对缓冲区进行翻转或重绕操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No two elements in the &lt;c0&gt;interfaces&lt;/c0&gt; array may refer to identical &lt;c1&gt;Class&lt;/c1&gt; objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113602Z" creationid="pingfangx" creationdate="20191015T113602Z">
        <seg>&lt;c0&gt;interfaces&lt;/c0&gt; 数组中的两个元素不能引用同一 &lt;c1&gt;Class&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally the child's values will be identical to the parent's; however, the child's value can be made an arbitrary function of the parent's by overriding the &lt;t1&gt;childValue&lt;/t1&gt; method in this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094725Z" creationid="pingfangx" creationdate="20191014T094725Z">
        <seg>通常，子线程的值与父线程的值是一致的；但是，通过重写这个类中的 &lt;t1&gt;childValue&lt;/t1&gt; 方法，子线程的值可以作为父线程值的一个任意函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, the Java virtual machine loads classes from the local file system in a platform-dependent manner.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072216Z" creationid="pingfangx" creationdate="20191014T072216Z">
        <seg>通常情况下，Java 虚拟机以与平台有关的方式，从本地文件系统中加载类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, this error is caught by the compiler; this error can only occur at run time if the definition of some class has incompatibly changed since the currently executing method was last compiled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094034Z" creationid="pingfangx" creationdate="20191012T094034Z">
        <seg>通常由编译器捕获此错误；如果某个类的定义自当前执行方法最后一次编译以后作了不兼容的更改，则此错误只可能在运行时发生。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, this method is invoked at most once per thread, but it may be invoked again in case of subsequent invocations of &lt;c5&gt;&lt;a6&gt;remove()&lt;/a6&gt;&lt;/c5&gt; followed by &lt;c7&gt;&lt;a8&gt;get()&lt;/a8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100912Z" creationid="pingfangx" creationdate="20191014T100912Z">
        <seg>通常，此方法对每个线程最多调用一次，但如果在调用 &lt;c5&gt;&lt;a6&gt;get()&lt;/a6&gt;&lt;/c5&gt; 后又调用了 &lt;c7&gt;&lt;a8&gt;remove()&lt;/a8&gt;&lt;/c7&gt;，则可能再次调用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not all approximations that have 1 ulp accuracy will automatically meet the monotonicity requirements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151337Z" creationid="pingfangx" creationdate="20191013T151337Z">
        <seg>并非所有准确性为 1 ulp 的近似值都能自动满足单调性要求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not all systems have support for the IPv6 protocol, and while the Java networking stack will attempt to detect it and use it transparently when available, it is also possible to disable its use with a system property.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080427Z" creationid="pingfangx" creationdate="20191011T080427Z">
        <seg>并非所有系统都支持 IPv6 协议，而当 Java 网络连接堆栈尝试检测它并在可用时透明地使用它时，还可以利用系统属性禁用它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151906Z" creationid="pingfangx" creationdate="20191014T151906Z">
        <seg>还要注意，此元注释仅促成从超类继承注释；对已实现接口的注释无效。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note also that when a duplicate method is dispatched to an invocation handler, the &lt;c0&gt;invoke&lt;/c0&gt; method may only throw checked exception types that are assignable to one of the exception types in the &lt;c1&gt;throws&lt;/c1&gt; clause of the method in &lt;i2&gt;all&lt;/i2&gt; of the proxy interfaces that it can be invoked through.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113225Z" creationid="pingfangx" creationdate="20191015T113225Z">
        <seg>还要注意，当重复方法被指派到调用处理程序时，&lt;c0&gt;invoke&lt;/c0&gt; 方法只可以抛出经过检查的异常类型，该异常类型可以使用&lt;i2&gt;所有&lt;/i2&gt; 代理接口（可以通过它调用）中方法的 &lt;c1&gt;throws&lt;/c1&gt; 子句指派一种异常类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;t7&gt;null&lt;/t7&gt; is not an instance of any class, and &lt;t8&gt;e.compareTo(null)&lt;/t8&gt; should throw a &lt;t9&gt;NullPointerException&lt;/t9&gt; even though &lt;t10&gt;e.equals(null)&lt;/t10&gt; returns &lt;t11&gt;false&lt;/t11&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101646Z" creationid="pingfangx" creationdate="20191014T101646Z">
        <seg>注意，&lt;t7&gt;null&lt;/t7&gt; 不是任何类的实例，即使 &lt;t8&gt;e.equals(null)&lt;/t8&gt; 返回 &lt;t9&gt;false&lt;/t9&gt;，&lt;t10&gt;e.compareTo(null)&lt;/t10&gt; 也将抛出 &lt;t11&gt;NullPointerException&lt;/t11&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that AbstractMap fields are used for keySet() and values().</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083904Z" creationid="pingfangx" creationdate="20191026T083904Z">
        <seg>请注意，AbstractMap 的字段用于 keySet() 和 values()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that all arrays are considered to implement the interface &lt;c4&gt;Cloneable&lt;/c4&gt; and that the return type of the &lt;c5&gt;clone&lt;/c5&gt; method of an array type &lt;c6&gt;T[]&lt;/c6&gt; is &lt;c7&gt;T[]&lt;/c7&gt; where T is any reference or primitive type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135827Z" creationid="pingfangx" creationdate="20191014T135827Z">
        <seg>注意，所有的数组都被视为实现接口 &lt;c4&gt;Cloneable&lt;/c4&gt;，数组类型 &lt;c6&gt;T[]&lt;/c6&gt; 的 &lt;c5&gt;clone&lt;/c5&gt; 方法的返回类型是 &lt;c7&gt;T[]&lt;/c7&gt;，其中 T 是任何引用或基元类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that an interface that manually extends this one does &lt;i0&gt;not&lt;/i0&gt; define an annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094228Z" creationid="pingfangx" creationdate="20191012T094228Z">
        <seg>注意，手动扩展该公共接口的接口 &lt;i0&gt;不&lt;/i0&gt; 定义 annotation 类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that for a particular enum type &lt;c0&gt;T&lt;/c0&gt;, the implicitly declared &lt;c1&gt;public static T valueOf(String)&lt;/c1&gt; method on that enum may be used instead of this method to map from a name to the corresponding enum constant.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094605Z" creationid="pingfangx" creationdate="20191014T094605Z">
        <seg>注意，对于一个特定的枚举类型 &lt;c0&gt;T&lt;/c0&gt; 时，隐式地声明 &lt;c1&gt;public static T valueOf(String)&lt;/c1&gt; 可以用来代替该方法对该枚举方法从名称映射到相应的枚举常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if no lower bound is explicitly declared, the lower bound is the type of &lt;c1&gt;null&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T085922Z" creationid="pingfangx" creationdate="20191015T085922Z">
        <seg>注意，如果不存在显式声明的下边界，则下边界为类型 &lt;c1&gt;null&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if no upper bound is explicitly declared, the upper bound is &lt;c1&gt;Object&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082141Z" creationid="pingfangx" creationdate="20191015T082141Z">
        <seg>注意，如果不存在显式声明的上边界，则上边界为 &lt;c1&gt;Object&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in some cases, the returned array be empty.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071701Z" creationid="pingfangx" creationdate="20191015T071701Z">
        <seg>注意，在某些情况下，返回的数组为空。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that it is generally necessary to override the &lt;c0&gt;hashCode&lt;/c0&gt; method whenever this method is overridden, so as to maintain the general contract for the &lt;c1&gt;hashCode&lt;/c1&gt; method, which states that equal objects must have equal hash codes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130923Z" creationid="pingfangx" creationdate="20191014T130923Z">
        <seg>注意：当此方法被重写时，通常有必要重写 &lt;c0&gt;hashCode&lt;/c0&gt; 方法，以维护 &lt;c1&gt;hashCode&lt;/c1&gt; 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that package sealing will not prevent a proxy class from being successfully defined in a particular package at runtime, and neither will classes already defined by the same class loader and the same package with particular signers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112431Z" creationid="pingfangx" creationdate="20191015T112431Z">
        <seg>注意，包密封将不阻止代理类在运行时在特定包中的成功定义，也不会阻止相同类加载器和带有特定签名的包所定义的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that supplementary characters may be composed of multiple 16-bit &lt;t1&gt;char&lt;/t1&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101408Z" creationid="pingfangx" creationdate="20191014T101408Z">
        <seg>注意，增补字符可能由多个 16 位 &lt;t1&gt;char&lt;/t1&gt; 值组成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the &lt;c0&gt;wait&lt;/c0&gt; method, as it places the current thread into the wait set for this object, unlocks only this object; any other objects on which the current thread may be synchronized remain locked while the thread waits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134850Z" creationid="pingfangx" creationdate="20191014T134850Z">
        <seg>注意，由于 &lt;c0&gt;wait&lt;/c0&gt; 方法将当前线程放入了对象的等待集中，所以它只能解除此对象的锁定；可以同步当前线程的任何其他对象在线程等待时仍处于锁定状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the &lt;t4&gt;ClassLoader&lt;/t4&gt; class is registered as parallel capable by default.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072844Z" creationid="pingfangx" creationdate="20191014T072844Z">
        <seg>注意，默认情况下，&lt;t4&gt;ClassLoader&lt;/t4&gt; 类注册为可并行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the Handler class &lt;b0&gt;has to&lt;/b0&gt; be a subclass of the abstract class &lt;c1&gt;&lt;a2&gt;URLStreamHandler&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082955Z" creationid="pingfangx" creationdate="20191011T082955Z">
        <seg>注意，处理程序类 &lt;b0&gt;必须&lt;/b0&gt; 为抽象类 &lt;c1&gt;&lt;a2&gt;URLStreamHandler&lt;/a2&gt;&lt;/c1&gt; 的子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the detail message associated with &lt;c1&gt;cause&lt;/c1&gt; is &lt;i2&gt;not&lt;/i2&gt; automatically incorporated in this error's detail message.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154153Z" creationid="pingfangx" creationdate="20191014T154153Z">
        <seg>注意，与 &lt;c1&gt;cause&lt;/c1&gt; 相关的详细消息&lt;i2&gt;不会&lt;/i2&gt; 自动合并到此错误的详细消息中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134951Z" creationid="pingfangx" creationdate="20191025T134951Z">
        <seg>注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the order of the specified proxy interfaces is significant: two requests for a proxy class with the same combination of interfaces but in a different order will result in two distinct proxy classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113720Z" creationid="pingfangx" creationdate="20191015T113720Z">
        <seg>注意，指定的代理接口的顺序非常重要：对接口组合相同但顺序不同的代理类的两个请求会导致两个不同的代理类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the reverse operation may result in producing surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063559Z" creationid="pingfangx" creationdate="20191014T063559Z">
        <seg>注意，进行 reverse 操作后，执行操作前未成对的低代理项和高代理项将成为代理项对。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this interface does &lt;i0&gt;not&lt;/i0&gt; contain the &lt;t1&gt;clone&lt;/t1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101527Z" creationid="pingfangx" creationdate="20191014T101527Z">
        <seg>注意，此接口&lt;i0&gt;不&lt;/i0&gt; 包含 &lt;t1&gt;clone&lt;/t1&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this meta-annotation type has no effect if the annotated type is used to annotate anything other than a class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151903Z" creationid="pingfangx" creationdate="20191014T151903Z">
        <seg>注意，如果使用注释类型注释类以外的任何事物，此元注释类型都是无效的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that using many keys with the same &lt;c1&gt;hashCode()&lt;/c1&gt; is a sure way to slow down performance of any hash table.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T051314Z" creationid="pingfangx" creationdate="20191026T051314Z">
        <seg>请注意，使用多个具有相同 &lt;c1&gt;hashCode()&lt;/c1&gt; 的键肯定会降低任何哈希表的性能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that when using an enumeration type as the type of a set or as the type of the keys in a map, specialized and efficient &lt;a0&gt;set&lt;/a0&gt;&lt;/a1&gt; and &lt;a2&gt;map&lt;/a2&gt;&lt;/a3&gt; implementations are available.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094021Z" creationid="pingfangx" creationdate="20191014T094021Z">
        <seg>请注意，当使用枚举类型作为集合的类型或映射中键的类型时，可以使用专门且高效的 &lt;a0&gt;set&lt;/a0&gt;&lt;/a1&gt; 和 &lt;a2&gt;map&lt;/a2&gt;&lt;/a3&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: If the character at the given index is a supplementary character, this method does not remove the entire character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040241Z" creationid="pingfangx" creationdate="20191014T040241Z">
        <seg>注：如果给定索引处的字符是增补字符，则此方法将不会移除整个字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notification</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085705Z" creationid="pingfangx" creationdate="20191012T085705Z">
        <seg>通知</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NullPointerException</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>NullPointerException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ObjectInput extends the DataInput interface to include the reading of objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094545Z" creationid="pingfangx" creationdate="20191010T094545Z">
        <seg>ObjectInput 扩展 DataInput 接口以包含对象的读操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ObjectOutput extends the DataOutput interface to include writing of objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094550Z" creationid="pingfangx" creationdate="20191010T094550Z">
        <seg>ObjectOutput 扩展 DataOutput 接口以包含对象的写入操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objects that implement this interface can be used as keys in a &lt;a4&gt;sorted map&lt;/a4&gt;&lt;/a5&gt; or as elements in a &lt;a6&gt;sorted set&lt;/a6&gt;&lt;/a7&gt;, without the need to specify a &lt;a8&gt;comparator&lt;/a8&gt;&lt;/a9&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101635Z" creationid="pingfangx" creationdate="20191014T101635Z">
        <seg>实现此接口的对象可以用作&lt;a4&gt;有序映射&lt;/a4&gt;&lt;/a5&gt;中的键或&lt;a6&gt;有序集合&lt;/a6&gt;&lt;/a7&gt;中的元素，无需指定&lt;a8&gt;比较器&lt;/a8&gt;&lt;/a9&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On some platforms, the weak version may be more efficient than &lt;c1&gt;compareAndSet&lt;/c1&gt; in the normal case, but differs in that any given invocation of the &lt;c2&gt;weakCompareAndSet&lt;/c2&gt; method may return &lt;c3&gt;false&lt;/c3&gt; &lt;e4&gt;spuriously&lt;/e4&gt; (that is, for no apparent reason).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121946Z" creationid="pingfangx" creationdate="20191025T121946Z">
        <seg>在某些平台上，弱版本在正常情况下可能比 &lt;c1&gt;compareAndSet&lt;/c1&gt; 更有效，但不同的是 &lt;c2&gt;weakCompareAndSet&lt;/c2&gt; 方法的任何给定调用可能&lt;e4&gt;意外&lt;/e4&gt; 返回 &lt;c3&gt;false&lt;/c3&gt;（即没有明确的原因）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On-demand construction</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124103Z" creationid="pingfangx" creationdate="20191025T124103Z">
        <seg>按需构造</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once it has downloaded the bytes that make up the class, it should use the method &lt;c4&gt;&lt;a5&gt;&lt;t6&gt;defineClass&lt;/t6&gt;&lt;/a5&gt;&lt;/c4&gt; to create a class instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072333Z" creationid="pingfangx" creationdate="20191014T072333Z">
        <seg>下载组成该类的字节后，它应该使用方法 &lt;c4&gt;&lt;a5&gt;&lt;t6&gt;defineClass&lt;/t6&gt;&lt;/a5&gt;&lt;/c4&gt; 来创建类实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One application is to generate sequence numbers, as in:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120810Z" creationid="pingfangx" creationdate="20191025T120810Z">
        <seg>一个应用程序将按以下方式生成序列号：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One exception is &lt;t1&gt;java.math.BigDecimal&lt;/t1&gt;, whose natural ordering equates &lt;t2&gt;BigDecimal&lt;/t2&gt; objects with equal values and different precisions (such as 4.0 and 4.00).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101917Z" creationid="pingfangx" creationdate="20191014T101917Z">
        <seg>&lt;t1&gt;java.math.BigDecimal&lt;/t1&gt; 是个例外，它的自然排序将值相等但精确度不同的 &lt;t2&gt;BigDecimal&lt;/t2&gt; 对象（比如 4.0 和 4.00）视为相等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One is to declare a class to be a subclass of &lt;c0&gt;Thread&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081049Z" creationid="pingfangx" creationdate="20191014T081049Z">
        <seg>一种方法是将类声明为 &lt;c0&gt;Thread&lt;/c0&gt; 的子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of your Play Store app URLs</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114424Z" creationid="pingfangx" creationdate="20191011T114424Z">
        <seg>One of your Play Store app URLs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One or more variables that together maintain a running &lt;c0&gt;double&lt;/c0&gt; value updated using a supplied function.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122505Z" creationid="pingfangx" creationdate="20191025T122505Z">
        <seg>一个或多个变量，它们一起保持一个运行 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One or more variables that together maintain a running &lt;c0&gt;long&lt;/c0&gt; value updated using a supplied function.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122526Z" creationid="pingfangx" creationdate="20191025T122526Z">
        <seg>一个或多个变量，它们一起保持一个运行 &lt;c0&gt;long&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One or more variables that together maintain an initially zero &lt;c0&gt;double&lt;/c0&gt; sum.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122516Z" creationid="pingfangx" creationdate="20191025T122516Z">
        <seg>一个或多个变量，它们一起保持初始零 &lt;c0&gt;double&lt;/c0&gt; 总和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One or more variables that together maintain an initially zero &lt;c0&gt;long&lt;/c0&gt; sum.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122532Z" creationid="pingfangx" creationdate="20191025T122532Z">
        <seg>一个或多个变量，它们一起保持初始零 &lt;c0&gt;long&lt;/c0&gt; 总和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One reason that a throwable may have a cause is that the class that throws it is built atop a lower layered abstraction, and an operation on the upper layer fails due to a failure in the lower layer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113255Z" creationid="pingfangx" creationdate="20191013T113255Z">
        <seg>导致 throwable cause 的一个理由是，抛出它的类构建在低层抽象之中，而高层操作由于低层操作的失败而失败。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only a single implementation, &lt;c2&gt;&lt;a3&gt;ReentrantReadWriteLock&lt;/a3&gt;&lt;/c2&gt;, is provided, since it covers most standard usage contexts.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122822Z" creationid="pingfangx" creationdate="20191025T122822Z">
        <seg>此包只提供了一个实现，即 &lt;c2&gt;&lt;a3&gt;ReentrantReadWriteLock&lt;/a3&gt;&lt;/c2&gt;，因为它适用于大部分的标准用法上下文。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java &lt;c1&gt;throw&lt;/c1&gt; statement.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113133Z" creationid="pingfangx" creationdate="20191013T113133Z">
        <seg>只有当对象是此类（或其子类之一）的实例时，才能通过 Java 虚拟机或者 Java &lt;c1&gt;throw&lt;/c1&gt; 语句抛出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only one thread at a time can own an object's monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132946Z" creationid="pingfangx" creationdate="20191014T132946Z">
        <seg>一次只能有一个线程拥有对象的监视器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only the identity of the class of an Externalizable instance is written in the serialization stream and it is the responsibility of the class to save and restore the contents of its instances.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094035Z" creationid="pingfangx" creationdate="20191010T094035Z">
        <seg>Externalizable 实例类的唯一特性是可以被写入序列化流中，该类负责保存和恢复实例内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open for reading, a resource of the specified name from the search path used to load classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073049Z" creationid="pingfangx" creationdate="20191014T073049Z">
        <seg>从用来加载类的搜索路径打开具有指定名称的资源，以读取该资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other portions of the Java API may define other subsets for their own purposes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093435Z" creationid="pingfangx" creationdate="20191014T093435Z">
        <seg>Java API 的其他部分可以针对其各自用途定义其他子集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other public methods of a proxy instance inherited from &lt;c8&gt;java.lang.Object&lt;/c8&gt; are not overridden by a proxy class, so invocations of those methods behave like they do for instances of &lt;c9&gt;java.lang.Object&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112929Z" creationid="pingfangx" creationdate="20191015T112929Z">
        <seg>代理类不重写从 &lt;c8&gt;java.lang.Object&lt;/c8&gt; 继承的代理实例的其他公共方法，所以这些方法的调用行为与其对 &lt;c9&gt;java.lang.Object&lt;/c9&gt; 实例的操作一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other utilities based on &lt;c7&gt;Executors&lt;/c7&gt; include the concrete class &lt;c8&gt;&lt;a9&gt;FutureTask&lt;/a9&gt;&lt;/c8&gt; providing a common extensible implementation of Futures, and &lt;c10&gt;&lt;a11&gt;ExecutorCompletionService&lt;/a11&gt;&lt;/c10&gt;, that assists in coordinating the processing of groups of asynchronous tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110832Z" creationid="pingfangx" creationdate="20191025T110832Z">
        <seg>其他基于 &lt;c7&gt;Executors&lt;/c7&gt; 的实用工具包括具体类 &lt;c8&gt;&lt;a9&gt;FutureTask&lt;/a9&gt;&lt;/c8&gt;，它提供 Future 的常见可扩展实现，以及 &lt;c10&gt;&lt;a11&gt;ExecutorCompletionService&lt;/a11&gt;&lt;/c10&gt;，它有助于协调对异步任务组的处理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise no constraints are placed upon the time at which a soft reference will be cleared or the order in which a set of such references to different objects will be cleared.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155731Z" creationid="pingfangx" creationdate="20191014T155731Z">
        <seg>否则，清除软引用的时间或者清除不同对象的一组此类引用的顺序将不受任何约束。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise this method immediately returns &lt;t0&gt;null&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155327Z" creationid="pingfangx" creationdate="20191014T155327Z">
        <seg>否则此方法立即返回 &lt;t0&gt;null&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, B is resolved.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082221Z" creationid="pingfangx" creationdate="20191015T082221Z">
        <seg>否则，B 将被解析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, because we are using power-of-two expansion, the elements from each bin must either stay at same index, or move with a power of two offset in the new table.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094622Z" creationid="pingfangx" creationdate="20191026T094622Z">
        <seg>否则，因为我们正在使用 2 次幂的扩展，所以每个桶中的元素都必须保持相同的索引，或者在新表中以 2 的幂的偏移量移动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, one of the methods must have a return type that is assignable to all of the return types of the rest of the methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113653Z" creationid="pingfangx" creationdate="20191015T113653Z">
        <seg>否则，该方法之一必须是返回类型，它可以指派给该方法其余的所有返回类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the &lt;c2&gt;char&lt;/c2&gt; value at the given index is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040217Z" creationid="pingfangx" creationdate="20191014T040217Z">
        <seg>否则，返回给定索引上的 &lt;c2&gt;char&lt;/c2&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the package of a proxy class is also unspecified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112409Z" creationid="pingfangx" creationdate="20191015T112409Z">
        <seg>否则，代理类的包也是未指定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135558Z" creationid="pingfangx" creationdate="20191014T135558Z">
        <seg>否则，此方法会创建此对象的类的一个新实例，并像通过分配那样，严格使用此对象相应字段的内容初始化该对象的所有字段；这些字段的内容没有被自我复制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, use the following guide when manually configuring and tuning this class:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123637Z" creationid="pingfangx" creationdate="20191025T123637Z">
        <seg>否则，在手动配置和调整此类时，使用以下指导：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Output to the stream is piped into the standard input of the process represented by this &lt;c0&gt;Process&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075632Z" creationid="pingfangx" creationdate="20191014T075632Z">
        <seg>输出到的流管道输送到由该 &lt;c0&gt;Process&lt;/c0&gt; 对象所表示的进程的标准输入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Over time, a throwable can &lt;a0&gt;suppress&lt;/a0&gt;&lt;/a1&gt; other throwables from being propagated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114402Z" creationid="pingfangx" creationdate="20191013T114402Z">
        <seg>随着时间的推移，throwable 可以 &lt;a0&gt;suppress&lt;/a0&gt; &lt;/a1&gt; 被传播的其他 throwable。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overriden method's declaring class (same as declaringClass unless declaringClass is a proxy class)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104134Z" creationid="pingfangx" creationdate="20191015T104134Z">
        <seg>覆盖方法的声明类(同 declaringClass 除非 declaringClass 是一个代理类)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overrides of JDK8 Map extension methods</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095228Z" creationid="pingfangx" creationdate="20191026T095228Z">
        <seg>JDK8 映射扩展方法的重写</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package Specification</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T085331Z" creationid="pingfangx" creationdate="20191010T085331Z">
        <seg>包规范</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Package declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152409Z" creationid="pingfangx" creationdate="20191014T152409Z">
        <seg>包声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ParameterizedType represents a parameterized type such as Collection&lt;String&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091117Z" creationid="pingfangx" creationdate="20191012T091117Z">
        <seg>ParameterizedType 表示参数化类型，如 Collection&lt;String&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a boolean.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134523Z" creationid="pingfangx" creationdate="20191013T134523Z">
        <seg>将字符串参数解析为 boolean 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed &lt;c0&gt;byte&lt;/c0&gt; in the radix specified by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121525Z" creationid="pingfangx" creationdate="20191013T121525Z">
        <seg>将 string 参数解析为一个有符号的 &lt;c0&gt;byte&lt;/c0&gt;，其基数由第二个参数指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed &lt;c0&gt;long&lt;/c0&gt; in the radix specified by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125023Z" creationid="pingfangx" creationdate="20191013T125023Z">
        <seg>将 string 参数解析为有符号的 &lt;c0&gt;long&lt;/c0&gt;，基数由第二个参数指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed &lt;c0&gt;short&lt;/c0&gt; in the radix specified by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122109Z" creationid="pingfangx" creationdate="20191013T122109Z">
        <seg>将字符串参数解析为由第二个参数指定的基数中的有符号的 &lt;c0&gt;short&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed decimal &lt;c0&gt;byte&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121523Z" creationid="pingfangx" creationdate="20191013T121523Z">
        <seg>将 string 参数解析为有符号的十进制 &lt;c0&gt;byte&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed decimal &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125022Z" creationid="pingfangx" creationdate="20191013T125022Z">
        <seg>将 string 参数解析为有符号十进制 &lt;c0&gt;long&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed decimal &lt;c0&gt;short&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122108Z" creationid="pingfangx" creationdate="20191013T122108Z">
        <seg>将字符串参数解析为有符号的十进制 &lt;c0&gt;short&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed decimal integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124315Z" creationid="pingfangx" creationdate="20191013T124315Z">
        <seg>将字符串参数作为有符号的十进制整数进行解析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses the string argument as a signed integer in the radix specified by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124313Z" creationid="pingfangx" creationdate="20191013T124313Z">
        <seg>使用第二个参数指定的基数，将字符串参数解析为有符号的整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs the given action for each element of the &lt;c0&gt;Iterable&lt;/c0&gt; until all elements have been processed or the action throws an exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103359Z" creationid="pingfangx" creationdate="20191014T103359Z">
        <seg>对 &lt;c0&gt;Iterable&lt;/c0&gt; 的每个元素执行给定的操作，直到处理完所有元素或操作引发异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135632Z" creationid="pingfangx" creationdate="20191025T135632Z">
        <seg>对该映射中的每个条目执行给定操作，直到所有条目都已处理或该操作引发异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Phantom reference objects, which are enqueued after the collector determines that their referents may otherwise be reclaimed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090709Z" creationid="pingfangx" creationdate="20191012T090709Z">
        <seg>虚引用对象，在回收器确定其指示对象可另外回收之后，被加入队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Phantom references are most often used for scheduling pre-mortem cleanup actions in a more flexible way than is possible with the Java finalization mechanism.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154638Z" creationid="pingfangx" creationdate="20191014T154638Z">
        <seg>虚引用最常见的用法是以某种可能比使用 Java 终结机制更灵活的方式来指派 pre-mortem 清除动作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Piped character-input streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102716Z" creationid="pingfangx" creationdate="20191010T102716Z">
        <seg>传送的字符输入流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Piped character-output streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102722Z" creationid="pingfangx" creationdate="20191010T102722Z">
        <seg>传送的字符输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Polls this queue to see if a reference object is available.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155245Z" creationid="pingfangx" creationdate="20191014T155245Z">
        <seg>轮询此队列，查看是否存在可用的引用对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Português Brasileiro</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114416Z" creationid="pingfangx" creationdate="20191011T114416Z">
        <seg>Português Brasileiro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Position, limit, and capacity;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102725Z" creationid="pingfangx" creationdate="20191011T102725Z">
        <seg>位置，界限和容量；</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints a stack trace of the current thread to the standard error stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081950Z" creationid="pingfangx" creationdate="20191014T081950Z">
        <seg>将当前线程的堆栈跟踪打印至标准错误流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints formatted representations of objects to a text-output stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102728Z" creationid="pingfangx" creationdate="20191010T102728Z">
        <seg>向文本输出流打印对象的格式化表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints information about this thread group to the standard output.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093222Z" creationid="pingfangx" creationdate="20191014T093222Z">
        <seg>将有关此线程组的信息打印到标准输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints this throwable and its backtrace to the specified print stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115248Z" creationid="pingfangx" creationdate="20191013T115248Z">
        <seg>将此 throwable 及其追踪输出到指定的输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints this throwable and its backtrace to the specified print writer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115245Z" creationid="pingfangx" creationdate="20191013T115245Z">
        <seg>将此 throwable 及其追踪输出到指定的 PrintWriter。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints this throwable and its backtrace to the standard error stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115243Z" creationid="pingfangx" creationdate="20191013T115243Z">
        <seg>将此 throwable 及其追踪输出至标准错误流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Processes a method invocation on a proxy instance and returns the result.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T170057Z" creationid="pingfangx" creationdate="20191014T170057Z">
        <seg>在代理实例上处理方法调用并返回结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programmers cannot invoke this constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094130Z" creationid="pingfangx" creationdate="20191014T094130Z">
        <seg>程序员不能调用这个构造函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocol Handlers</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082840Z" creationid="pingfangx" creationdate="20191011T082840Z">
        <seg>协议处理程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provide access to the persistent fields read from the input stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102622Z" creationid="pingfangx" creationdate="20191010T102622Z">
        <seg>提供对从输入流读取的持久字段的访问权限。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provide programmatic access to the persistent fields to be written to ObjectOutput.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102631Z" creationid="pingfangx" creationdate="20191010T102631Z">
        <seg>提供对要写入 ObjectOutput 的持久字段的编程访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123010Z" creationid="pingfangx" creationdate="20191025T123010Z">
        <seg>为实现依赖于先进先出 (FIFO) 等待队列的阻塞锁和相关同步器（信号量、事件，等等）提供一个框架。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides classes and interfaces for handling text, dates, numbers, and messages in a manner independent of natural languages.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033059Z" creationid="pingfangx" creationdate="20191012T033059Z">
        <seg>提供以与自然语言无关的方式来处理文本、日期、数字和消息的类和接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides classes and interfaces for obtaining reflective information about classes and objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091003Z" creationid="pingfangx" creationdate="20191012T091003Z">
        <seg>提供类和接口，以获得关于类和对象的反射信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides classes that are fundamental to the design of the Java programming language.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T061423Z" creationid="pingfangx" creationdate="20191012T061423Z">
        <seg>提供利用 Java 编程语言进行程序设计的基础类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides default implementations of &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt; execution methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T114015Z" creationid="pingfangx" creationdate="20191025T114015Z">
        <seg>提供 &lt;c0&gt;&lt;a1&gt;ExecutorService&lt;/a1&gt;&lt;/c0&gt; 执行方法的默认实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides for system input and output through data streams, serialization and the file system.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T081910Z" creationid="pingfangx" creationdate="20191010T081910Z">
        <seg>通过数据流、序列化和文件系统提供系统输入和输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides library support for the Java programming language annotation facility.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T083336Z" creationid="pingfangx" creationdate="20191012T082542Z">
        <seg>为 Java 编程语言注释设施提供库支持。（译注：在其他地方一般译作“注解”，这里来自 api 1.6 中文版，所以沿用“注释”）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides methods to convert internationalized domain names (IDNs) between a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083201Z" creationid="pingfangx" creationdate="20191011T083201Z">
        <seg>提供在普通 Unicode 表示形式和 ASCII 兼容性编码 (ACE) 表示形式之间进行国际化域名 (IDN) 转换的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides programmatic access to the stack trace information printed by &lt;c0&gt;&lt;a1&gt;printStackTrace()&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115114Z" creationid="pingfangx" creationdate="20191013T115114Z">
        <seg>提供编程访问由 &lt;c0&gt;&lt;a1&gt;printStackTrace()&lt;/a1&gt;&lt;/c0&gt; 输出的堆栈跟踪信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides reference-object classes, which support a limited degree of interaction with the garbage collector.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085415Z" creationid="pingfangx" creationdate="20191012T085415Z">
        <seg>提供了引用对象类，支持在某种程度上与垃圾回收器之间的交互。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides the API for accessing and processing data stored in a data source (usually a relational database) using the Java&lt;s0&gt;&lt;f1&gt;TM&lt;/f1&gt;&lt;/s0&gt; programming language.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032843Z" creationid="pingfangx" creationdate="20191012T032843Z">
        <seg>提供使用 Java&lt;s0&gt;&lt;f1&gt;TM&lt;/f1&gt;&lt;/s0&gt; 编程语言访问并处理存储在数据源（通常是一个关系数据库）中的数据的 API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides the classes and interfaces for the security framework.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T151855Z" creationid="pingfangx" creationdate="20191011T151855Z">
        <seg>为安全框架提供类和接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provides the classes for implementing networking applications.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T070930Z" creationid="pingfangx" creationdate="20191011T070930Z">
        <seg>为实现网络应用程序提供类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proxy classes are public, final, and not abstract.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112301Z" creationid="pingfangx" creationdate="20191015T112301Z">
        <seg>代理类是公共的、最终的，而不是抽象的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Queue maintenance</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125747Z" creationid="pingfangx" creationdate="20191025T125747Z">
        <seg>队列维护</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125434Z" creationid="pingfangx" creationdate="20191025T125434Z">
        <seg>队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Queues</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110927Z" creationid="pingfangx" creationdate="20191025T110927Z">
        <seg>队列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Queuing</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124524Z" creationid="pingfangx" creationdate="20191025T124524Z">
        <seg>排队</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rather than having to use the reflection API to access the public constructor, a proxy instance can be also be created by calling the &lt;c2&gt;&lt;a3&gt;Proxy.newProxyInstance&lt;/a3&gt;&lt;/c2&gt; method, which combines the actions of calling &lt;c4&gt;&lt;a5&gt;Proxy.getProxyClass&lt;/a5&gt;&lt;/c4&gt; with invoking the constructor with an invocation handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112617Z" creationid="pingfangx" creationdate="20191015T112617Z">
        <seg>并非必须使用反射 API 才能访问公共构造方法，通过调用 &lt;c2&gt;&lt;a3&gt;Proxy.newProxyInstance&lt;/a3&gt;&lt;/c2&gt; 方法（将调用 &lt;c4&gt;&lt;a5&gt;Proxy.getProxyClass&lt;/a5&gt;&lt;/c4&gt; 的操作和调用带有调用处理程序的构造方法结合在一起）也可以创建代理实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reachability</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090538Z" creationid="pingfangx" creationdate="20191012T090538Z">
        <seg>可到达性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read and ignore number of buckets</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095506Z" creationid="pingfangx" creationdate="20191026T095506Z">
        <seg>读取并忽略存储桶数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read in the threshold (ignored), loadfactor, and any hidden stuff</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095458Z" creationid="pingfangx" creationdate="20191026T095458Z">
        <seg>读取阈值(忽略)、加载因子和任何隐藏的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read number of mappings (size)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095511Z" creationid="pingfangx" creationdate="20191026T095511Z">
        <seg>读取映射数(大小)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read the keys and values, and put the mappings in the HashMap</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095703Z" creationid="pingfangx" creationdate="20191026T095703Z">
        <seg>读取键和值，并将映射放到 HashMap 中</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094626Z" creationid="pingfangx" creationdate="20191010T094626Z">
        <seg>从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reassigns the "standard" error output stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154504Z" creationid="pingfangx" creationdate="20191013T154504Z">
        <seg>重新分配“标准”错误输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reassigns the "standard" input stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154506Z" creationid="pingfangx" creationdate="20191013T154506Z">
        <seg>重新分配“标准”输入流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reassigns the "standard" output stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154508Z" creationid="pingfangx" creationdate="20191013T154508Z">
        <seg>重新分配“标准”输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reconstitute the &lt;c0&gt;HashMap&lt;/c0&gt; instance from a stream (i.e., deserialize it).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095451Z" creationid="pingfangx" creationdate="20191026T095451Z">
        <seg>从流中重建 &lt;c0&gt;HashMap&lt;/c0&gt; 实例(即反序列化它)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recursive invariant check</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101107Z" creationid="pingfangx" creationdate="20191026T101107Z">
        <seg>递归不变检查</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Red-black tree methods, all adapted from CLR</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101059Z" creationid="pingfangx" creationdate="20191026T101059Z">
        <seg>红黑树方法，全部改编自 CLR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to &lt;a5&gt;Unicode Character Representation&lt;/a5&gt; for details.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070349Z" creationid="pingfangx" creationdate="20191014T070349Z">
        <seg>有关详细信息，请参阅 &lt;a5&gt;Unicode 字符表示形式&lt;/a5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reference queues are implemented by the &lt;c3&gt;&lt;c4&gt;&lt;a5&gt;ReferenceQueue&lt;/a5&gt;&lt;/c4&gt;&lt;/c3&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090223Z" creationid="pingfangx" creationdate="20191012T090223Z">
        <seg>引用队列是通过 &lt;c3&gt;&lt;c4&gt;&lt;a5&gt;ReferenceQueue&lt;/a5&gt;&lt;/c4&gt;&lt;/c3&gt; 类实现的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090713Z" creationid="pingfangx" creationdate="20191012T090713Z">
        <seg>引用队列，在检测到适当的可到达性更改后，垃圾回收器将已注册的引用对象添加到该队列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>References that are cleared too early cause unnecessary work; those that are cleared too late waste memory.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155911Z" creationid="pingfangx" creationdate="20191014T155911Z">
        <seg>过早清除的引用会导致不必要的工作；太晚清除的引用会浪费内存。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091009Z" creationid="pingfangx" creationdate="20191012T091009Z">
        <seg>在安全限制内，反射允许编程访问关于加载类的字段、方法和构造方法的信息，并允许使用反射字段、方法和构造方法对其底层对等项进行操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Registers a new virtual-machine shutdown hook.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153507Z" creationid="pingfangx" creationdate="20191013T153507Z">
        <seg>注册新的虚拟机来关闭钩子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Registers the caller as parallel capable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073420Z" creationid="pingfangx" creationdate="20191014T073420Z">
        <seg>将调用者注册为可并行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rejected tasks</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125444Z" creationid="pingfangx" creationdate="20191025T125444Z">
        <seg>被拒绝的任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related Documentation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T085337Z" creationid="pingfangx" creationdate="20191010T085337Z">
        <seg>相关文档</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Relink into lo and hi lists, preserving order</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101045Z" creationid="pingfangx" creationdate="20191026T101045Z">
        <seg>重新链接到 lo 和 hi 列表，保持顺序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all of the mappings from this map (optional operation).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140001Z" creationid="pingfangx" creationdate="20191025T140001Z">
        <seg>从此映射中移除所有映射关系（可选操作）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all of the mappings from this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135555Z" creationid="pingfangx" creationdate="20191025T135555Z">
        <seg>从此映射中移除所有映射关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the &lt;c0&gt;char&lt;/c0&gt; at the specified position in this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033557Z" creationid="pingfangx" creationdate="20191014T033557Z">
        <seg>移除此序列指定位置上的 &lt;c0&gt;char&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the characters in a substring of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033555Z" creationid="pingfangx" creationdate="20191014T033555Z">
        <seg>移除此序列的子字符串中的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the current thread's value for this thread-local variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100744Z" creationid="pingfangx" creationdate="20191014T100744Z">
        <seg>移除此线程局部变量当前线程的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the entry for the specified key only if it is currently mapped to the specified value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140404Z" creationid="pingfangx" creationdate="20191025T140404Z">
        <seg>仅当指定项当前映射到指定值时，才删除该项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the given node, that must be present before this call.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100757Z" creationid="pingfangx" creationdate="20191026T100757Z">
        <seg>删除给定的节点，该节点必须在此调用之前存在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the mapping for a key from this map if it is present (optional operation).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140119Z" creationid="pingfangx" creationdate="20191025T140119Z">
        <seg>如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the mapping for the specified key from this map if present.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135835Z" creationid="pingfangx" creationdate="20191025T135835Z">
        <seg>从此映射中移除指定键的映射关系（如果存在）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the next reference object in this queue, blocking until either one becomes available or the given timeout period expires.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155252Z" creationid="pingfangx" creationdate="20191014T155252Z">
        <seg>移除此队列中的下一个引用对象，阻塞到有一个对象变得可用或者给定的超时期满了为止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the next reference object in this queue, blocking until one becomes available.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155258Z" creationid="pingfangx" creationdate="20191014T155258Z">
        <seg>移除此队列中的下一个引用对象，阻塞到某个对象变得可用为止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the system property indicated by the specified key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154129Z" creationid="pingfangx" creationdate="20191013T154129Z">
        <seg>移除指定键指示的系统属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130236Z" creationid="pingfangx" creationdate="20191025T130236Z">
        <seg>从执行程序的内部队列中移除此任务（如果存在），从而如果尚未开始，则其不再运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Repeated creation of a parameterized type has no effect.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071636Z" creationid="pingfangx" creationdate="20191015T071636Z">
        <seg>重复创建的参数化类型无效。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Repeated creation of a type variable has no effect.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T081941Z" creationid="pingfangx" creationdate="20191015T081941Z">
        <seg>重复创建类型变量没有效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaced by &lt;c0&gt;&lt;a1&gt;defineClass(String, byte[], int, int)&lt;/a1&gt;&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073333Z" creationid="pingfangx" creationdate="20191014T073333Z">
        <seg>由 &lt;c0&gt;&lt;a1&gt;defineClass(String, byte[], int, int)&lt;/a1&gt;&lt;/c0&gt; 取代</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces all linked nodes in bin at index for given hash unless table is too small, in which case resizes instead.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094759Z" creationid="pingfangx" creationdate="20191026T094759Z">
        <seg>替换给定 hash 对应的索引的桶中所有的链接节点，除非表太小，在这种情况下用 resize 代替。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135914Z" creationid="pingfangx" creationdate="20191025T135914Z">
        <seg>将每个项的值替换为对该项调用给定函数的结果，直到处理完所有项或函数引发异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces each substring of this string that matches the given &lt;a0&gt;regular expression&lt;/a0&gt; with the given replacement.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030044Z" creationid="pingfangx" creationdate="20191014T030044Z">
        <seg>使用给定的 replacement 替换此字符串所有匹配给定的&lt;a0&gt;正则表达式&lt;/a0&gt;的子字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030035Z" creationid="pingfangx" creationdate="20191014T030035Z">
        <seg>使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the characters in a substring of this sequence with characters in the specified &lt;c0&gt;String&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033905Z" creationid="pingfangx" creationdate="20191014T033905Z">
        <seg>使用给定 &lt;c0&gt;String&lt;/c0&gt; 中的字符替换此序列的子字符串中的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the entry for the specified key only if currently mapped to the specified value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135857Z" creationid="pingfangx" creationdate="20191025T135857Z">
        <seg>仅当当前映射到指定值时，才替换指定键的项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the entry for the specified key only if it is currently mapped to some value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140418Z" creationid="pingfangx" creationdate="20191025T140418Z">
        <seg>仅当指定项当前映射到某个值时，才替换该项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the first substring of this string that matches the given &lt;a0&gt;regular expression&lt;/a0&gt; with the given replacement.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030046Z" creationid="pingfangx" creationdate="20191014T030046Z">
        <seg>使用给定的 replacement 替换此字符串匹配给定的&lt;a0&gt;正则表达式&lt;/a0&gt;的第一个子字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represent channels for retrieving resources from the ResponseCache.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083139Z" creationid="pingfangx" creationdate="20191011T083139Z">
        <seg>表示从 ResponseCache 获取资源的通道。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents a Uniform Resource Identifier (URI) reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083403Z" creationid="pingfangx" creationdate="20191011T083403Z">
        <seg>表示一个统一资源标识符 (URI) 引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents a cache response originally retrieved through secure means, such as TLS.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083338Z" creationid="pingfangx" creationdate="20191011T083338Z">
        <seg>表示最初通过安全方法（如 TLS）获得的缓存响应。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents a currency.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045451Z" creationid="pingfangx" creationdate="20191012T045451Z">
        <seg>表示货币。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents a family of communication protocols.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083109Z" creationid="pingfangx" creationdate="20191011T083109Z">
        <seg>代表一个家族的通信协议。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents an annotated element of the program currently running in this VM.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091044Z" creationid="pingfangx" creationdate="20191012T091044Z">
        <seg>表示目前正在此 VM 中运行的程序的一个已注释元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents an annotated element of the program currently running in this VM. This interface allows annotations to be read reflectively.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161026Z" creationid="pingfangx" creationdate="20191014T161026Z">
        <seg>表示目前正在此 VM 中运行的程序的一个已注释元素。该接口允许反射性地读取注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents channels for storing resources in the ResponseCache.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083137Z" creationid="pingfangx" creationdate="20191011T083137Z">
        <seg>表示在 ResponseCache 中存储资源的通道。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents implementations of URLConnection caches.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083337Z" creationid="pingfangx" creationdate="20191011T083337Z">
        <seg>表示 URLConnection 缓存的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents the proxy type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083417Z" creationid="pingfangx" creationdate="20191011T083417Z">
        <seg>表示代理类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reset to initial default state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100151Z" creationid="pingfangx" creationdate="20191026T100151Z">
        <seg>重置为初始默认状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resizable-array implementation of the &lt;c0&gt;&lt;a1&gt;Deque&lt;/a1&gt;&lt;/c0&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045130Z" creationid="pingfangx" creationdate="20191012T045130Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Deque&lt;/a1&gt;&lt;/c0&gt; 接口的大小可变数组的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resizable-array implementation of the &lt;t0&gt;List&lt;/t0&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045135Z" creationid="pingfangx" creationdate="20191012T045135Z">
        <seg>&lt;t0&gt;List&lt;/t0&gt; 接口的大小可变数组的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resource bundles contain locale-specific objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050051Z" creationid="pingfangx" creationdate="20191012T050051Z">
        <seg>资源包包含特定于语言环境的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;d&lt;/c0&gt; × 2&lt;s1&gt;&lt;c2&gt;scaleFactor&lt;/c2&gt;&lt;/s1&gt; rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152409Z" creationid="pingfangx" creationdate="20191013T152409Z">
        <seg>返回 &lt;c0&gt;d&lt;/c0&gt; × 2&lt;s1&gt;&lt;c2&gt;scaleFactor&lt;/c2&gt;&lt;/s1&gt;，其舍入方式如同将一个正确舍入的浮点值乘以 double 值集合中的一个值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;f&lt;/c0&gt; × 2&lt;s1&gt;&lt;c2&gt;scaleFactor&lt;/c2&gt;&lt;/s1&gt; rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152406Z" creationid="pingfangx" creationdate="20191013T152406Z">
        <seg>返回 &lt;c0&gt;f&lt;/c0&gt; × 2&lt;s1&gt;&lt;c2&gt;scaleFactor&lt;/c2&gt;&lt;/s1&gt;，其舍入方式如同将一个正确舍入的浮点值乘以 float 值集合中的一个值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;abstract&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110727Z" creationid="pingfangx" creationdate="20191015T110727Z">
        <seg>如果整数参数包括 &lt;c0&gt;abstract&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;final&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110728Z" creationid="pingfangx" creationdate="20191015T110728Z">
        <seg>如果整数参数包括 &lt;c0&gt;final&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;interface&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110729Z" creationid="pingfangx" creationdate="20191015T110729Z">
        <seg>如果整数参数包括 &lt;c0&gt;interface&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;native&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110729Z" creationid="pingfangx" creationdate="20191015T110729Z">
        <seg>如果整数参数包括 &lt;c0&gt;native&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;private&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110730Z" creationid="pingfangx" creationdate="20191015T110730Z">
        <seg>如果整数参数包括 &lt;c0&gt;private&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;protected&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110731Z" creationid="pingfangx" creationdate="20191015T110731Z">
        <seg>如果整数参数包括 &lt;c0&gt;protected&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;public&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110732Z" creationid="pingfangx" creationdate="20191015T110732Z">
        <seg>如果整数参数包括 &lt;c0&gt;public&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;static&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110733Z" creationid="pingfangx" creationdate="20191015T110733Z">
        <seg>如果整数参数包括 &lt;c0&gt;static&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;strictfp&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110733Z" creationid="pingfangx" creationdate="20191015T110733Z">
        <seg>如果整数参数包括 &lt;c0&gt;strictfp&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;synchronized&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110735Z" creationid="pingfangx" creationdate="20191015T110735Z">
        <seg>如果整数参数包括 &lt;c0&gt;synchronized&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;transient&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110735Z" creationid="pingfangx" creationdate="20191015T110735Z">
        <seg>如果整数参数包括 &lt;c0&gt;transient&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return &lt;c0&gt;true&lt;/c0&gt; if the integer argument includes the &lt;c1&gt;volatile&lt;/c1&gt; modifier, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110738Z" creationid="pingfangx" creationdate="20191015T110738Z">
        <seg>如果整数参数包括 &lt;c0&gt;volatile&lt;/c0&gt; 修饰符，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return a string describing the access modifier flags in the specified modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110752Z" creationid="pingfangx" creationdate="20191015T110752Z">
        <seg>返回描述指定修饰符中的访问修饰符标志的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return an &lt;c0&gt;int&lt;/c0&gt; value OR-ing together the source language modifiers that can be applied to a class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110656Z" creationid="pingfangx" creationdate="20191015T110656Z">
        <seg>返回一个 &lt;c0&gt;int&lt;/c0&gt; 值，其值是可以被应用到类的源语言修饰符异或到一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return an &lt;c0&gt;int&lt;/c0&gt; value OR-ing together the source language modifiers that can be applied to a constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110708Z" creationid="pingfangx" creationdate="20191015T110708Z">
        <seg>返回一个 &lt;c0&gt;int&lt;/c0&gt; 值，其值是可以被应用到构造函数的源语言修饰符异或到一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return an &lt;c0&gt;int&lt;/c0&gt; value OR-ing together the source language modifiers that can be applied to a field.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110715Z" creationid="pingfangx" creationdate="20191015T110715Z">
        <seg>返回一个 &lt;c0&gt;int&lt;/c0&gt; 值，其值是可以被应用到字段的源语言修饰符异或到一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return an &lt;c0&gt;int&lt;/c0&gt; value OR-ing together the source language modifiers that can be applied to a method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110749Z" creationid="pingfangx" creationdate="20191015T110749Z">
        <seg>返回一个 &lt;c0&gt;int&lt;/c0&gt; 值，其值是可以被应用到方法的源语言修饰符异或到一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return an &lt;c0&gt;int&lt;/c0&gt; value OR-ing together the source language modifiers that can be applied to an interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110723Z" creationid="pingfangx" creationdate="20191015T110723Z">
        <seg>返回一个 &lt;c0&gt;int&lt;/c0&gt; 值，其值是可以被应用到接口的源语言修饰符异或到一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if all tasks have completed following shut down.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130709Z" creationid="pingfangx" creationdate="20191025T130709Z">
        <seg>如果关闭后所有任务都已完成，则返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if and only if the argument is not &lt;c1&gt;null&lt;/c1&gt; and is a &lt;c2&gt;Boolean&lt;/c2&gt; object that represents the same &lt;c3&gt;boolean&lt;/c3&gt; value as this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133402Z" creationid="pingfangx" creationdate="20191013T133402Z">
        <seg>当且仅当参数不是 &lt;c0&gt;null&lt;/c0&gt;，而是一个与此对象一样，都表示同一个 &lt;c1&gt;Boolean&lt;/c1&gt; 值的 &lt;c2&gt;boolean&lt;/c2&gt; 对象时，才返回 &lt;c3&gt;true&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if and only if the system property named by the argument exists and is equal to the string &lt;c1&gt;"true"&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133415Z" creationid="pingfangx" creationdate="20191013T133415Z">
        <seg>当且仅当以参数命名的系统属性存在，且等于 &lt;c0&gt;"true"&lt;/c0&gt; 字符串时，才返回 &lt;c1&gt;true&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if and only if the underlying class is a local class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101647Z" creationid="pingfangx" creationdate="20191013T101647Z">
        <seg>当且仅当底层类是本地类时返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if and only if the underlying class is a member class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101940Z" creationid="pingfangx" creationdate="20191013T101940Z">
        <seg>当且仅当底层类是成员类时返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if and only if the underlying class is an anonymous class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101605Z" creationid="pingfangx" creationdate="20191013T101605Z">
        <seg>当且仅当底层类是匿名类时返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if the argument is a finite floating-point value; returns &lt;c1&gt;false&lt;/c1&gt; otherwise (for NaN and infinity arguments).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132211Z" creationid="pingfangx" creationdate="20191013T132211Z">
        <seg>如果参数是有限浮点值，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则返回 &lt;c1&gt;false&lt;/c1&gt;(对于 NaN 和无穷大参数)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if the specified number is a Not-a-Number (NaN) value, &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132302Z" creationid="pingfangx" creationdate="20191013T132302Z">
        <seg>如果指定的数是一个非数字 (NaN) 值，则返回 &lt;c0&gt;true&lt;/c0&gt;，否则返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if the specified number is infinitely large in magnitude, &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132301Z" creationid="pingfangx" creationdate="20191013T132301Z">
        <seg>如果指定数的数值是无穷大，则返回 &lt;c0&gt;true&lt;/c0&gt;，否则返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this &lt;c1&gt;Double&lt;/c1&gt; value is a Not-a-Number (NaN), &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132650Z" creationid="pingfangx" creationdate="20191013T132650Z">
        <seg>如果此 &lt;c0&gt;Double&lt;/c0&gt; 值是非数字（NaN）值，则返回 &lt;c1&gt;true&lt;/c1&gt;；否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this &lt;c1&gt;Double&lt;/c1&gt; value is infinitely large in magnitude, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132642Z" creationid="pingfangx" creationdate="20191013T132642Z">
        <seg>如果此 &lt;c0&gt;Double&lt;/c0&gt; 值在数值上为无穷大，则返回 &lt;c1&gt;true&lt;/c1&gt;；否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this &lt;c1&gt;Float&lt;/c1&gt; value is a Not-a-Number (NaN), &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132303Z" creationid="pingfangx" creationdate="20191013T132303Z">
        <seg>如果此 &lt;c0&gt;Float&lt;/c0&gt; 值是一个非数字 (NaN) 值，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this &lt;c1&gt;Float&lt;/c1&gt; value is infinitely large in magnitude, &lt;c2&gt;false&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132259Z" creationid="pingfangx" creationdate="20191013T132259Z">
        <seg>如果此 &lt;c0&gt;Float&lt;/c0&gt; 值的大小是无穷大，则返回 &lt;c1&gt;true&lt;/c1&gt;，否则返回 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this class is a synthetic class; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T102319Z" creationid="pingfangx" creationdate="20191013T102319Z">
        <seg>如果此类是复合类，则返回 &lt;c0&gt;true&lt;/c0&gt;，否则 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this constructor is a synthetic constructor; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104213Z" creationid="pingfangx" creationdate="20191015T104213Z">
        <seg>如果此构造方法是一个复合构造方法，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this constructor was declared to take a variable number of arguments; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104215Z" creationid="pingfangx" creationdate="20191015T104215Z">
        <seg>如果声明此构造方法可以带可变数量的参数，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this executor has been shut down.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130704Z" creationid="pingfangx" creationdate="20191025T130704Z">
        <seg>如果此执行程序已关闭，则返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this field is a synthetic field; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104553Z" creationid="pingfangx" creationdate="20191015T104553Z">
        <seg>如果此字段是复合字段，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this field represents an element of an enumerated type; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104550Z" creationid="pingfangx" creationdate="20191015T104550Z">
        <seg>如果此字段表示枚举类型的元素，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this map contains a mapping for the specified key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140009Z" creationid="pingfangx" creationdate="20191025T140009Z">
        <seg>如果此映射包含对于指定键的映射关系，则返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this map contains no key-value mappings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140037Z" creationid="pingfangx" creationdate="20191025T140037Z">
        <seg>如果此映射不包含键-值映射关系，则返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this map maps one or more keys to the specified value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140011Z" creationid="pingfangx" creationdate="20191025T140011Z">
        <seg>如果此映射将一个或多个键映射到指定值，则返回 &lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this member was introduced by the compiler; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014910Z" creationid="pingfangx" creationdate="20191015T014910Z">
        <seg>如果此成员是编译器引入的，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则，返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this method is a bridge method; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110238Z" creationid="pingfangx" creationdate="20191015T110238Z">
        <seg>如果此方法是 bridge 方法，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则，返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this method is a default method; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110253Z" creationid="pingfangx" creationdate="20191015T110253Z">
        <seg>如果此方法是默认方法，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则，返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this method is a synthetic method; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110255Z" creationid="pingfangx" creationdate="20191015T110255Z">
        <seg>如果此方法为复合方法，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则，返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this method was declared to take a variable number of arguments; returns &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110257Z" creationid="pingfangx" creationdate="20191015T110257Z">
        <seg>如果将此方法声明为带有可变数量的参数，则返回 &lt;c0&gt;true&lt;/c0&gt;；否则，返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;i0&gt;e&lt;/i0&gt;&lt;s1&gt;x&lt;/s1&gt; -1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151747Z" creationid="pingfangx" creationdate="20191013T151747Z">
        <seg>返回 &lt;i0&gt;e&lt;/i0&gt;&lt;s1&gt;x&lt;/s1&gt; -1。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;t0&gt;true&lt;/t0&gt; if and only if the current thread holds the monitor lock on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082020Z" creationid="pingfangx" creationdate="20191014T082020Z">
        <seg>当且仅当当前线程在指定的对象上保持监视器锁时，才返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;t0&gt;true&lt;/t0&gt; if this map contains a mapping for the specified key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135601Z" creationid="pingfangx" creationdate="20191025T135601Z">
        <seg>如果此映射包含对于指定键的映射关系，则返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;t0&gt;true&lt;/t0&gt; if this map contains no key-value mappings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135638Z" creationid="pingfangx" creationdate="20191025T135638Z">
        <seg>如果此映射不包含键-值映射关系，则返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;t0&gt;true&lt;/t0&gt; if this map maps one or more keys to the specified value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135603Z" creationid="pingfangx" creationdate="20191025T135603Z">
        <seg>如果此映射将一个或多个键映射到指定值，则返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns &lt;t0&gt;true&lt;/t0&gt; if, and only if, &lt;c1&gt;&lt;a2&gt;length()&lt;/a2&gt;&lt;/c1&gt; is &lt;t3&gt;0&lt;/t3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T025606Z" creationid="pingfangx" creationdate="20191014T025606Z">
        <seg>当且仅当 &lt;c1&gt;&lt;a2&gt;length()&lt;/a2&gt;&lt;/c1&gt; 为 &lt;t3&gt;0&lt;/t3&gt; 时返回 &lt;t0&gt;true&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns Euler's number &lt;i0&gt;e&lt;/i0&gt; raised to the power of a &lt;c1&gt;double&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151744Z" creationid="pingfangx" creationdate="20191013T151744Z">
        <seg>返回欧拉数 &lt;i0&gt;e&lt;/i0&gt; 的 &lt;c1&gt;double&lt;/c1&gt; 次幂的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;a0&gt;Collection&lt;/a0&gt; view of the values contained in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095154Z" creationid="pingfangx" creationdate="20191026T095154Z">
        <seg>返回此映射所包含的值的 &lt;a0&gt;Collection&lt;/a0&gt; 视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;a0&gt;Set&lt;/a0&gt; view of the keys contained in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095032Z" creationid="pingfangx" creationdate="20191026T095032Z">
        <seg>返回此映射中所包含的键的 &lt;a0&gt;Set&lt;/a0&gt; 视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;a0&gt;Set&lt;/a0&gt; view of the mappings contained in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095207Z" creationid="pingfangx" creationdate="20191026T095207Z">
        <seg>返回此映射所包含的映射关系的 &lt;a0&gt;Set&lt;/a0&gt; 视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;&lt;a1&gt;Collection&lt;/a1&gt;&lt;/c0&gt; view of the values contained in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135919Z" creationid="pingfangx" creationdate="20191025T135919Z">
        <seg>返回此映射所包含的值的 &lt;c0&gt;&lt;a1&gt;Collection&lt;/a1&gt;&lt;/c0&gt; 视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; view of the keys contained in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135642Z" creationid="pingfangx" creationdate="20191025T135642Z">
        <seg>返回此映射中所包含的键的 &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; 视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; view of the mappings contained in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135607Z" creationid="pingfangx" creationdate="20191025T135607Z">
        <seg>返回此映射所包含的映射关系的 &lt;c0&gt;&lt;a1&gt;Set&lt;/a1&gt;&lt;/c0&gt; 视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Boolean&lt;/c0&gt; instance representing the specified &lt;c1&gt;boolean&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134529Z" creationid="pingfangx" creationdate="20191013T134529Z">
        <seg>返回一个表示指定 &lt;c0&gt;boolean&lt;/c0&gt; 值的 &lt;c1&gt;Boolean&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Boolean&lt;/c0&gt; with a value represented by the specified string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134528Z" creationid="pingfangx" creationdate="20191013T134528Z">
        <seg>返回一个用指定的字符串表示值的 &lt;c0&gt;Boolean&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Byte&lt;/c0&gt; instance representing the specified &lt;c1&gt;byte&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121540Z" creationid="pingfangx" creationdate="20191013T121540Z">
        <seg>返回表示指定 &lt;c0&gt;byte&lt;/c0&gt; 值的一个 &lt;c1&gt;Byte&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Byte&lt;/c0&gt; object holding the value extracted from the specified &lt;c1&gt;String&lt;/c1&gt; when parsed with the radix given by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121538Z" creationid="pingfangx" creationdate="20191013T121538Z">
        <seg>返回一个 &lt;c0&gt;Byte&lt;/c0&gt; 对象，该对象保持从指定的 &lt;c1&gt;String&lt;/c1&gt; 中提取的值，该值是在用第二个参数所给定的基数对指定字符串进行解析时提取的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Byte&lt;/c0&gt; object holding the value given by the specified &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121532Z" creationid="pingfangx" creationdate="20191013T121532Z">
        <seg>返回一个保持指定 &lt;c0&gt;String&lt;/c0&gt; 所给出的值的 &lt;c1&gt;Byte&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Class&lt;/c0&gt; object that identifies the declared type for the field represented by this &lt;c1&gt;Field&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104546Z" creationid="pingfangx" creationdate="20191015T104546Z">
        <seg>返回一个 &lt;c0&gt;Class&lt;/c0&gt; 对象，它标识了此 &lt;c1&gt;Field&lt;/c1&gt; 对象所表示字段的声明类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Class&lt;/c0&gt; object that represents the formal return type of the method represented by this &lt;c1&gt;Method&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110229Z" creationid="pingfangx" creationdate="20191015T110229Z">
        <seg>返回一个 &lt;c0&gt;Class&lt;/c0&gt; 对象，该对象描述了此 &lt;c1&gt;Method&lt;/c1&gt; 对象所表示的方法的正式返回类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Constructor&lt;/c0&gt; object that reflects the specified constructor of the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100552Z" creationid="pingfangx" creationdate="20191013T100552Z">
        <seg>返回一个 &lt;c0&gt;Constructor&lt;/c0&gt; 对象，该对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类或接口的指定构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Constructor&lt;/c0&gt; object that reflects the specified public constructor of the class represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100408Z" creationid="pingfangx" creationdate="20191013T100408Z">
        <seg>返回一个 &lt;c0&gt;Constructor&lt;/c0&gt; 对象，它反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类的指定公共构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Double&lt;/c0&gt; instance representing the specified &lt;c1&gt;double&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132812Z" creationid="pingfangx" creationdate="20191013T132812Z">
        <seg>返回表示指定的 &lt;c0&gt;double&lt;/c0&gt; 值的 &lt;c1&gt;Double&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Double&lt;/c0&gt; object holding the &lt;c1&gt;double&lt;/c1&gt; value represented by the argument string &lt;c2&gt;s&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132811Z" creationid="pingfangx" creationdate="20191013T132811Z">
        <seg>返回保存用参数字符串 &lt;c0&gt;s&lt;/c0&gt; 表示的 &lt;c1&gt;double&lt;/c1&gt; 值的 &lt;c2&gt;Double&lt;/c2&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Field&lt;/c0&gt; object that reflects the specified declared field of the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100619Z" creationid="pingfangx" creationdate="20191013T100619Z">
        <seg>返回一个 &lt;c0&gt;Field&lt;/c0&gt; 对象，该对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类或接口的指定已声明字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Field&lt;/c0&gt; object that reflects the specified public member field of the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101000Z" creationid="pingfangx" creationdate="20191013T101000Z">
        <seg>返回一个 &lt;c0&gt;Field&lt;/c0&gt; 对象，它反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类或接口的指定公共成员字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Float&lt;/c0&gt; instance representing the specified &lt;c1&gt;float&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132332Z" creationid="pingfangx" creationdate="20191013T132332Z">
        <seg>返回表示指定的 &lt;c0&gt;float&lt;/c0&gt; 值的 &lt;c1&gt;Float&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Float&lt;/c0&gt; object holding the &lt;c1&gt;float&lt;/c1&gt; value represented by the argument string &lt;c2&gt;s&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132331Z" creationid="pingfangx" creationdate="20191013T132331Z">
        <seg>返回保存用参数字符串 &lt;c0&gt;s&lt;/c0&gt; 表示的 &lt;c1&gt;float&lt;/c1&gt; 值的 &lt;c2&gt;Float&lt;/c2&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Long&lt;/c0&gt; instance representing the specified &lt;c1&gt;long&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125113Z" creationid="pingfangx" creationdate="20191013T125113Z">
        <seg>返回表示指定 &lt;c0&gt;long&lt;/c0&gt; 值的 &lt;c1&gt;Long&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Long&lt;/c0&gt; object holding the value extracted from the specified &lt;c1&gt;String&lt;/c1&gt; when parsed with the radix given by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125110Z" creationid="pingfangx" creationdate="20191013T125110Z">
        <seg>当使用第二个参数给出的基数进行解析时，返回保持从指定 &lt;c0&gt;String&lt;/c0&gt; 中提取的值的 &lt;c1&gt;Long&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Long&lt;/c0&gt; object holding the value of the specified &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125109Z" creationid="pingfangx" creationdate="20191013T125109Z">
        <seg>返回保持指定 &lt;c0&gt;String&lt;/c0&gt; 的值的 &lt;c1&gt;Long&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Method&lt;/c0&gt; object that reflects the specified declared method of the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100631Z" creationid="pingfangx" creationdate="20191013T100631Z">
        <seg>返回一个 &lt;c0&gt;Method&lt;/c0&gt; 对象，该对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类或接口的指定已声明方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Method&lt;/c0&gt; object that reflects the specified public member method of the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101119Z" creationid="pingfangx" creationdate="20191013T101119Z">
        <seg>返回一个 &lt;c0&gt;Method&lt;/c0&gt; 对象，它反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类或接口的指定公共成员方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;RunnableFuture&lt;/c0&gt; for the given callable task.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130528Z" creationid="pingfangx" creationdate="20191025T130528Z">
        <seg>为给定可调用任务返回一个 &lt;c0&gt;RunnableFuture&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;RunnableFuture&lt;/c0&gt; for the given runnable and default value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130527Z" creationid="pingfangx" creationdate="20191025T130527Z">
        <seg>为给定可运行任务和默认值返回一个 &lt;c0&gt;RunnableFuture&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Short&lt;/c0&gt; instance representing the specified &lt;c1&gt;short&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122120Z" creationid="pingfangx" creationdate="20191013T122120Z">
        <seg>返回表示指定 &lt;c0&gt;short&lt;/c0&gt; 值的 &lt;c1&gt;Short&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Short&lt;/c0&gt; object holding the value extracted from the specified &lt;c1&gt;String&lt;/c1&gt; when parsed with the radix given by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122121Z" creationid="pingfangx" creationdate="20191013T122121Z">
        <seg>返回一个 &lt;c0&gt;Short&lt;/c0&gt; 对象，该对象保持从指定的 &lt;c1&gt;String&lt;/c1&gt; 中提取的值，该值是在使用第二个参数给出的基数对指定字符串进行解析时提取的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Short&lt;/c0&gt; object holding the value given by the specified &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122119Z" creationid="pingfangx" creationdate="20191013T122119Z">
        <seg>返回一个保持指定 &lt;c0&gt;String&lt;/c0&gt; 所给出的值的 &lt;c1&gt;Short&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing the specified &lt;c1&gt;char&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150027Z" creationid="pingfangx" creationdate="20191013T150027Z">
        <seg>返回一个表示指定 &lt;c0&gt;char&lt;/c0&gt; 值的 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing the specified &lt;c1&gt;long&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125108Z" creationid="pingfangx" creationdate="20191013T125108Z">
        <seg>返回表示指定 &lt;c0&gt;long&lt;/c0&gt; 的 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing the specified boolean.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134526Z" creationid="pingfangx" creationdate="20191013T134526Z">
        <seg>返回一个表示指定布尔值的 &lt;c0&gt;String&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing the specified integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124428Z" creationid="pingfangx" creationdate="20191013T124428Z">
        <seg>返回一个表示指定整数的 &lt;c0&gt;String&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing this &lt;c1&gt;Byte&lt;/c1&gt;'s value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121527Z" creationid="pingfangx" creationdate="20191013T121527Z">
        <seg>返回表示 &lt;c0&gt;Long&lt;/c0&gt; 值的 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing this &lt;c1&gt;Character&lt;/c1&gt;'s value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150025Z" creationid="pingfangx" creationdate="20191013T150025Z">
        <seg>返回表示此 &lt;c0&gt;Character&lt;/c0&gt; 值的 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing this &lt;c1&gt;Integer&lt;/c1&gt;'s value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124426Z" creationid="pingfangx" creationdate="20191013T124426Z">
        <seg>返回一个表示该 &lt;c0&gt;Integer&lt;/c0&gt; 值的 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing this &lt;c1&gt;Long&lt;/c1&gt;'s value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125107Z" creationid="pingfangx" creationdate="20191013T125107Z">
        <seg>返回表示 &lt;c0&gt;Long&lt;/c0&gt; 值的 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing this &lt;c1&gt;Short&lt;/c1&gt;'s value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122117Z" creationid="pingfangx" creationdate="20191013T122117Z">
        <seg>返回表示此 &lt;c0&gt;Short&lt;/c0&gt; 的值的 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;String&lt;/c0&gt; object representing this Boolean's value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134525Z" creationid="pingfangx" creationdate="20191013T134525Z">
        <seg>返回表示该布尔值的 &lt;c0&gt;String&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Type&lt;/c0&gt; object representing the component type of this array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161716Z" creationid="pingfangx" creationdate="20191014T161716Z">
        <seg>返回表示此数组的组件类型的 &lt;c0&gt;Type&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Type&lt;/c0&gt; object representing the type that this type is a member of.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071654Z" creationid="pingfangx" creationdate="20191015T071654Z">
        <seg>返回 &lt;c0&gt;Type&lt;/c0&gt; 对象，表示此类型是其成员之一的类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Type&lt;/c0&gt; object that represents the declared type for the field represented by this &lt;c1&gt;Field&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104537Z" creationid="pingfangx" creationdate="20191015T104537Z">
        <seg>返回一个 &lt;c0&gt;Type&lt;/c0&gt; 对象，它表示此 &lt;c1&gt;Field&lt;/c1&gt; 对象所表示字段的声明类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;Type&lt;/c0&gt; object that represents the formal return type of the method represented by this &lt;c1&gt;Method&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110216Z" creationid="pingfangx" creationdate="20191015T110216Z">
        <seg>返回表示由此 &lt;c0&gt;Method&lt;/c0&gt; 对象所表示方法的正式返回类型的 &lt;c1&gt;Type&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;double&lt;/c0&gt; value with a positive sign, greater than or equal to &lt;c1&gt;0.0&lt;/c1&gt; and less than &lt;c2&gt;1.0&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152309Z" creationid="pingfangx" creationdate="20191013T152309Z">
        <seg>返回带正号的 &lt;c0&gt;double&lt;/c0&gt; 值，该值大于等于 &lt;c1&gt;0.0&lt;/c1&gt; 且小于 &lt;c2&gt;1.0&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;long&lt;/c0&gt; value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified &lt;c1&gt;long&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125007Z" creationid="pingfangx" creationdate="20191013T125007Z">
        <seg>返回至多有一个 1 位的 &lt;c0&gt;long&lt;/c0&gt; 值，在指定的 &lt;c1&gt;long&lt;/c1&gt; 值中最高位（最左边）的 1 位的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;c0&gt;long&lt;/c0&gt; value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified &lt;c1&gt;long&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125010Z" creationid="pingfangx" creationdate="20191013T125010Z">
        <seg>返回至多有一个 1 位的 &lt;c0&gt;long&lt;/c0&gt; 值，在指定的 &lt;c1&gt;long&lt;/c1&gt; 值中最低位（最右边）的 1 位的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;t0&gt;Character&lt;/t0&gt; instance representing the specified &lt;t1&gt;char&lt;/t1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150033Z" creationid="pingfangx" creationdate="20191013T150033Z">
        <seg>返回一个表示指定 &lt;t0&gt;char&lt;/t0&gt; 值的 &lt;t1&gt;Character&lt;/t1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a &lt;t0&gt;Package&lt;/t0&gt; that has been defined by this class loader or any of its ancestors.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073401Z" creationid="pingfangx" creationdate="20191014T073401Z">
        <seg>返回由此类加载器或其任何祖先所定义的 &lt;t0&gt;Package&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a String that represents the character sequence in the array specified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024415Z" creationid="pingfangx" creationdate="20191014T024415Z">
        <seg>返回指定数组中表示该字符序列的 String。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a canonical representation for the string object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T025518Z" creationid="pingfangx" creationdate="20191014T025518Z">
        <seg>返回字符串对象的规范化表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a copy of the string, with leading and trailing whitespace omitted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030143Z" creationid="pingfangx" creationdate="20191014T030143Z">
        <seg>返回字符串的副本，忽略前导空白和尾部空白。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a directly or indirectly present list of annotations on &lt;c0&gt;this&lt;/c0&gt; element, whose class is &lt;c1&gt;annotationClass&lt;/c1&gt;, or an empty array if nothing was found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T102554Z" creationid="pingfangx" creationdate="20191013T102554Z">
        <seg>返回 &lt;c0&gt;this&lt;/c0&gt; 元素上直接或间接存在的注释列表，其类是 &lt;c1&gt;annotationClass&lt;/c1&gt;，如果未找到任何内容，则返回空数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a directly-present annotation on &lt;c0&gt;this&lt;/c0&gt; element, whose class is &lt;c1&gt;annotationClass&lt;/c1&gt;, or &lt;c2&gt;null&lt;/c2&gt; if nothing was found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100509Z" creationid="pingfangx" creationdate="20191013T100509Z">
        <seg>返回在 &lt;c0&gt;this&lt;/c0&gt; 元素上直接存在的注释，其类为 &lt;c1&gt;annotationClass&lt;/c1&gt;，如果未找到任何内容，则返回 &lt;c2&gt;null&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a formatted string using the specified format string and arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024440Z" creationid="pingfangx" creationdate="20191014T024440Z">
        <seg>使用指定的格式字符串和参数返回一个格式化字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a formatted string using the specified locale, format string, and arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024436Z" creationid="pingfangx" creationdate="20191014T024436Z">
        <seg>使用指定的语言环境、格式字符串和参数返回一个格式化字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;boolean&lt;/c0&gt; value; compatible with &lt;c1&gt;Boolean.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133420Z" creationid="pingfangx" creationdate="20191013T133420Z">
        <seg>返回一个 &lt;c0&gt;boolean&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Boolean.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;byte&lt;/c0&gt; value; compatible with &lt;c1&gt;Byte.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121519Z" creationid="pingfangx" creationdate="20191013T121519Z">
        <seg>返回一个 &lt;c0&gt;byte&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Byte.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;char&lt;/c0&gt; value; compatible with &lt;c1&gt;Character.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145139Z" creationid="pingfangx" creationdate="20191013T145139Z">
        <seg>返回一个 &lt;c0&gt;char&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Character.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;double&lt;/c0&gt; value; compatible with &lt;c1&gt;Double.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132639Z" creationid="pingfangx" creationdate="20191013T132639Z">
        <seg>返回一个 &lt;c0&gt;double&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Double.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;float&lt;/c0&gt; value; compatible with &lt;c1&gt;Float.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132115Z" creationid="pingfangx" creationdate="20191013T132115Z">
        <seg>返回一个 &lt;c0&gt;float&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Float.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;int&lt;/c0&gt; value; compatible with &lt;c1&gt;Integer.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123337Z" creationid="pingfangx" creationdate="20191013T123337Z">
        <seg>返回一个 &lt;c0&gt;int&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Integer.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;long&lt;/c0&gt; value; compatible with &lt;c1&gt;Long.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125006Z" creationid="pingfangx" creationdate="20191013T125006Z">
        <seg>返回一个 &lt;c0&gt;long&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Long.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for a &lt;c0&gt;short&lt;/c0&gt; value; compatible with &lt;c1&gt;Short.hashCode()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122053Z" creationid="pingfangx" creationdate="20191013T122053Z">
        <seg>返回一个 &lt;c0&gt;short&lt;/c0&gt; 值的哈希码；兼容 &lt;c1&gt;Short.hashCode()&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Boolean&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133416Z" creationid="pingfangx" creationdate="20191013T133416Z">
        <seg>返回该 &lt;c0&gt;Boolean&lt;/c0&gt; 对象的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Byte&lt;/c0&gt;; equal to the result of invoking &lt;c1&gt;intValue()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121457Z" creationid="pingfangx" creationdate="20191013T121457Z">
        <seg>返回此 &lt;c0&gt;Byte&lt;/c0&gt; 的哈希码；等于调用 &lt;c1&gt;intValue()&lt;/c1&gt; 的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Character&lt;/c0&gt;; equal to the result of invoking &lt;c1&gt;charValue()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145147Z" creationid="pingfangx" creationdate="20191013T145147Z">
        <seg>返回此 &lt;c0&gt;Character&lt;/c0&gt; 的哈希码；等于调用 &lt;c1&gt;charValue()&lt;/c1&gt; 的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Double&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132634Z" creationid="pingfangx" creationdate="20191013T132634Z">
        <seg>返回此 &lt;c0&gt;Double&lt;/c0&gt; 对象的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Float&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132111Z" creationid="pingfangx" creationdate="20191013T132111Z">
        <seg>返回此 &lt;c0&gt;Float&lt;/c0&gt; 对象的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Integer&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123328Z" creationid="pingfangx" creationdate="20191013T123328Z">
        <seg>返回此 &lt;c0&gt;Integer&lt;/c0&gt; 的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125003Z" creationid="pingfangx" creationdate="20191013T125003Z">
        <seg>返回 &lt;c0&gt;Long&lt;/c0&gt; 的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this &lt;c0&gt;Short&lt;/c0&gt;; equal to the result of invoking &lt;c1&gt;intValue()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122104Z" creationid="pingfangx" creationdate="20191013T122104Z">
        <seg>返回此 &lt;c0&gt;Short&lt;/c0&gt; 的哈希码；等于调用 &lt;c1&gt;intValue()&lt;/c1&gt; 的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this enum constant.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094040Z" creationid="pingfangx" creationdate="20191014T094040Z">
        <seg>返回枚举常量的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code for this string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024735Z" creationid="pingfangx" creationdate="20191014T024735Z">
        <seg>返回此字符串的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code value for the object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094854Z" creationid="pingfangx" creationdate="20191012T094854Z">
        <seg>返回该对象的哈希码值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hash code value for this stack trace element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095229Z" creationid="pingfangx" creationdate="20191014T095229Z">
        <seg>返回此堆栈跟踪元素的哈希码值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hashcode for this &lt;c0&gt;Constructor&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104210Z" creationid="pingfangx" creationdate="20191015T104210Z">
        <seg>返回此 &lt;c0&gt;Constructor&lt;/c0&gt; 的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hashcode for this &lt;c0&gt;Field&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104548Z" creationid="pingfangx" creationdate="20191015T104548Z">
        <seg>返回该 &lt;c0&gt;Field&lt;/c0&gt; 的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hashcode for this &lt;c0&gt;Method&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110232Z" creationid="pingfangx" creationdate="20191015T110232Z">
        <seg>返回此 &lt;c0&gt;Method&lt;/c0&gt; 的哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hexadecimal string representation of the &lt;c0&gt;double&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132710Z" creationid="pingfangx" creationdate="20191013T132710Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 参数的十六进制字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a hexadecimal string representation of the &lt;c0&gt;float&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132327Z" creationid="pingfangx" creationdate="20191013T132327Z">
        <seg>返回 &lt;c0&gt;float&lt;/c0&gt; 参数的十六进制字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a list of non-TreeNodes replacing those linked from this node.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100741Z" creationid="pingfangx" creationdate="20191026T100741Z">
        <seg>返回非 TreeNodes 的列表，替换从此节点链接的列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a map of stack traces for all live threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081955Z" creationid="pingfangx" creationdate="20191014T081955Z">
        <seg>返回所有活动线程的堆栈跟踪的一个映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094156Z" creationid="pingfangx" creationdate="20191014T094156Z">
        <seg>在该对象小于、等于或大于指定对象时，分别返回负整数、零或正整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new &lt;c0&gt;CharSequence&lt;/c0&gt; that is a subsequence of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034232Z" creationid="pingfangx" creationdate="20191014T034232Z">
        <seg>返回一个新的 &lt;c0&gt;CharSequence&lt;/c0&gt;，它是此序列的子序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new &lt;c0&gt;String&lt;/c0&gt; object representing the specified &lt;c1&gt;byte&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121530Z" creationid="pingfangx" creationdate="20191013T121530Z">
        <seg>返回表示指定 &lt;c0&gt;byte&lt;/c0&gt; 的一个新 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new &lt;c0&gt;String&lt;/c0&gt; object representing the specified &lt;c1&gt;short&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122116Z" creationid="pingfangx" creationdate="20191013T122116Z">
        <seg>返回表示指定 &lt;c0&gt;short&lt;/c0&gt; 的一个新 &lt;c1&gt;String&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new &lt;c0&gt;String&lt;/c0&gt; that contains a subsequence of characters currently contained in this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033914Z" creationid="pingfangx" creationdate="20191014T033914Z">
        <seg>返回一个新的 &lt;c0&gt;String&lt;/c0&gt;，它包含此字符序列当前所包含的字符子序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new &lt;c0&gt;String&lt;/c0&gt; that contains a subsequence of characters currently contained in this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033913Z" creationid="pingfangx" creationdate="20191014T033913Z">
        <seg>返回一个新的 &lt;c0&gt;String&lt;/c0&gt;，它包含此序列当前所包含字符的子序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new &lt;c0&gt;double&lt;/c0&gt; initialized to the value represented by the specified &lt;c1&gt;String&lt;/c1&gt;, as performed by the &lt;c2&gt;valueOf&lt;/c2&gt; method of class &lt;c3&gt;Double&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132702Z" creationid="pingfangx" creationdate="20191013T132702Z">
        <seg>返回一个新的 &lt;c0&gt;double&lt;/c0&gt; 值，该值被初始化为用指定 &lt;c1&gt;String&lt;/c1&gt; 表示的值，这与 &lt;c2&gt;Double&lt;/c2&gt; 类的 &lt;c3&gt;valueOf&lt;/c3&gt; 方法一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new &lt;c0&gt;float&lt;/c0&gt; initialized to the value represented by the specified &lt;c1&gt;String&lt;/c1&gt;, as performed by the &lt;c2&gt;valueOf&lt;/c2&gt; method of class &lt;c3&gt;Float&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132320Z" creationid="pingfangx" creationdate="20191013T132320Z">
        <seg>返回一个新的 &lt;c0&gt;float&lt;/c0&gt; 值，该值被初始化为用指定 &lt;c1&gt;String&lt;/c1&gt; 表示的值，这与 &lt;c2&gt;Float&lt;/c2&gt; 类的 &lt;c3&gt;valueOf&lt;/c3&gt; 方法一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new character sequence that is a subsequence of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030103Z" creationid="pingfangx" creationdate="20191014T030103Z">
        <seg>返回一个新的字符序列，它是此序列的一个子序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new string resulting from replacing all occurrences of &lt;c0&gt;oldChar&lt;/c0&gt; in this string with &lt;c1&gt;newChar&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030040Z" creationid="pingfangx" creationdate="20191014T030040Z">
        <seg>返回一个新的字符串，它是通过用 &lt;c0&gt;newChar&lt;/c0&gt; 替换此字符串中出现的所有 &lt;c1&gt;oldChar&lt;/c1&gt; 得到的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new string that is a substring of this string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030107Z" creationid="pingfangx" creationdate="20191014T030107Z">
        <seg>返回一个新字符串，它是此字符串的一个子字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a power of two size for the given target capacity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083513Z" creationid="pingfangx" creationdate="20191026T083513Z">
        <seg>为给定的目标容量返回 2 的幂的大小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a reference to the currently executing thread object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081615Z" creationid="pingfangx" creationdate="20191014T081615Z">
        <seg>返回对当前正在执行的线程对象的引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number (NaN) values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132629Z" creationid="pingfangx" creationdate="20191013T132629Z">
        <seg>根据 IEEE 754 浮点“双精度格式”位布局，返回指定浮点值的表示形式，并保留 NaN 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132625Z" creationid="pingfangx" creationdate="20191013T132625Z">
        <seg>根据 IEEE 754 浮点双精度格式 ("double format") 位布局，返回指定浮点值的表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number (NaN) values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132108Z" creationid="pingfangx" creationdate="20191013T132108Z">
        <seg>根据 IEEE 754 浮点“单一格式”位布局，返回指定浮点值的表示形式，并保留非数字 (NaN) 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132104Z" creationid="pingfangx" creationdate="20191013T132104Z">
        <seg>根据 IEEE 754 浮点“单一格式”位布局，返回指定浮点值的表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a shallow copy of this &lt;t0&gt;AbstractMap&lt;/t0&gt; instance: the keys and values themselves are not cloned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140006Z" creationid="pingfangx" creationdate="20191025T140006Z">
        <seg>返回此 &lt;t0&gt;AbstractMap&lt;/t0&gt; 实例的浅表副本：不复制键和值本身。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a shallow copy of this &lt;t0&gt;HashMap&lt;/t0&gt; instance: the keys and values themselves are not cloned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135558Z" creationid="pingfangx" creationdate="20191025T135558Z">
        <seg>返回此 &lt;t0&gt;HashMap&lt;/t0&gt; 实例的浅表副本：并不复制键和值本身。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a short description of this throwable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115255Z" creationid="pingfangx" creationdate="20191013T115255Z">
        <seg>返回此 throwable 的简短描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a stream of &lt;c0&gt;int&lt;/c0&gt; zero-extending the &lt;c1&gt;char&lt;/c1&gt; values from this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034435Z" creationid="pingfangx" creationdate="20191014T034435Z">
        <seg>返回此序列中的 &lt;c1&gt;char&lt;/c1&gt; 值 zero-extending 的 &lt;c0&gt;int&lt;/c0&gt;  流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a stream of code point values from this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034329Z" creationid="pingfangx" creationdate="20191014T034329Z">
        <seg>返回此序列的代码点值流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string containing the characters in this sequence in the same order as this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034234Z" creationid="pingfangx" creationdate="20191014T034234Z">
        <seg>返回一个包含此序列中字符的字符串，该字符串与此序列的顺序相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing this &lt;c0&gt;Constructor&lt;/c0&gt;, including type parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104224Z" creationid="pingfangx" creationdate="20191015T104224Z">
        <seg>返回描述此 &lt;c0&gt;Constructor&lt;/c0&gt; 的字符串，其中包括类型参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing this &lt;c0&gt;Constructor&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104231Z" creationid="pingfangx" creationdate="20191015T104231Z">
        <seg>返回描述此 &lt;c0&gt;Constructor&lt;/c0&gt; 的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing this &lt;c0&gt;Field&lt;/c0&gt;, including its generic type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104602Z" creationid="pingfangx" creationdate="20191015T104602Z">
        <seg>返回一个描述此 &lt;c0&gt;Field&lt;/c0&gt;（包括其一般类型）的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing this &lt;c0&gt;Field&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104605Z" creationid="pingfangx" creationdate="20191015T104605Z">
        <seg>返回一个描述此 &lt;c0&gt;Field&lt;/c0&gt; 的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing this &lt;c0&gt;Method&lt;/c0&gt;, including type parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110300Z" creationid="pingfangx" creationdate="20191015T110300Z">
        <seg>返回描述此 &lt;c0&gt;Method&lt;/c0&gt; 的字符串，包括类型参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing this &lt;c0&gt;Method&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110303Z" creationid="pingfangx" creationdate="20191015T110303Z">
        <seg>返回描述此 &lt;c0&gt;Method&lt;/c0&gt; 的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130330Z" creationid="pingfangx" creationdate="20191025T130330Z">
        <seg>返回一个字符串，标识该池，以及它的状态，包括运行状态的指示和估计工人和任务计数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string map view of this process builder's environment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075919Z" creationid="pingfangx" creationdate="20191014T075919Z">
        <seg>返回此进程生成器环境的字符串映射视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the &lt;c0&gt;double&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132711Z" creationid="pingfangx" creationdate="20191013T132711Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the &lt;c0&gt;float&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132330Z" creationid="pingfangx" creationdate="20191013T132330Z">
        <seg>返回 &lt;c0&gt;float&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the &lt;c0&gt;long&lt;/c0&gt; argument as an unsigned integer in base 16.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125103Z" creationid="pingfangx" creationdate="20191013T125103Z">
        <seg>以十六进制无符号整数形式返回 &lt;c0&gt;long&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the &lt;c0&gt;long&lt;/c0&gt; argument as an unsigned integer in base 2.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125102Z" creationid="pingfangx" creationdate="20191013T125102Z">
        <seg>以二进制无符号整数形式返回 &lt;c0&gt;long&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the &lt;c0&gt;long&lt;/c0&gt; argument as an unsigned integer in base 8.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125104Z" creationid="pingfangx" creationdate="20191013T125104Z">
        <seg>以八进制无符号整数形式返回 &lt;c0&gt;long&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the first argument in the radix specified by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124430Z" creationid="pingfangx" creationdate="20191013T124430Z">
        <seg>返回在使用第二个参数指定的基数时第一个参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the integer argument as an unsigned integer in base 16.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124422Z" creationid="pingfangx" creationdate="20191013T124422Z">
        <seg>以十六进制（基数 16）无符号整数形式返回一个整数参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the integer argument as an unsigned integer in base 2.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124420Z" creationid="pingfangx" creationdate="20191013T124420Z">
        <seg>以二进制（基数 2）无符号整数形式返回一个整数参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the integer argument as an unsigned integer in base 8.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124425Z" creationid="pingfangx" creationdate="20191013T124425Z">
        <seg>以八进制（基数 8）无符号整数形式返回一个整数参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094956Z" creationid="pingfangx" creationdate="20191012T094956Z">
        <seg>返回该对象的字符串表示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of this &lt;c0&gt;Double&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132712Z" creationid="pingfangx" creationdate="20191013T132712Z">
        <seg>返回此 &lt;c0&gt;Double&lt;/c0&gt; 对象的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of this &lt;c0&gt;Float&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132329Z" creationid="pingfangx" creationdate="20191013T132329Z">
        <seg>返回此 &lt;c0&gt;Float&lt;/c0&gt; 对象的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of this Thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093331Z" creationid="pingfangx" creationdate="20191014T093331Z">
        <seg>返回此线程组的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of this annotation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150153Z" creationid="pingfangx" creationdate="20191014T150153Z">
        <seg>返回此 annotation 的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140123Z" creationid="pingfangx" creationdate="20191025T140123Z">
        <seg>返回此映射的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of this stack trace element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095235Z" creationid="pingfangx" creationdate="20191014T095235Z">
        <seg>返回表示该堆栈跟踪元素的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of this thread, including the thread's name, priority, and thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082856Z" creationid="pingfangx" creationdate="20191014T082856Z">
        <seg>返回该线程的字符串表示形式，包括线程名称、优先级和线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representing the data in this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033914Z" creationid="pingfangx" creationdate="20191014T033914Z">
        <seg>返回此序列中数据的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a value indicating a character's general category.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145133Z" creationid="pingfangx" creationdate="20191013T145133Z">
        <seg>返回一个指示字符的常规类别的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns all annotations present on this element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T102421Z" creationid="pingfangx" creationdate="20191013T102421Z">
        <seg>返回此元素上存在的所有注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns all annotations that are directly present on this element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T102435Z" creationid="pingfangx" creationdate="20191013T102435Z">
        <seg>返回直接存在于此元素上的所有注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns all of the &lt;t0&gt;Packages&lt;/t0&gt; defined by this class loader and its ancestors.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073403Z" creationid="pingfangx" creationdate="20191014T073403Z">
        <seg>返回此类加载器及其祖先所定义的所有 &lt;t0&gt;Package&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an &lt;c0&gt;Integer&lt;/c0&gt; instance representing the specified &lt;c1&gt;int&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124445Z" creationid="pingfangx" creationdate="20191013T124445Z">
        <seg>返回一个表示指定的 &lt;c0&gt;int&lt;/c0&gt; 值的 &lt;c1&gt;Integer&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an &lt;c0&gt;Integer&lt;/c0&gt; object holding the value extracted from the specified &lt;c1&gt;String&lt;/c1&gt; when parsed with the radix given by the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124433Z" creationid="pingfangx" creationdate="20191013T124433Z">
        <seg>返回一个 &lt;c0&gt;Integer&lt;/c0&gt; 对象，该对象中保存了用第二个参数提供的基数进行解析时从指定的 &lt;c1&gt;String&lt;/c1&gt; 中提取的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an &lt;c0&gt;Integer&lt;/c0&gt; object holding the value of the specified &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124431Z" creationid="pingfangx" creationdate="20191013T124431Z">
        <seg>返回保存指定的 &lt;c0&gt;String&lt;/c0&gt; 的值的 &lt;c1&gt;Integer&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an &lt;c0&gt;int&lt;/c0&gt; value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified &lt;c1&gt;int&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123339Z" creationid="pingfangx" creationdate="20191013T123339Z">
        <seg>返回具有至多单个 1 位的 &lt;c0&gt;int&lt;/c0&gt; 值，在指定的 &lt;c1&gt;int&lt;/c1&gt; 值中最高位（最左边）的 1 位的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an &lt;c0&gt;int&lt;/c0&gt; value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified &lt;c1&gt;int&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123405Z" creationid="pingfangx" creationdate="20191013T123405Z">
        <seg>返回具有至多单个 1 位的 &lt;c0&gt;int&lt;/c0&gt; 值，在指定的 &lt;c1&gt;int&lt;/c1&gt; 值中最低位（最右边）的 1 位的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing &lt;c0&gt;Class&lt;/c0&gt; objects representing all the public classes and interfaces that are members of the class represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100335Z" creationid="pingfangx" creationdate="20191013T100335Z">
        <seg>返回一个包含某些 &lt;c0&gt;Class&lt;/c0&gt; 对象的数组，这些对象表示属于此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类的成员的所有公共类和接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing &lt;c0&gt;Constructor&lt;/c0&gt; objects reflecting all the public constructors of the class represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100423Z" creationid="pingfangx" creationdate="20191013T100423Z">
        <seg>返回一个包含某些 &lt;c0&gt;Constructor&lt;/c0&gt; 对象的数组，这些对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类的所有公共构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing &lt;c0&gt;Field&lt;/c0&gt; objects reflecting all the accessible public fields of the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101009Z" creationid="pingfangx" creationdate="20191013T101009Z">
        <seg>返回一个包含某些 &lt;c0&gt;Field&lt;/c0&gt; 对象的数组，这些对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类或接口的所有可访问公共字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing &lt;c0&gt;Method&lt;/c0&gt; objects reflecting all the public &lt;e1&gt;member&lt;/e1&gt; methods of the class or interface represented by this &lt;c2&gt;Class&lt;/c2&gt; object, including those declared by the class or interface and those inherited from superclasses and superinterfaces.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101302Z" creationid="pingfangx" creationdate="20191013T101131Z">
        <seg>返回一个包含某些 &lt;c0&gt;Method&lt;/c0&gt; 对象的数组，这些对象反映此 &lt;e1&gt;Class&lt;/e1&gt; 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 &lt;c2&gt;member&lt;/c2&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing all of the exceptions that were suppressed, typically by the &lt;c0&gt;try&lt;/c0&gt;-with-resources statement, in order to deliver this exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115237Z" creationid="pingfangx" creationdate="20191013T115237Z">
        <seg>返回包含所有被抑制的异常的数组，通常由 &lt;c0&gt;try&lt;/c0&gt;-with-resources 语句来传递此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing all the annotations of this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100105Z" creationid="pingfangx" creationdate="20191013T100105Z">
        <seg>返回一个包含该类别的所有注释的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Class&lt;/c0&gt; objects reflecting all the classes and interfaces declared as members of the class represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100548Z" creationid="pingfangx" creationdate="20191013T100548Z">
        <seg>返回 &lt;c0&gt;Class&lt;/c0&gt; 对象的一个数组，这些对象反映声明为此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类的成员的所有类和接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Class&lt;/c0&gt; objects that represent the formal parameter types, in declaration order, of the constructor represented by this &lt;c1&gt;Constructor&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104204Z" creationid="pingfangx" creationdate="20191015T104204Z">
        <seg>按照声明顺序返回一组 &lt;c0&gt;Class&lt;/c0&gt; 对象，这些对象表示此 &lt;c1&gt;Constructor&lt;/c1&gt; 对象所表示构造方法的形参类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Class&lt;/c0&gt; objects that represent the formal parameter types, in declaration order, of the method represented by this &lt;c1&gt;Method&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110227Z" creationid="pingfangx" creationdate="20191015T110227Z">
        <seg>按照声明顺序返回 &lt;c0&gt;Class&lt;/c0&gt; 对象的数组，这些对象描述了此 &lt;c1&gt;Method&lt;/c1&gt; 对象所表示的方法的形参类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Class&lt;/c0&gt; objects that represent the types of exceptions declared to be thrown by the underlying constructor represented by this &lt;c1&gt;Constructor&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104145Z" creationid="pingfangx" creationdate="20191015T104145Z">
        <seg>返回一组表示声明要抛出的异常类型的 &lt;c0&gt;Class&lt;/c0&gt; 对象，这些异常是由此 &lt;c1&gt;Constructor&lt;/c1&gt; 对象表示的底层构造方法抛出的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Class&lt;/c0&gt; objects that represent the types of the exceptions declared to be thrown by the underlying method represented by this &lt;c1&gt;Method&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110159Z" creationid="pingfangx" creationdate="20191015T110159Z">
        <seg>返回 &lt;c0&gt;Class&lt;/c0&gt; 对象的数组，这些对象描述了声明将此 &lt;c1&gt;Method&lt;/c1&gt; 对象表示的底层方法抛出的异常类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Constructor&lt;/c0&gt; objects reflecting all the constructors declared by the class represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100559Z" creationid="pingfangx" creationdate="20191013T100559Z">
        <seg>返回 &lt;c0&gt;Constructor&lt;/c0&gt; 对象的一个数组，这些对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象表示的类声明的所有构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Field&lt;/c0&gt; objects reflecting all the fields declared by the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100625Z" creationid="pingfangx" creationdate="20191013T100625Z">
        <seg>返回 &lt;c0&gt;Field&lt;/c0&gt; 对象的一个数组，这些对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的类或接口所声明的所有字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Method&lt;/c0&gt; objects reflecting all the methods declared by the class or interface represented by this &lt;c1&gt;Class&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100642Z" creationid="pingfangx" creationdate="20191013T100642Z">
        <seg>返回 &lt;c0&gt;Method&lt;/c0&gt; 对象的一个数组，这些对象反映此 &lt;c1&gt;Class&lt;/c1&gt; 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Type&lt;/c0&gt; objects representing the actual type arguments to this type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071649Z" creationid="pingfangx" creationdate="20191015T071649Z">
        <seg>返回表示此类型实际类型参数的 &lt;c0&gt;Type&lt;/c0&gt; 对象的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Type&lt;/c0&gt; objects representing the lower bound(s) of this type variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T085916Z" creationid="pingfangx" creationdate="20191015T085916Z">
        <seg>返回表示此类型变量下边界的 &lt;c0&gt;Type&lt;/c0&gt; 对象的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Type&lt;/c0&gt; objects representing the upper bound(s) of this type variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082111Z" creationid="pingfangx" creationdate="20191015T082111Z">
        <seg>返回表示此类型变量上边界的 &lt;c0&gt;Type&lt;/c0&gt; 对象的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Type&lt;/c0&gt; objects that represent the exceptions declared to be thrown by this &lt;c1&gt;Constructor&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104149Z" creationid="pingfangx" creationdate="20191015T104149Z">
        <seg>返回一组 &lt;c0&gt;Type&lt;/c0&gt; 对象，这些对象表示声明要由此 &lt;c1&gt;Constructor&lt;/c1&gt; 对象抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Type&lt;/c0&gt; objects that represent the exceptions declared to be thrown by this &lt;c1&gt;Method&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110203Z" creationid="pingfangx" creationdate="20191015T110203Z">
        <seg>返回 &lt;c0&gt;Type&lt;/c0&gt; 对象数组，这些对象描述了声明由此 &lt;c1&gt;Method&lt;/c1&gt; 对象抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Type&lt;/c0&gt; objects that represent the formal parameter types, in declaration order, of the method represented by this &lt;c1&gt;Constructor&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104154Z" creationid="pingfangx" creationdate="20191015T104154Z">
        <seg>按照声明顺序返回一组 &lt;c0&gt;Type&lt;/c0&gt; 对象，这些对象表示此 &lt;c1&gt;Constructor&lt;/c1&gt; 对象所表示的方法的形参类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;Type&lt;/c0&gt; objects that represent the formal parameter types, in declaration order, of the method represented by this &lt;c1&gt;Method&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110211Z" creationid="pingfangx" creationdate="20191015T110211Z">
        <seg>按照声明顺序返回 &lt;c0&gt;Type&lt;/c0&gt; 对象的数组，这些对象描述了此 &lt;c1&gt;Method&lt;/c1&gt; 对象所表示的方法的形参类型的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of &lt;c0&gt;TypeVariable&lt;/c0&gt; objects that represent the type variables declared by the generic declaration represented by this &lt;c1&gt;GenericDeclaration&lt;/c1&gt; object, in declaration order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101459Z" creationid="pingfangx" creationdate="20191013T101459Z">
        <seg>按声明顺序返回 &lt;c0&gt;TypeVariable&lt;/c0&gt; 对象的一个数组，这些对象表示用此 &lt;c1&gt;GenericDeclaration&lt;/c1&gt; 对象所表示的常规声明来声明的类型变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of arrays that represent the annotations on the formal parameters, in declaration order, of the method represented by this &lt;c0&gt;Constructor&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104201Z" creationid="pingfangx" creationdate="20191015T104201Z">
        <seg>按照声明顺序返回一组数组，这些数组表示通过此 &lt;c0&gt;Constructor&lt;/c0&gt; 对象表示的方法的形参上的注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of arrays that represent the annotations on the formal parameters, in declaration order, of the method represented by this &lt;c0&gt;Method&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110222Z" creationid="pingfangx" creationdate="20191015T110222Z">
        <seg>返回表示按照声明顺序对此 &lt;c0&gt;Method&lt;/c0&gt; 对象所表示方法的形参进行注释的那个数组的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of length 0 if the underlying generic declaration declares no type variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161935Z" creationid="pingfangx" creationdate="20191014T161935Z">
        <seg>如果底层的一般声明未声明任何类型变量，则返回一个 0 长度的数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of stack trace elements representing the stack dump of this thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082012Z" creationid="pingfangx" creationdate="20191014T082012Z">
        <seg>返回一个表示该线程堆栈转储的堆栈跟踪元素数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an associated list of annotations on &lt;c0&gt;this&lt;/c0&gt; element, whose class is &lt;c1&gt;annotationClass&lt;/c1&gt;, or an empty array if nothing was found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100156Z" creationid="pingfangx" creationdate="20191013T100156Z">
        <seg>返回 &lt;c0&gt;this&lt;/c0&gt; 元素上的相关联的注解列表，它的类是 &lt;c1&gt;annotationClass&lt;/c1&gt;，如果未找到任何内容，则返回空数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an enumeration of &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;URL&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; objects representing all the resources with the given name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073356Z" creationid="pingfangx" creationdate="20191014T073356Z">
        <seg>返回表示所有具有给定名称的资源的 &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;URL&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 对象的枚举。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an estimate of the number of active groups in this thread group and its subgroups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093152Z" creationid="pingfangx" creationdate="20191014T093152Z">
        <seg>返回此线程组及其子组中活动组数的估计值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an estimate of the number of active threads in the current thread's &lt;a0&gt;thread group&lt;/a0&gt;&lt;/a1&gt; and its subgroups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081539Z" creationid="pingfangx" creationdate="20191014T081539Z">
        <seg>返回当前线程的 &lt;a0&gt;thread group&lt;/a0&gt; &lt;/a1&gt; 和它的子组在活动线程的数量的估计。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an estimate of the number of active threads in this thread group and its subgroups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093143Z" creationid="pingfangx" creationdate="20191014T093143Z">
        <seg>返回此线程组及其子组中活动线程数的估计值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an input stream for reading the specified resource.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073040Z" creationid="pingfangx" creationdate="20191014T073040Z">
        <seg>返回读取指定资源的输入流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113317Z" creationid="pingfangx" creationdate="20191015T113317Z">
        <seg>返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over elements of type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103404Z" creationid="pingfangx" creationdate="20191014T103404Z">
        <seg>返回 &lt;c0&gt;T&lt;/c0&gt; 类型元素上的迭代器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an unmodifiable string map view of the current system environment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154305Z" creationid="pingfangx" creationdate="20191013T154305Z">
        <seg>返回一个不能修改的当前系统环境的字符串映射视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083425Z" creationid="pingfangx" creationdate="20191026T083425Z">
        <seg>如果 x 匹配 kc(k 的筛选 comparable 类)，则返回 k.compareTo(x)，否则返回 0。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns root of tree containing this node.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100437Z" creationid="pingfangx" creationdate="20191026T100437Z">
        <seg>返回包含此节点的树的根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns sqrt(&lt;i0&gt;x&lt;/i0&gt;&lt;s1&gt;2&lt;/s1&gt; +&lt;i2&gt;y&lt;/i2&gt;&lt;s3&gt;2&lt;/s3&gt;) without intermediate overflow or underflow.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151947Z" creationid="pingfangx" creationdate="20191013T151947Z">
        <seg>返回 sqrt(&lt;i0&gt;x&lt;/i0&gt;&lt;s1&gt;2&lt;/s1&gt; +&lt;i2&gt;y&lt;/i2&gt;&lt;s3&gt;2&lt;/s3&gt;)，没有中间溢出或下溢。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Class&lt;/c0&gt; object associated with the class or interface with the given string name, using the given class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T095857Z" creationid="pingfangx" creationdate="20191013T095857Z">
        <seg>使用给定的类加载器，返回与带有给定字符串名的类或接口相关联的 &lt;c0&gt;Class&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Class&lt;/c0&gt; object associated with the class or interface with the given string name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T095903Z" creationid="pingfangx" creationdate="20191013T095903Z">
        <seg>返回与带有给定字符串名的类或接口相关联的 &lt;c0&gt;Class&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Class&lt;/c0&gt; object representing the class or interface that declares the field represented by this &lt;c1&gt;Field&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104529Z" creationid="pingfangx" creationdate="20191015T104529Z">
        <seg>返回表示类或接口的 &lt;c0&gt;Class&lt;/c0&gt; 对象，该类或接口声明由此 &lt;c1&gt;Field&lt;/c1&gt; 对象表示的字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Class&lt;/c0&gt; object representing the class or interface that declares the method represented by this &lt;c1&gt;Method&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110146Z" creationid="pingfangx" creationdate="20191015T110146Z">
        <seg>返回表示声明由此 &lt;c0&gt;Method&lt;/c0&gt; 对象表示的方法的类或接口的 &lt;c1&gt;Class&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Class&lt;/c0&gt; object representing the class that declares the constructor represented by this &lt;c1&gt;Constructor&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104143Z" creationid="pingfangx" creationdate="20191015T104143Z">
        <seg>返回 &lt;c0&gt;Class&lt;/c0&gt; 对象，该对象表示声明由此 &lt;c1&gt;Constructor&lt;/c1&gt; 对象表示的构造方法的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Class&lt;/c0&gt; representing the component type of an array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100339Z" creationid="pingfangx" creationdate="20191013T100339Z">
        <seg>返回表示数组组件类型的 &lt;c0&gt;Class&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Class&lt;/c0&gt; representing the superclass of the entity (class, interface, primitive type or void) represented by this &lt;c1&gt;Class&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101426Z" creationid="pingfangx" creationdate="20191013T101426Z">
        <seg>返回表示此 &lt;c0&gt;Class&lt;/c0&gt; 所表示的实体（类、接口、基本类型或 void）的超类的 &lt;c1&gt;Class&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;GenericDeclaration&lt;/c0&gt; object representing the generic declaration declared this type variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082123Z" creationid="pingfangx" creationdate="20191015T082123Z">
        <seg>返回 &lt;c0&gt;GenericDeclaration&lt;/c0&gt; 对象，该对象表示声明此类型变量的一般声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;ProtectionDomain&lt;/c0&gt; of this class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101356Z" creationid="pingfangx" creationdate="20191013T101356Z">
        <seg>返回该类的 &lt;c0&gt;ProtectionDomain&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Throwable&lt;/c0&gt; instance wrapped in this &lt;c1&gt;UndeclaredThrowableException&lt;/c1&gt;, which may be &lt;c2&gt;null&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111115Z" creationid="pingfangx" creationdate="20191015T111115Z">
        <seg>返回此 &lt;c0&gt;UndeclaredThrowableException&lt;/c0&gt; 中包装的 &lt;c1&gt;Throwable&lt;/c1&gt; 实例，它可能为 &lt;c2&gt;null&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Type&lt;/c0&gt; object representing the class or interface that declared this type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071659Z" creationid="pingfangx" creationdate="20191015T071659Z">
        <seg>返回 &lt;c0&gt;Type&lt;/c0&gt; 对象，表示声明此类型的类或接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Type&lt;/c0&gt; representing the direct superclass of the entity (class, interface, primitive type or void) represented by this &lt;c1&gt;Class&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101111Z" creationid="pingfangx" creationdate="20191013T101111Z">
        <seg>返回表示此 &lt;c0&gt;Class&lt;/c0&gt; 所表示的实体（类、接口、基本类型或 void）的直接超类的 &lt;c1&gt;Type&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;Type&lt;/c0&gt;s representing the interfaces directly implemented by the class or interface represented by this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101057Z" creationid="pingfangx" creationdate="20191013T101057Z">
        <seg>返回表示某些接口的 &lt;c0&gt;Type&lt;/c0&gt;，这些接口由此对象所表示的类或接口直接实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;char&lt;/c0&gt; value at the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023929Z" creationid="pingfangx" creationdate="20191014T023929Z">
        <seg>返回指定索引处的 &lt;c0&gt;char&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;char&lt;/c0&gt; value in this sequence at the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033549Z" creationid="pingfangx" creationdate="20191014T033549Z">
        <seg>返回此序列中指定索引处的 &lt;c0&gt;char&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;double&lt;/c0&gt; value corresponding to a given bit representation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132651Z" creationid="pingfangx" creationdate="20191013T132651Z">
        <seg>返回对应于给定位表示形式的 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;double&lt;/c0&gt; value of this &lt;c1&gt;Double&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132630Z" creationid="pingfangx" creationdate="20191013T132630Z">
        <seg>返回此 &lt;c0&gt;Double&lt;/c0&gt; 对象的 &lt;c1&gt;double&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;double&lt;/c0&gt; value of this &lt;c1&gt;Float&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132055Z" creationid="pingfangx" creationdate="20191013T132055Z">
        <seg>返回此 &lt;c0&gt;Float&lt;/c0&gt; 对象的 &lt;c1&gt;double&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;double&lt;/c0&gt; value that is closest in value to the argument and is equal to a mathematical integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152312Z" creationid="pingfangx" creationdate="20191013T152312Z">
        <seg>返回最接近参数并等于某一整数的 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;float&lt;/c0&gt; value corresponding to a given bit representation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132119Z" creationid="pingfangx" creationdate="20191013T132119Z">
        <seg>返回对应于给定位表示形式的 &lt;c0&gt;float&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;float&lt;/c0&gt; value of this &lt;c1&gt;Double&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132632Z" creationid="pingfangx" creationdate="20191013T132632Z">
        <seg>返回此 &lt;c0&gt;Double&lt;/c0&gt; 对象的 &lt;c1&gt;float&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;float&lt;/c0&gt; value of this &lt;c1&gt;Float&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132109Z" creationid="pingfangx" creationdate="20191013T132109Z">
        <seg>返回此 &lt;c0&gt;Float&lt;/c0&gt; 对象的 &lt;c1&gt;float&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;int&lt;/c0&gt; value that the specified Unicode character represents.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145132Z" creationid="pingfangx" creationdate="20191013T145132Z">
        <seg>返回指定的 Unicode 字符表示的 &lt;c0&gt;int&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;int&lt;/c0&gt; value that the specified character (Unicode code point) represents.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145130Z" creationid="pingfangx" creationdate="20191013T145130Z">
        <seg>返回指定字符（Unicode 代码点）表示的 &lt;c0&gt;int&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;java.lang.Class&lt;/c0&gt; object for a proxy class given a class loader and an array of interfaces.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113310Z" creationid="pingfangx" creationdate="20191015T113310Z">
        <seg>返回代理类的 &lt;c0&gt;java.lang.Class&lt;/c0&gt; 对象，并向其提供类加载器和接口数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;c0&gt;long&lt;/c0&gt; value of the system property with the specified name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124953Z" creationid="pingfangx" creationdate="20191013T124953Z">
        <seg>使用指定名称返回系统属性的 &lt;c0&gt;long&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the &lt;t0&gt;Method&lt;/t0&gt; object for the incorrectly typed element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152801Z" creationid="pingfangx" creationdate="20191014T152801Z">
        <seg>返回类型不正确的元素的 &lt;t0&gt;Method&lt;/t0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Class object corresponding to this enum constant's enum type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094038Z" creationid="pingfangx" creationdate="20191014T094038Z">
        <seg>返回与此枚举常量的枚举类型相对应的 Class 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Class object for the annotation type with the missing element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T153654Z" creationid="pingfangx" creationdate="20191014T153654Z">
        <seg>返回带有缺少元素的注释类型的 Class 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Class object representing the class or interface that declares the member or constructor represented by this Member.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014859Z" creationid="pingfangx" creationdate="20191015T014859Z">
        <seg>返回表示声明由此 Member 表示的成员或构造方法的类或接口的 Class 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Java language modifiers for the constructor represented by this &lt;c0&gt;Constructor&lt;/c0&gt; object, as an integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104158Z" creationid="pingfangx" creationdate="20191015T104158Z">
        <seg>以整数形式返回此 &lt;c0&gt;Constructor&lt;/c0&gt; 对象所表示构造方法的 Java 语言修饰符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Java language modifiers for the field represented by this &lt;c0&gt;Field&lt;/c0&gt; object, as an integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104543Z" creationid="pingfangx" creationdate="20191015T104543Z">
        <seg>以整数形式返回由此 &lt;c0&gt;Field&lt;/c0&gt; 对象表示的字段的 Java 语言修饰符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Java language modifiers for the member or constructor represented by this Member, as an integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014903Z" creationid="pingfangx" creationdate="20191015T014903Z">
        <seg>作为整数返回由此 Member 所表示的成员或构造方法的 Java 语言修饰符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Java language modifiers for the method represented by this &lt;c0&gt;Method&lt;/c0&gt; object, as an integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110218Z" creationid="pingfangx" creationdate="20191015T110218Z">
        <seg>以整数形式返回此 &lt;c0&gt;Method&lt;/c0&gt; 对象所表示方法的 Java 语言修饰符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Java language modifiers for this class or interface, encoded in an integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101318Z" creationid="pingfangx" creationdate="20191013T101318Z">
        <seg>返回此类或接口以整数编码的 Java 语言修饰符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Unicode directionality property for the given character (Unicode code point).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145030Z" creationid="pingfangx" creationdate="20191013T145030Z">
        <seg>返回给定字符（Unicode 代码点）的 Unicode 方向属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Unicode directionality property for the given character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145028Z" creationid="pingfangx" creationdate="20191013T145028Z">
        <seg>返回给定字符的 Unicode 方向属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Unicode name of the specified character &lt;c0&gt;codePoint&lt;/c0&gt;, or null if the code point is &lt;c1&gt;&lt;a2&gt;unassigned&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145129Z" creationid="pingfangx" creationdate="20191013T145129Z">
        <seg>返回指定字符 &lt;c0&gt;codePoint&lt;/c0&gt; 的 Unicode 名称或 null 如果代码点是 &lt;c1&gt;&lt;a2&gt;unassigned&lt;/a2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the absolute path name of a native library.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073345Z" creationid="pingfangx" creationdate="20191014T073345Z">
        <seg>返回本机库的绝对路径名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the absolute value of a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151420Z" creationid="pingfangx" creationdate="20191013T151420Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 值的绝对值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the absolute value of a &lt;c0&gt;float&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151418Z" creationid="pingfangx" creationdate="20191013T151418Z">
        <seg>返回 &lt;c0&gt;float&lt;/c0&gt; 值的绝对值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the absolute value of a &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151414Z" creationid="pingfangx" creationdate="20191013T151414Z">
        <seg>返回 &lt;c0&gt;long&lt;/c0&gt; 值的绝对值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the absolute value of an &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151416Z" creationid="pingfangx" creationdate="20191013T151416Z">
        <seg>返回 &lt;c0&gt;int&lt;/c0&gt; 值的绝对值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the amount of free memory in the Java Virtual Machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153546Z" creationid="pingfangx" creationdate="20191013T153546Z">
        <seg>返回 Java 虚拟机中的空闲内存量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the angle &lt;i0&gt;theta&lt;/i0&gt; from the conversion of rectangular coordinates (&lt;c1&gt;x&lt;/c1&gt;, &lt;c2&gt;y&lt;/c2&gt;) to polar coordinates (r, &lt;i3&gt;theta&lt;/i3&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151630Z" creationid="pingfangx" creationdate="20191013T151505Z">
        <seg>将矩形坐标 (&lt;c1&gt;x&lt;/c1&gt;, &lt;c2&gt;y&lt;/c2&gt;) 转换成极坐标 (r, &lt;i0&gt;theta&lt;/i0&gt;)，返回所得角 &lt;i3&gt;theta&lt;/i3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the annotation type of this annotation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T144910Z" creationid="pingfangx" creationdate="20191014T144910Z">
        <seg>返回此 annotation 的注释类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the annotations that are directly defined on the class represented by this &lt;c0&gt;Class&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100544Z" creationid="pingfangx" creationdate="20191013T100544Z">
        <seg>返回已在由此 &lt;c0&gt;Class&lt;/c0&gt; 所表示的类直接定义注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the approximate number of threads that are actively executing tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130048Z" creationid="pingfangx" creationdate="20191025T130048Z">
        <seg>返回主动执行任务的近似线程数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the approximate total number of tasks that have completed execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130049Z" creationid="pingfangx" creationdate="20191025T130049Z">
        <seg>返回已完成执行的近似任务总数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the approximate total number of tasks that have ever been scheduled for execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130151Z" creationid="pingfangx" creationdate="20191025T130151Z">
        <seg>返回曾计划执行的近似任务总数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the arc cosine of a value; the returned angle is in the range 0.0 through &lt;i0&gt;pi&lt;/i0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151424Z" creationid="pingfangx" creationdate="20191013T151424Z">
        <seg>返回一个值的反余弦；返回的角度范围在 0.0 到 &lt;i0&gt;pi&lt;/i0&gt; 之间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the arc sine of a value; the returned angle is in the range -&lt;i0&gt;pi&lt;/i0&gt;/2 through &lt;i1&gt;pi&lt;/i1&gt;/2.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151500Z" creationid="pingfangx" creationdate="20191013T151500Z">
        <seg>返回一个值的反正弦；返回的角度范围在 -&lt;i0&gt;pi&lt;/i0&gt;/2 到 &lt;i1&gt;pi&lt;/i1&gt;/2 之间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the arc tangent of a value; the returned angle is in the range -&lt;i0&gt;pi&lt;/i0&gt;/2 through &lt;i1&gt;pi&lt;/i1&gt;/2.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151502Z" creationid="pingfangx" creationdate="20191013T151502Z">
        <seg>返回一个值的反正切；返回的角度范围在 -&lt;i0&gt;pi&lt;/i0&gt;/2 到 &lt;i1&gt;pi&lt;/i1&gt;/2 之间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the argument decremented by one, throwing an exception if the result overflows a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151738Z" creationid="pingfangx" creationdate="20191013T151727Z">
        <seg>返回参数减一，如果结果溢出 &lt;c0&gt;long&lt;/c0&gt; 则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the argument decremented by one, throwing an exception if the result overflows an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151735Z" creationid="pingfangx" creationdate="20191013T151735Z">
        <seg>返回参数减一，如果结果溢出 &lt;c0&gt;int&lt;/c0&gt; 则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the argument incremented by one, throwing an exception if the result overflows a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152009Z" creationid="pingfangx" creationdate="20191013T152009Z">
        <seg>返回参数加一，如果结果溢出 &lt;c0&gt;long&lt;/c0&gt; 则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the argument incremented by one, throwing an exception if the result overflows an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151958Z" creationid="pingfangx" creationdate="20191013T151958Z">
        <seg>返回参数加一，如果结果溢出 &lt;c0&gt;int&lt;/c0&gt; 则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T095842Z" creationid="pingfangx" creationdate="20191013T095842Z">
        <seg>如果要在调用此方法时将要初始化该类，则返回将分配给该类的断言状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the base 10 logarithm of a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152013Z" creationid="pingfangx" creationdate="20191013T152013Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 值的底数为 10 的对数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the canonical name of the underlying class as defined by the Java Language Specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T095948Z" creationid="pingfangx" creationdate="20191013T095948Z">
        <seg>返回 Java Language Specification 中所定义的底层类的规范化名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the cause of this exception (the &lt;c0&gt;Throwable&lt;/c0&gt; instance wrapped in this &lt;c1&gt;UndeclaredThrowableException&lt;/c1&gt;, which may be &lt;c2&gt;null&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111106Z" creationid="pingfangx" creationdate="20191015T111106Z">
        <seg>返回此异常的原因（此 &lt;c0&gt;UndeclaredThrowableException&lt;/c0&gt; 中包装的 &lt;c1&gt;Throwable&lt;/c1&gt; 实例，可能为 &lt;c2&gt;null&lt;/c2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the cause of this exception (the thrown target exception, which may be &lt;c0&gt;null&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110930Z" creationid="pingfangx" creationdate="20191015T110930Z">
        <seg>返回此异常的原因（抛出的目标异常，可能为 &lt;c0&gt;null&lt;/c0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the cause of this throwable or &lt;c0&gt;null&lt;/c0&gt; if the cause is nonexistent or unknown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115104Z" creationid="pingfangx" creationdate="20191013T115104Z">
        <seg>返回此抛出对象的原因，如果原因不存在或未知，则返回 &lt;c0&gt;null&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the channel inherited from the entity that created this Java virtual machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154329Z" creationid="pingfangx" creationdate="20191013T154329Z">
        <seg>返回从创建此 Java 虚拟机的实体中继承的信道。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the character (Unicode code point) at the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024348Z" creationid="pingfangx" creationdate="20191014T024348Z">
        <seg>返回指定索引处的字符（Unicode 代码点）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the character (Unicode code point) before the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024350Z" creationid="pingfangx" creationdate="20191014T024350Z">
        <seg>返回指定索引之前的字符（Unicode 代码点）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the class loader for the class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100205Z" creationid="pingfangx" creationdate="20191013T100205Z">
        <seg>返回该类的类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the class with the given &lt;a0&gt;binary name&lt;/a0&gt; if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that &lt;a1&gt;binary name&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073349Z" creationid="pingfangx" creationdate="20191014T073349Z">
        <seg>如果 Java 虚拟机已将此加载器记录为具有给定&lt;a0&gt;二进制名称&lt;/a0&gt;的某个类的启动加载器，则返回该&lt;a1&gt;二进制名称&lt;/a1&gt;的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the closest &lt;c0&gt;int&lt;/c0&gt; to the argument, with ties rounding to positive infinity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152403Z" creationid="pingfangx" creationdate="20191013T152403Z">
        <seg>返回最接近参数的 &lt;c0&gt;int&lt;/c0&gt;，ties 舍入为正无穷大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the closest &lt;c0&gt;long&lt;/c0&gt; to the argument, with ties rounding to positive infinity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152359Z" creationid="pingfangx" creationdate="20191013T152359Z">
        <seg>返回最接近参数的 &lt;c0&gt;long&lt;/c0&gt;，ties 舍入为正无穷大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the code point at the given index of the &lt;c0&gt;CharSequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145000Z" creationid="pingfangx" creationdate="20191013T145000Z">
        <seg>返回 &lt;c0&gt;CharSequence&lt;/c0&gt; 的给定索引上的代码点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the code point at the given index of the &lt;c0&gt;char&lt;/c0&gt; array, where only array elements with &lt;c1&gt;index&lt;/c1&gt; less than &lt;c2&gt;limit&lt;/c2&gt; can be used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144954Z" creationid="pingfangx" creationdate="20191013T144954Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 数组的给定索引上的代码点，该数组中只有那些具有小于 &lt;c1&gt;limit&lt;/c1&gt; 的 &lt;c2&gt;index&lt;/c2&gt; 值的数组元素可以使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the code point at the given index of the &lt;c0&gt;char&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144957Z" creationid="pingfangx" creationdate="20191013T144957Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 数组的给定索引上的代码点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the code point preceding the given index of the &lt;c0&gt;CharSequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145004Z" creationid="pingfangx" creationdate="20191013T145004Z">
        <seg>返回 &lt;c0&gt;CharSequence&lt;/c0&gt; 的给定索引前面的代码点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the code point preceding the given index of the &lt;c0&gt;char&lt;/c0&gt; array, where only array elements with &lt;c1&gt;index&lt;/c1&gt; greater than or equal to &lt;c2&gt;start&lt;/c2&gt; can be used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145006Z" creationid="pingfangx" creationdate="20191013T145006Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 数组的给定索引前面的代码点，该数组中只有那些具有大于等于 &lt;c1&gt;start&lt;/c1&gt; 的 &lt;c2&gt;index&lt;/c2&gt; 值的数组元素可以使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the code point preceding the given index of the &lt;c0&gt;char&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145002Z" creationid="pingfangx" creationdate="20191013T145002Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 数组的给定索引前面的代码点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the context ClassLoader for this Thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082000Z" creationid="pingfangx" creationdate="20191014T082000Z">
        <seg>返回该线程的上下文 ClassLoader。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the core number of threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130051Z" creationid="pingfangx" creationdate="20191025T130051Z">
        <seg>返回核心线程数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the correctly rounded positive square root of a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152418Z" creationid="pingfangx" creationdate="20191013T152418Z">
        <seg>返回正确舍入的 &lt;c0&gt;double&lt;/c0&gt; 值的正平方根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the cube root of a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151635Z" creationid="pingfangx" creationdate="20191013T151635Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 值的立方根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the current capacity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033547Z" creationid="pingfangx" creationdate="20191014T033547Z">
        <seg>返回当前容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the current handler for unexecutable tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130149Z" creationid="pingfangx" creationdate="20191025T130149Z">
        <seg>返回用于未执行任务的当前处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the current number of threads in the pool.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130145Z" creationid="pingfangx" creationdate="20191025T130145Z">
        <seg>返回池中的当前线程数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the current thread's "initial value" for this thread-local variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100752Z" creationid="pingfangx" creationdate="20191014T100752Z">
        <seg>返回此线程局部变量的当前线程的“初始值”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the current time in milliseconds.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154231Z" creationid="pingfangx" creationdate="20191013T154231Z">
        <seg>返回以毫秒为单位的当前时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154419Z" creationid="pingfangx" creationdate="20191013T154419Z">
        <seg>返回正在运行的 Java 虚拟机的高分辨率时间源的当前值(以纳秒为单位)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082002Z" creationid="pingfangx" creationdate="20191014T082002Z">
        <seg>返回线程由于未捕获到异常而突然终止时调用的默认处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the default value for the annotation member represented by this &lt;c0&gt;Method&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110151Z" creationid="pingfangx" creationdate="20191015T110151Z">
        <seg>返回由此 &lt;c0&gt;Method&lt;/c0&gt; 实例表示的注释成员的默认值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the detail message string of this throwable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115110Z" creationid="pingfangx" creationdate="20191013T115110Z">
        <seg>返回此 throwable 的详细消息字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the difference of the arguments, throwing an exception if the result overflows a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152432Z" creationid="pingfangx" creationdate="20191013T152432Z">
        <seg>返回参数的差，如果结果溢出 &lt;c0&gt;long&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the difference of the arguments, throwing an exception if the result overflows an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152439Z" creationid="pingfangx" creationdate="20191013T152439Z">
        <seg>返回参数的差，如果结果溢出 &lt;c0&gt;int&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the elements of this enum class or null if this Class object does not represent an enum type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100938Z" creationid="pingfangx" creationdate="20191013T100938Z">
        <seg>返回枚举类的元素，如果此 Class 对象不表示枚举类型，则返回 null。（译注：这里中文 api 本为“如果此 Class 对象不表示枚举类型，则返回枚举类的元素或 null。”）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the enum constant of the specified enum type with the specified name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094052Z" creationid="pingfangx" creationdate="20191014T094052Z">
        <seg>返回带指定名称的指定枚举类型的枚举常量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the exit value for the subprocess.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074902Z" creationid="pingfangx" creationdate="20191014T074902Z">
        <seg>返回子进程的出口值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the first floating-point argument with the sign of the second floating-point argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151649Z" creationid="pingfangx" creationdate="20191013T151649Z">
        <seg>返回带有第二个浮点参数符号的第一个浮点参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the floating-point number adjacent to the first argument in the direction of the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152125Z" creationid="pingfangx" creationdate="20191013T152125Z">
        <seg>返回第一个参数和第二个参数之间与第一个参数相邻的浮点数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the floating-point value adjacent to &lt;c0&gt;d&lt;/c0&gt; in the direction of negative infinity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152219Z" creationid="pingfangx" creationdate="20191013T152146Z">
        <seg>返回 &lt;c0&gt;d&lt;/c0&gt; 和负无穷大之间与相邻的浮点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the floating-point value adjacent to &lt;c0&gt;d&lt;/c0&gt; in the direction of positive infinity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152303Z" creationid="pingfangx" creationdate="20191013T152250Z">
        <seg>返回 &lt;c0&gt;d&lt;/c0&gt; 和正无穷大之间与相邻的浮点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the floating-point value adjacent to &lt;c0&gt;f&lt;/c0&gt; in the direction of negative infinity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152236Z" creationid="pingfangx" creationdate="20191013T152236Z">
        <seg>返回 &lt;c0&gt;f&lt;/c0&gt; 和负无穷大之间与相邻的浮点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the floating-point value adjacent to &lt;c0&gt;f&lt;/c0&gt; in the direction of positive infinity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152245Z" creationid="pingfangx" creationdate="20191013T152238Z">
        <seg>返回 &lt;c0&gt;f&lt;/c0&gt; 和正无穷大之间与相邻的浮点值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the floor modulus of the &lt;c0&gt;int&lt;/c0&gt; arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151940Z" creationid="pingfangx" creationdate="20191013T151940Z">
        <seg>返回的 &lt;c0&gt;int&lt;/c0&gt; 参数的 floor 模量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the floor modulus of the &lt;c0&gt;long&lt;/c0&gt; arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151937Z" creationid="pingfangx" creationdate="20191013T151937Z">
        <seg>返回的 &lt;c0&gt;long&lt;/c0&gt; 参数的 floor 模量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the fully qualified name of the class containing the execution point represented by this stack trace element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095221Z" creationid="pingfangx" creationdate="20191014T095221Z">
        <seg>返回类的完全限定名，该类包含由该堆栈跟踪元素所表示的执行点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;double&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132655Z" creationid="pingfangx" creationdate="20191013T132655Z">
        <seg>返回两个 &lt;c0&gt;double&lt;/c0&gt; 值中的较大值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;double&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152029Z" creationid="pingfangx" creationdate="20191013T152029Z">
        <seg>返回两个 &lt;c0&gt;double&lt;/c0&gt; 值中较大的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;float&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132316Z" creationid="pingfangx" creationdate="20191013T132316Z">
        <seg>返回两个 &lt;c0&gt;float&lt;/c0&gt; 值中的较大值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;float&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152027Z" creationid="pingfangx" creationdate="20191013T152027Z">
        <seg>返回两个 &lt;c0&gt;float&lt;/c0&gt; 值中较大的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;int&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124237Z" creationid="pingfangx" creationdate="20191013T124237Z">
        <seg>返回两个 &lt;c0&gt;int&lt;/c0&gt; 值中的较大值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;int&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152024Z" creationid="pingfangx" creationdate="20191013T152024Z">
        <seg>返回两个 &lt;c0&gt;int&lt;/c0&gt; 值中较大的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;long&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125015Z" creationid="pingfangx" creationdate="20191013T125015Z">
        <seg>返回两个 &lt;c0&gt;long&lt;/c0&gt; 值中的较大值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.max&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two &lt;c0&gt;long&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152025Z" creationid="pingfangx" creationdate="20191013T152025Z">
        <seg>返回两个 &lt;c0&gt;long&lt;/c0&gt; 值中较大的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the handler invoked when this thread abruptly terminates due to an uncaught exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082018Z" creationid="pingfangx" creationdate="20191014T082018Z">
        <seg>返回该线程由于未捕获到异常而突然终止时调用的处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the hash code of this annotation, as defined below:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T145042Z" creationid="pingfangx" creationdate="20191014T145042Z">
        <seg>返回此 annotation 的哈希码，具体说明如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the hash code value for this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140036Z" creationid="pingfangx" creationdate="20191025T140036Z">
        <seg>返回此映射的哈希码值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the hyperbolic cosine of a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151656Z" creationid="pingfangx" creationdate="20191013T151656Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 值的双曲线余弦。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the hyperbolic sine of a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152417Z" creationid="pingfangx" creationdate="20191013T152417Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 值的双曲线正弦。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the hyperbolic tangent of a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152441Z" creationid="pingfangx" creationdate="20191013T152441Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 值的双曲线余弦。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the identifier of this Thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082005Z" creationid="pingfangx" creationdate="20191014T082005Z">
        <seg>返回该线程的标识符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the immediately enclosing class of the underlying class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T100729Z" creationid="pingfangx" creationdate="20191013T100729Z">
        <seg>返回底层类的立即封闭类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within the given &lt;c0&gt;char&lt;/c0&gt; subarray that is offset from the given &lt;c1&gt;index&lt;/c1&gt; by &lt;c2&gt;codePointOffset&lt;/c2&gt; code points.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150018Z" creationid="pingfangx" creationdate="20191013T150018Z">
        <seg>返回给定 &lt;c0&gt;char&lt;/c0&gt; 子数组中的索引，它是从给定 &lt;c1&gt;index&lt;/c1&gt; 到 &lt;c2&gt;codePointOffset&lt;/c2&gt; 代码点的偏移量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within the given char sequence that is offset from the given &lt;c0&gt;index&lt;/c0&gt; by &lt;c1&gt;codePointOffset&lt;/c1&gt; code points.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150016Z" creationid="pingfangx" creationdate="20191013T150016Z">
        <seg>返回给定字符序列中的索引，它是从给定 &lt;c0&gt;index&lt;/c0&gt; 到 &lt;c1&gt;codePointOffset&lt;/c1&gt; 代码点的偏移量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this &lt;c0&gt;String&lt;/c0&gt; that is offset from the given &lt;c1&gt;index&lt;/c1&gt; by &lt;c2&gt;codePointOffset&lt;/c2&gt; code points.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030022Z" creationid="pingfangx" creationdate="20191014T030022Z">
        <seg>返回此 &lt;c0&gt;String&lt;/c0&gt; 中从给定的 &lt;c1&gt;index&lt;/c1&gt; 处偏移 &lt;c2&gt;codePointOffset&lt;/c2&gt; 个代码点的索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this sequence that is offset from the given &lt;c0&gt;index&lt;/c0&gt; by &lt;c1&gt;codePointOffset&lt;/c1&gt; code points.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033904Z" creationid="pingfangx" creationdate="20191014T033904Z">
        <seg>返回此序列中的一个索引，该索引是从给定 &lt;c0&gt;index&lt;/c0&gt; 偏移 &lt;c1&gt;codePointOffset&lt;/c1&gt; 个代码点后得到的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024741Z" creationid="pingfangx" creationdate="20191014T024741Z">
        <seg>返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the first occurrence of the specified character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024815Z" creationid="pingfangx" creationdate="20191014T024815Z">
        <seg>返回指定字符在此字符串中第一次出现处的索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024818Z" creationid="pingfangx" creationdate="20191014T024818Z">
        <seg>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the first occurrence of the specified substring.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024757Z" creationid="pingfangx" creationdate="20191014T024757Z">
        <seg>返回指定子字符串在此字符串中第一次出现处的索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T025820Z" creationid="pingfangx" creationdate="20191014T025820Z">
        <seg>返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the last occurrence of the specified character.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T025609Z" creationid="pingfangx" creationdate="20191014T025609Z">
        <seg>返回指定字符在此字符串中最后一次出现处的索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T025720Z" creationid="pingfangx" creationdate="20191014T025720Z">
        <seg>返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the last occurrence of the specified substring.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030013Z" creationid="pingfangx" creationdate="20191014T030013Z">
        <seg>返回指定子字符串在此字符串中最后一次出现处的索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index within this string of the rightmost occurrence of the specified substring.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033902Z" creationid="pingfangx" creationdate="20191014T033902Z">
        <seg>返回最右边出现的指定子字符串在此字符串中的索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the input stream connected to the error output of the subprocess.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075210Z" creationid="pingfangx" creationdate="20191014T075210Z">
        <seg>返回连接到子进程的错误输出的输入流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the input stream connected to the normal output of the subprocess.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075252Z" creationid="pingfangx" creationdate="20191014T075221Z">
        <seg>返回连接到子进程的正常输出的输入流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the integer value of the system property with the specified name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123324Z" creationid="pingfangx" creationdate="20191013T123324Z">
        <seg>返回具有指定名称的系统属性的整数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the invocation handler for the specified proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113304Z" creationid="pingfangx" creationdate="20191015T113304Z">
        <seg>返回指定代理实例的调用处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the largest (closest to positive infinity) &lt;c0&gt;double&lt;/c0&gt; value that is less than or equal to the argument and is equal to a mathematical integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151830Z" creationid="pingfangx" creationdate="20191013T151830Z">
        <seg>返回最大的（最接近正无穷大）&lt;c0&gt;double&lt;/c0&gt; 值，该值小于等于参数，并等于某个整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the largest (closest to positive infinity) &lt;c0&gt;int&lt;/c0&gt; value that is less than or equal to the algebraic quotient.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151904Z" creationid="pingfangx" creationdate="20191013T151904Z">
        <seg>返回最大的(最接近正无穷大)&lt;c0&gt;int&lt;/c0&gt; 值，该值小于或等于代数商。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the largest (closest to positive infinity) &lt;c0&gt;long&lt;/c0&gt; value that is less than or equal to the algebraic quotient.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151908Z" creationid="pingfangx" creationdate="20191013T151908Z">
        <seg>返回最大的(最接近正无穷大)&lt;c0&gt;long&lt;/c0&gt; 值，该值小于或等于代数商。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the largest number of threads that have ever simultaneously been in the pool.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130142Z" creationid="pingfangx" creationdate="20191025T130142Z">
        <seg>返回曾经同时位于池中的最大线程数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the length (character count).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033903Z" creationid="pingfangx" creationdate="20191014T033903Z">
        <seg>返回长度（字符数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the length of the specified array object, as an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103437Z" creationid="pingfangx" creationdate="20191015T103437Z">
        <seg>以 &lt;c0&gt;int&lt;/c0&gt; 形式返回指定数组对象的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the length of this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034231Z" creationid="pingfangx" creationdate="20191014T034231Z">
        <seg>返回此字符序列的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the length of this string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030015Z" creationid="pingfangx" creationdate="20191014T030015Z">
        <seg>返回此字符串的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the line number of the source line containing the execution point represented by this stack trace element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095226Z" creationid="pingfangx" creationdate="20191014T095226Z">
        <seg>返回源行的行号，该行包含由该堆栈该跟踪元素所表示的执行点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the maximum allowed number of threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130144Z" creationid="pingfangx" creationdate="20191025T130144Z">
        <seg>返回允许的最大线程数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the maximum amount of memory that the Java virtual machine will attempt to use.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153637Z" creationid="pingfangx" creationdate="20191013T153637Z">
        <seg>返回 Java 虚拟机试图使用的最大内存量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the maximum priority of this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093214Z" creationid="pingfangx" creationdate="20191014T093214Z">
        <seg>返回此线程组的最高优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this &lt;c0&gt;Class&lt;/c0&gt; object, as a &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101330Z" creationid="pingfangx" creationdate="20191013T101330Z">
        <seg>以 &lt;c0&gt;String&lt;/c0&gt; 的形式返回此 &lt;c1&gt;Class&lt;/c1&gt; 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the field represented by this &lt;c0&gt;Field&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104544Z" creationid="pingfangx" creationdate="20191015T104544Z">
        <seg>返回此 &lt;c0&gt;Field&lt;/c0&gt; 对象表示的字段的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the method containing the execution point represented by this stack trace element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095228Z" creationid="pingfangx" creationdate="20191014T095228Z">
        <seg>返回方法名，此方法包含由该堆栈跟踪元素所表示的执行点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the method represented by this &lt;c0&gt;Method&lt;/c0&gt; object, as a &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110221Z" creationid="pingfangx" creationdate="20191015T110221Z">
        <seg>以 &lt;c0&gt;String&lt;/c0&gt; 形式返回此 &lt;c1&gt;Method&lt;/c1&gt; 对象表示的方法名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the missing element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T153705Z" creationid="pingfangx" creationdate="20191014T153705Z">
        <seg>返回缺少元素的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the source file containing the execution point represented by this stack trace element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095223Z" creationid="pingfangx" creationdate="20191014T095223Z">
        <seg>返回源文件名，该文件包含由该堆栈跟踪元素所表示的执行点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of this constructor, as a string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104159Z" creationid="pingfangx" creationdate="20191015T104159Z">
        <seg>以字符串形式返回此构造方法的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of this enum constant, as contained in the declaration.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094048Z" creationid="pingfangx" creationdate="20191014T094048Z">
        <seg>返回枚举常量的名称，它包含在声明中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of this enum constant, exactly as declared in its enum declaration.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094042Z" creationid="pingfangx" creationdate="20191014T094042Z">
        <seg>返回此枚举常量的名称，在其枚举声明中对其进行声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of this subset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093533Z" creationid="pingfangx" creationdate="20191014T093533Z">
        <seg>返回该子集的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093215Z" creationid="pingfangx" creationdate="20191014T093215Z">
        <seg>返回此线程组的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of this type variable, as it occurs in the source code.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082130Z" creationid="pingfangx" creationdate="20191015T082130Z">
        <seg>返回此类型变量的名称，它出现在源代码中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the natural logarithm (base &lt;i0&gt;e&lt;/i0&gt;) of a &lt;c1&gt;double&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152011Z" creationid="pingfangx" creationdate="20191013T152011Z">
        <seg>返回 &lt;c1&gt;double&lt;/c1&gt; 值的自然对数（底数是 &lt;i0&gt;e&lt;/i0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the natural logarithm of the sum of the argument and 1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152022Z" creationid="pingfangx" creationdate="20191013T152022Z">
        <seg>返回参数与 1 之和的自然对数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the negation of the argument, throwing an exception if the result overflows a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152123Z" creationid="pingfangx" creationdate="20191013T152123Z">
        <seg>返回参数的反数，如果结果溢出 &lt;c0&gt;long&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the negation of the argument, throwing an exception if the result overflows an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152117Z" creationid="pingfangx" creationdate="20191013T152117Z">
        <seg>返回参数的反数，如果结果溢出 &lt;c0&gt;int&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of Unicode code points in a subarray of the &lt;c0&gt;char&lt;/c0&gt; array argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145011Z" creationid="pingfangx" creationdate="20191013T145011Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 数组参数的子数组中 Unicode 代码点的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of Unicode code points in the specified text range of this &lt;c0&gt;String&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024352Z" creationid="pingfangx" creationdate="20191014T024352Z">
        <seg>返回此 &lt;c0&gt;String&lt;/c0&gt; 的指定文本范围中的 Unicode 代码点数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of Unicode code points in the specified text range of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033552Z" creationid="pingfangx" creationdate="20191014T033552Z">
        <seg>返回此序列指定文本范围内的统一代码点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of Unicode code points in the text range of the specified char sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145010Z" creationid="pingfangx" creationdate="20191013T145010Z">
        <seg>返回指定字符序列的文本范围内的 Unicode 代码点数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of key-value mappings in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135916Z" creationid="pingfangx" creationdate="20191025T135916Z">
        <seg>返回此映射中的键-值映射关系数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of one-bits in the two's complement binary representation of the specified &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123304Z" creationid="pingfangx" creationdate="20191013T123304Z">
        <seg>返回指定 &lt;c0&gt;int&lt;/c0&gt; 值的二进制补码表示形式的 1 位的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of one-bits in the two's complement binary representation of the specified &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124939Z" creationid="pingfangx" creationdate="20191013T124939Z">
        <seg>返回指定 &lt;c0&gt;long&lt;/c0&gt; 值的二进制补码表示形式中的 1 位的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of processors available to the Java virtual machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153512Z" creationid="pingfangx" creationdate="20191013T153512Z">
        <seg>返回 Java 虚拟机可以使用的处理器数目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124312Z" creationid="pingfangx" creationdate="20191013T124312Z">
        <seg>返回指定的 &lt;c0&gt;int&lt;/c0&gt; 值的二进制补码表示形式中最低（“最右边”）的为 1 的位后面的零位个数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125021Z" creationid="pingfangx" creationdate="20191013T125021Z">
        <seg>返回在指定 &lt;c0&gt;long&lt;/c0&gt; 值的二进制补码表示形式中最低位（最右边）的 1 位之后的零位的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124309Z" creationid="pingfangx" creationdate="20191013T124309Z">
        <seg>在指定 &lt;c0&gt;int&lt;/c0&gt; 值的二进制补码表示形式中最高位（最左边）的 1 位之前，返回零位的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125020Z" creationid="pingfangx" creationdate="20191013T125020Z">
        <seg>在指定 &lt;c0&gt;long&lt;/c0&gt; 值的二进制补码表示形式中最高位（最左边）的 1 位之前，返回零位的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the numeric value of the character &lt;c0&gt;ch&lt;/c0&gt; in the specified radix.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145021Z" creationid="pingfangx" creationdate="20191013T145021Z">
        <seg>返回使用指定基数的字符 &lt;c0&gt;ch&lt;/c0&gt; 的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the numeric value of the specified character (Unicode code point) in the specified radix.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T145019Z" creationid="pingfangx" creationdate="20191013T145019Z">
        <seg>返回使用指定基数的指定字符（Unicode 代码点）的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094045Z" creationid="pingfangx" creationdate="20191014T094045Z">
        <seg>返回枚举常量的序数（它在枚举声明中的位置，其中初始常量序数为零）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the output stream connected to the normal input of the subprocess.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075235Z" creationid="pingfangx" creationdate="20191014T075235Z">
        <seg>返回连接到子进程的正常输入的输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the parent class loader for delegation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073028Z" creationid="pingfangx" creationdate="20191014T073028Z">
        <seg>返回委托的父类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the parent of this thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093216Z" creationid="pingfangx" creationdate="20191014T093216Z">
        <seg>返回此线程组的父线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the product of the arguments, throwing an exception if the result overflows a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152100Z" creationid="pingfangx" creationdate="20191013T152100Z">
        <seg>返回参数的乘积，如果结果溢出 &lt;c0&gt;long&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the product of the arguments, throwing an exception if the result overflows an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152057Z" creationid="pingfangx" creationdate="20191013T152057Z">
        <seg>返回参数的乘积，如果结果溢出 &lt;c0&gt;int&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of applying the logical AND operator to the specified &lt;c0&gt;boolean&lt;/c0&gt; operands.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134455Z" creationid="pingfangx" creationdate="20191013T134455Z">
        <seg>返回对指定的 &lt;c0&gt;boolean&lt;/c0&gt; 操作数应用逻辑与运算符的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of applying the logical OR operator to the specified &lt;c0&gt;boolean&lt;/c0&gt; operands.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134512Z" creationid="pingfangx" creationdate="20191013T134512Z">
        <seg>返回对指定的 &lt;c0&gt;boolean&lt;/c0&gt; 操作数应用逻辑或运算符的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of applying the logical XOR operator to the specified &lt;c0&gt;boolean&lt;/c0&gt; operands.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134521Z" creationid="pingfangx" creationdate="20191013T134521Z">
        <seg>返回对指定的 &lt;c0&gt;boolean&lt;/c0&gt; 操作数应用逻辑异或运算符的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the runtime class of this &lt;c0&gt;Object&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094841Z" creationid="pingfangx" creationdate="20191012T094841Z">
        <seg>返回此 &lt;c0&gt;Object&lt;/c0&gt; 的运行时类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the runtime object associated with the current Java application.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153622Z" creationid="pingfangx" creationdate="20191013T153622Z">
        <seg>返回与当前 Java 应用程序相关的运行时对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode().</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154310Z" creationid="pingfangx" creationdate="20191013T154310Z">
        <seg>返回给定对象的哈希码，该代码与默认的方法 hashCode() 返回的代码一样，无论给定对象的类是否重写 hashCode()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152412Z" creationid="pingfangx" creationdate="20191013T152412Z">
        <seg>返回参数的符号函数；如果参数为 0，则返回 0；如果参数大于 0，则返回 1.0；如果参数小于 0，则返回 -1.0。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152414Z" creationid="pingfangx" creationdate="20191013T152414Z">
        <seg>返回参数的符号函数；如果参数为 0，则返回 0；如果参数大于 0，则返回 1.0；如果参数小于 0，则返回 -1.0。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the signum function of the specified &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124406Z" creationid="pingfangx" creationdate="20191013T124406Z">
        <seg>返回指定 &lt;c0&gt;int&lt;/c0&gt; 值的符号函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the signum function of the specified &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125030Z" creationid="pingfangx" creationdate="20191013T125030Z">
        <seg>返回指定 &lt;c0&gt;long&lt;/c0&gt; 值的符号函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the simple name of the underlying class as given in the source code.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101416Z" creationid="pingfangx" creationdate="20191013T101416Z">
        <seg>返回源代码中给出的底层类的简称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the simple name of the underlying member or constructor represented by this Member.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014905Z" creationid="pingfangx" creationdate="20191015T014905Z">
        <seg>返回此 Member 表示的底层成员或构造方法的简单名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the size of an ulp of the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152503Z" creationid="pingfangx" creationdate="20191013T152503Z">
        <seg>返回参数的 ulp 大小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;double&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132701Z" creationid="pingfangx" creationdate="20191013T132701Z">
        <seg>返回两个 &lt;c0&gt;double&lt;/c0&gt; 值中的较小值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;double&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152031Z" creationid="pingfangx" creationdate="20191013T152031Z">
        <seg>返回两个 &lt;c0&gt;double&lt;/c0&gt; 值中较小的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;float&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132319Z" creationid="pingfangx" creationdate="20191013T132319Z">
        <seg>返回两个 &lt;c0&gt;float&lt;/c0&gt; 值中的较小值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;float&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152030Z" creationid="pingfangx" creationdate="20191013T152030Z">
        <seg>返回两个 &lt;c0&gt;float&lt;/c0&gt; 值中较小的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;int&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124258Z" creationid="pingfangx" creationdate="20191013T124258Z">
        <seg>返回两个 &lt;c0&gt;int&lt;/c0&gt; 值中的较小值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;int&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152032Z" creationid="pingfangx" creationdate="20191013T152032Z">
        <seg>返回两个 &lt;c0&gt;int&lt;/c0&gt; 值中较小的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;long&lt;/c0&gt; values as if by calling &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125018Z" creationid="pingfangx" creationdate="20191013T125018Z">
        <seg>返回两个 &lt;c0&gt;long&lt;/c0&gt; 值中的较小值，就像调用 &lt;c1&gt;&lt;a2&gt;Math.min&lt;/a2&gt;&lt;/c1&gt; 一样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smaller of two &lt;c0&gt;long&lt;/c0&gt; values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152033Z" creationid="pingfangx" creationdate="20191013T152033Z">
        <seg>返回两个 &lt;c0&gt;long&lt;/c0&gt; 值中较小的一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the smallest (closest to negative infinity) &lt;c0&gt;double&lt;/c0&gt; value that is greater than or equal to the argument and is equal to a mathematical integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151647Z" creationid="pingfangx" creationdate="20191013T151647Z">
        <seg>返回最小的（最接近负无穷大）&lt;c0&gt;double&lt;/c0&gt; 值，该值大于等于参数，并等于某个整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the standard hash code as defined by the &lt;c0&gt;&lt;a1&gt;hashCode()&lt;/a1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093531Z" creationid="pingfangx" creationdate="20191014T093531Z">
        <seg>返回 &lt;c0&gt;&lt;a1&gt;hashCode()&lt;/a1&gt;&lt;/c0&gt; 方法定义的标准哈希码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the state of this thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082013Z" creationid="pingfangx" creationdate="20191014T082013Z">
        <seg>返回该线程的状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of a specific subarray of the &lt;c0&gt;char&lt;/c0&gt; array argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030149Z" creationid="pingfangx" creationdate="20191014T030149Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 数组参数的特定子数组的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;Object&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030158Z" creationid="pingfangx" creationdate="20191014T030158Z">
        <seg>返回 &lt;c0&gt;Object&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;boolean&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030145Z" creationid="pingfangx" creationdate="20191014T030145Z">
        <seg>返回 &lt;c0&gt;boolean&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;char&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030155Z" creationid="pingfangx" creationdate="20191014T030155Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;char&lt;/c0&gt; array argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030201Z" creationid="pingfangx" creationdate="20191014T030201Z">
        <seg>返回 &lt;c0&gt;char&lt;/c0&gt; 数组参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;double&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030148Z" creationid="pingfangx" creationdate="20191014T030148Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;float&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030151Z" creationid="pingfangx" creationdate="20191014T030151Z">
        <seg>返回 &lt;c0&gt;float&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;int&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030152Z" creationid="pingfangx" creationdate="20191014T030152Z">
        <seg>返回 &lt;c0&gt;int&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the string representation of the &lt;c0&gt;long&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030156Z" creationid="pingfangx" creationdate="20191014T030156Z">
        <seg>返回 &lt;c0&gt;long&lt;/c0&gt; 参数的字符串表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the sum of its arguments, throwing an exception if the result overflows a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151456Z" creationid="pingfangx" creationdate="20191013T151456Z">
        <seg>返回其参数的和，如果结果溢出 &lt;c0&gt;long&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the sum of its arguments, throwing an exception if the result overflows an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151448Z" creationid="pingfangx" creationdate="20191013T151448Z">
        <seg>返回其参数的和，如果结果溢出 &lt;c0&gt;int&lt;/c0&gt;，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the system class loader for delegation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073045Z" creationid="pingfangx" creationdate="20191014T073045Z">
        <seg>返回委托的系统类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the system-dependent line separator string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154348Z" creationid="pingfangx" creationdate="20191013T154348Z">
        <seg>返回系统相关的行分隔符字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the task queue used by this executor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130148Z" creationid="pingfangx" creationdate="20191025T130148Z">
        <seg>返回此执行程序使用的任务队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the thread factory used to create new threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130152Z" creationid="pingfangx" creationdate="20191025T130152Z">
        <seg>返回用于创建新线程的线程工厂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the thread group to which this thread belongs.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082015Z" creationid="pingfangx" creationdate="20191014T082015Z">
        <seg>返回该线程所属的线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130140Z" creationid="pingfangx" creationdate="20191025T130140Z">
        <seg>返回线程保持活动时间，即线程在终止之前可能保持空闲的时间量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the total amount of memory in the Java virtual machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153700Z" creationid="pingfangx" creationdate="20191013T153700Z">
        <seg>返回 Java 虚拟机中的内存总量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the trigonometric cosine of an angle.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151654Z" creationid="pingfangx" creationdate="20191013T151654Z">
        <seg>返回角的三角余弦。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the trigonometric sine of an angle.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152416Z" creationid="pingfangx" creationdate="20191013T152416Z">
        <seg>返回角的三角正弦。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the trigonometric tangent of an angle.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152440Z" creationid="pingfangx" creationdate="20191013T152440Z">
        <seg>返回角的三角正切。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the type of data found in the incorrectly typed element.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152803Z" creationid="pingfangx" creationdate="20191014T152803Z">
        <seg>返回在类型不正确的元素中找到的数据类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the unbiased exponent used in the representation of a &lt;c0&gt;double&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151942Z" creationid="pingfangx" creationdate="20191013T151942Z">
        <seg>返回 &lt;c0&gt;double&lt;/c0&gt; 表示形式中使用的无偏指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the unbiased exponent used in the representation of a &lt;c0&gt;float&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151943Z" creationid="pingfangx" creationdate="20191013T151943Z">
        <seg>返回 &lt;c0&gt;float&lt;/c0&gt; 表示形式中使用的无偏指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the unique &lt;c0&gt;&lt;a1&gt;Console&lt;/a1&gt;&lt;/c0&gt; object associated with the current Java virtual machine, if any.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154228Z" creationid="pingfangx" creationdate="20191013T154228Z">
        <seg>返回与当前 Java 虚拟机关联的唯一 &lt;c0&gt;&lt;a1&gt;Console&lt;/a1&gt;&lt;/c0&gt; 对象（如果有）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value in the current thread's copy of this thread-local variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100743Z" creationid="pingfangx" creationdate="20191014T100743Z">
        <seg>返回此线程局部变量的当前线程副本中的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124317Z" creationid="pingfangx" creationdate="20191013T124317Z">
        <seg>返回通过反转指定 &lt;c0&gt;int&lt;/c0&gt; 值的二进制补码表示形式中位的顺序而获得的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125024Z" creationid="pingfangx" creationdate="20191013T125024Z">
        <seg>返回通过反转指定 &lt;c0&gt;long&lt;/c0&gt; 值的二进制补码表示形式中位的顺序而获得的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by reversing the order of the bytes in the specified &lt;t0&gt;char&lt;/t0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150019Z" creationid="pingfangx" creationdate="20191013T150019Z">
        <seg>返回通过反转指定 &lt;t0&gt;char&lt;/t0&gt; 值中的字节顺序而获得的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124324Z" creationid="pingfangx" creationdate="20191013T124324Z">
        <seg>返回通过反转指定 &lt;c0&gt;int&lt;/c0&gt; 值的二进制补码表示形式中字节的顺序而获得的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125025Z" creationid="pingfangx" creationdate="20191013T125025Z">
        <seg>返回通过反转指定 &lt;c0&gt;long&lt;/c0&gt; 值的二进制补码表示形式中字节的顺序而获得的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified &lt;c0&gt;short&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122114Z" creationid="pingfangx" creationdate="20191013T122114Z">
        <seg>返回通过反转指定 &lt;c0&gt;short&lt;/c0&gt; 值的二进制补码表示形式中字节的顺序而获得的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by rotating the two's complement binary representation of the specified &lt;c0&gt;int&lt;/c0&gt; value left by the specified number of bits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124402Z" creationid="pingfangx" creationdate="20191013T124402Z">
        <seg>返回根据指定的位数循环左移指定的 &lt;c0&gt;int&lt;/c0&gt; 值的二进制补码表示形式而得到的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by rotating the two's complement binary representation of the specified &lt;c0&gt;int&lt;/c0&gt; value right by the specified number of bits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124404Z" creationid="pingfangx" creationdate="20191013T124404Z">
        <seg>返回根据指定的位数循环右移指定的 &lt;c0&gt;int&lt;/c0&gt; 值的二进制补码表示形式而得到的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by rotating the two's complement binary representation of the specified &lt;c0&gt;long&lt;/c0&gt; value left by the specified number of bits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125026Z" creationid="pingfangx" creationdate="20191013T125026Z">
        <seg>返回根据指定的位数循环左移指定的 &lt;c0&gt;long&lt;/c0&gt; 值的二进制补码表示形式而得到的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value obtained by rotating the two's complement binary representation of the specified &lt;c0&gt;long&lt;/c0&gt; value right by the specified number of bits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125028Z" creationid="pingfangx" creationdate="20191013T125028Z">
        <seg>返回根据指定的位数循环右移指定的 &lt;c0&gt;long&lt;/c0&gt; 值的二进制补码表示形式而得到的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the &lt;c0&gt;long&lt;/c0&gt; argument; throwing an exception if the value overflows an &lt;c1&gt;int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152458Z" creationid="pingfangx" creationdate="20191013T152458Z">
        <seg>返回 &lt;c0&gt;long&lt;/c0&gt; 参数的值；如果该值溢出的 &lt;c1&gt;int&lt;/c1&gt; 则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the field represented by this &lt;c0&gt;Field&lt;/c0&gt;, on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104510Z" creationid="pingfangx" creationdate="20191015T104510Z">
        <seg>返回指定对象上此 &lt;c0&gt;Field&lt;/c0&gt; 表示的字段的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the first argument raised to the power of the second argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T152305Z" creationid="pingfangx" creationdate="20191013T152305Z">
        <seg>返回第一个参数的第二个参数次幂的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as a &lt;c0&gt;boolean&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103428Z" creationid="pingfangx" creationdate="20191015T103428Z">
        <seg>以 &lt;c0&gt;boolean&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as a &lt;c0&gt;byte&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103430Z" creationid="pingfangx" creationdate="20191015T103430Z">
        <seg>以 &lt;c0&gt;byte&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as a &lt;c0&gt;char&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103432Z" creationid="pingfangx" creationdate="20191015T103432Z">
        <seg>以 &lt;c0&gt;char&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as a &lt;c0&gt;double&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103433Z" creationid="pingfangx" creationdate="20191015T103433Z">
        <seg>以 &lt;c0&gt;double&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as a &lt;c0&gt;float&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103434Z" creationid="pingfangx" creationdate="20191015T103434Z">
        <seg>以 &lt;c0&gt;float&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103438Z" creationid="pingfangx" creationdate="20191015T103438Z">
        <seg>以 &lt;c0&gt;long&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as a &lt;c0&gt;short&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103445Z" creationid="pingfangx" creationdate="20191015T103445Z">
        <seg>以 &lt;c0&gt;short&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object, as an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103435Z" creationid="pingfangx" creationdate="20191015T103435Z">
        <seg>以 &lt;c0&gt;int&lt;/c0&gt; 形式返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the indexed component in the specified array object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103409Z" creationid="pingfangx" creationdate="20191015T103409Z">
        <seg>返回指定数组对象中索引组件的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the specified number as a &lt;c0&gt;byte&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120913Z" creationid="pingfangx" creationdate="20191013T120913Z">
        <seg>以 &lt;c0&gt;byte&lt;/c0&gt; 形式返回指定的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the specified number as a &lt;c0&gt;double&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120916Z" creationid="pingfangx" creationdate="20191013T120916Z">
        <seg>以 &lt;c0&gt;double&lt;/c0&gt; 形式返回指定的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the specified number as a &lt;c0&gt;float&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120918Z" creationid="pingfangx" creationdate="20191013T120918Z">
        <seg>以 &lt;c0&gt;float&lt;/c0&gt; 形式返回指定的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the specified number as a &lt;c0&gt;long&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120920Z" creationid="pingfangx" creationdate="20191013T120920Z">
        <seg>以 &lt;c0&gt;long&lt;/c0&gt; 形式返回指定的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the specified number as a &lt;c0&gt;short&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120923Z" creationid="pingfangx" creationdate="20191013T120923Z">
        <seg>以 &lt;c0&gt;short&lt;/c0&gt; 形式返回指定的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of the specified number as an &lt;c0&gt;int&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120919Z" creationid="pingfangx" creationdate="20191013T120919Z">
        <seg>以 &lt;c0&gt;int&lt;/c0&gt; 形式返回指定的数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Boolean&lt;/c0&gt; object as a boolean primitive.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133301Z" creationid="pingfangx" creationdate="20191013T133301Z">
        <seg>将此 &lt;c0&gt;Boolean&lt;/c0&gt; 对象的值作为基本布尔值返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Byte&lt;/c0&gt; as a &lt;c1&gt;byte&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121402Z" creationid="pingfangx" creationdate="20191013T121402Z">
        <seg>作为一个 &lt;c0&gt;byte&lt;/c0&gt; 返回此 &lt;c1&gt;Byte&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Byte&lt;/c0&gt; as a &lt;c1&gt;double&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121427Z" creationid="pingfangx" creationdate="20191013T121427Z">
        <seg>作为一个 &lt;c0&gt;double&lt;/c0&gt; 返回此 &lt;c1&gt;Byte&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Byte&lt;/c0&gt; as a &lt;c1&gt;float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121431Z" creationid="pingfangx" creationdate="20191013T121431Z">
        <seg>作为一个 &lt;c0&gt;float&lt;/c0&gt; 返回此 &lt;c1&gt;Byte&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Byte&lt;/c0&gt; as a &lt;c1&gt;long&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121521Z" creationid="pingfangx" creationdate="20191013T121521Z">
        <seg>作为一个 &lt;c0&gt;long&lt;/c0&gt; 返回此 &lt;c1&gt;Byte&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Byte&lt;/c0&gt; as a &lt;c1&gt;short&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121526Z" creationid="pingfangx" creationdate="20191013T121526Z">
        <seg>作为一个 &lt;c0&gt;short&lt;/c0&gt; 返回此 &lt;c1&gt;Byte&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Byte&lt;/c0&gt; as an &lt;c1&gt;int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121520Z" creationid="pingfangx" creationdate="20191013T121520Z">
        <seg>作为一个 &lt;c0&gt;int&lt;/c0&gt; 返回此 &lt;c1&gt;Byte&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Character&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144948Z" creationid="pingfangx" creationdate="20191013T144948Z">
        <seg>返回此 &lt;c0&gt;Character&lt;/c0&gt; 对象的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Double&lt;/c0&gt; as a &lt;c1&gt;byte&lt;/c1&gt; (by casting to a &lt;c2&gt;byte&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132621Z" creationid="pingfangx" creationdate="20191013T132621Z">
        <seg>以 &lt;c0&gt;byte&lt;/c0&gt; 形式返回此 &lt;c1&gt;Double&lt;/c1&gt; 的值（通过强制转换为 &lt;c2&gt;byte&lt;/c2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Double&lt;/c0&gt; as a &lt;c1&gt;long&lt;/c1&gt; (by casting to type &lt;c2&gt;long&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132652Z" creationid="pingfangx" creationdate="20191013T132652Z">
        <seg>以 &lt;c0&gt;long&lt;/c0&gt; 形式返回此 &lt;c1&gt;Double&lt;/c1&gt; 的值（通过强制转换为 &lt;c2&gt;long&lt;/c2&gt; 类型）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Double&lt;/c0&gt; as a &lt;c1&gt;short&lt;/c1&gt; (by casting to a &lt;c2&gt;short&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132703Z" creationid="pingfangx" creationdate="20191013T132703Z">
        <seg>以 &lt;c0&gt;short&lt;/c0&gt; 形式返回此 &lt;c1&gt;Double&lt;/c1&gt; 的值（通过强制转换为 &lt;c2&gt;short&lt;/c2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Double&lt;/c0&gt; as an &lt;c1&gt;int&lt;/c1&gt; (by casting to type &lt;c2&gt;int&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132640Z" creationid="pingfangx" creationdate="20191013T132640Z">
        <seg>以 &lt;c0&gt;int&lt;/c0&gt; 形式返回此 &lt;c1&gt;Double&lt;/c1&gt; 的值（通过强制转换为 &lt;c2&gt;int&lt;/c2&gt; 类型）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Float&lt;/c0&gt; as a &lt;c1&gt;byte&lt;/c1&gt; (by casting to a &lt;c2&gt;byte&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132051Z" creationid="pingfangx" creationdate="20191013T132051Z">
        <seg>将此 &lt;c0&gt;Float&lt;/c0&gt; 值以 &lt;c1&gt;byte&lt;/c1&gt; 形式返回（强制转换为 &lt;c2&gt;byte&lt;/c2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Float&lt;/c0&gt; as a &lt;c1&gt;short&lt;/c1&gt; (by casting to a &lt;c2&gt;short&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132321Z" creationid="pingfangx" creationdate="20191013T132321Z">
        <seg>将此 &lt;c0&gt;Float&lt;/c0&gt; 值以 &lt;c1&gt;short&lt;/c1&gt; 形式返回（强制转换为 &lt;c2&gt;short&lt;/c2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Float&lt;/c0&gt; as an &lt;c1&gt;int&lt;/c1&gt; (by casting to type &lt;c2&gt;int&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132120Z" creationid="pingfangx" creationdate="20191013T132120Z">
        <seg>将此 &lt;c0&gt;Float&lt;/c0&gt; 值以 &lt;c1&gt;int&lt;/c1&gt; 形式返回（强制转换为 &lt;c2&gt;int&lt;/c2&gt; 类型）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Integer&lt;/c0&gt; as a &lt;c1&gt;byte&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123308Z" creationid="pingfangx" creationdate="20191013T123308Z">
        <seg>以 &lt;c0&gt;byte&lt;/c0&gt; 类型返回该 &lt;c1&gt;Integer&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Integer&lt;/c0&gt; as a &lt;c1&gt;double&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123321Z" creationid="pingfangx" creationdate="20191013T123321Z">
        <seg>以 &lt;c0&gt;double&lt;/c0&gt; 类型返回该 &lt;c1&gt;Integer&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Integer&lt;/c0&gt; as a &lt;c1&gt;float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123323Z" creationid="pingfangx" creationdate="20191013T123323Z">
        <seg>以 &lt;c0&gt;float&lt;/c0&gt; 类型返回该 &lt;c1&gt;Integer&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Integer&lt;/c0&gt; as a &lt;c1&gt;long&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123357Z" creationid="pingfangx" creationdate="20191013T123357Z">
        <seg>以 &lt;c0&gt;long&lt;/c0&gt; 类型返回该 &lt;c1&gt;Integer&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Integer&lt;/c0&gt; as a &lt;c1&gt;short&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124404Z" creationid="pingfangx" creationdate="20191013T124404Z">
        <seg>以 &lt;c0&gt;short&lt;/c0&gt; 类型返回该 &lt;c1&gt;Integer&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Integer&lt;/c0&gt; as an &lt;c1&gt;int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123355Z" creationid="pingfangx" creationdate="20191013T123355Z">
        <seg>以 &lt;c0&gt;int&lt;/c0&gt; 类型返回该 &lt;c1&gt;Integer&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Long&lt;/c0&gt; as a &lt;c1&gt;byte&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124940Z" creationid="pingfangx" creationdate="20191013T124940Z">
        <seg>以 &lt;c0&gt;byte&lt;/c0&gt; 形式返回此 &lt;c1&gt;Long&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Long&lt;/c0&gt; as a &lt;c1&gt;double&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124949Z" creationid="pingfangx" creationdate="20191013T124949Z">
        <seg>以 &lt;c0&gt;double&lt;/c0&gt; 形式返回此 &lt;c1&gt;Long&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Long&lt;/c0&gt; as a &lt;c1&gt;float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124950Z" creationid="pingfangx" creationdate="20191013T124950Z">
        <seg>以 &lt;c0&gt;float&lt;/c0&gt; 形式返回此 &lt;c1&gt;Long&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Long&lt;/c0&gt; as a &lt;c1&gt;long&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125009Z" creationid="pingfangx" creationdate="20191013T125009Z">
        <seg>以 &lt;c0&gt;long&lt;/c0&gt; 值的形式返回此 &lt;c1&gt;Long&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Long&lt;/c0&gt; as a &lt;c1&gt;short&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125029Z" creationid="pingfangx" creationdate="20191013T125029Z">
        <seg>以 &lt;c0&gt;short&lt;/c0&gt; 形式返回此 &lt;c1&gt;Long&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Long&lt;/c0&gt; as an &lt;c1&gt;int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T125008Z" creationid="pingfangx" creationdate="20191013T125008Z">
        <seg>以 &lt;c0&gt;int&lt;/c0&gt; 形式返回此 &lt;c1&gt;Long&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Short&lt;/c0&gt; as a &lt;c1&gt;byte&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122031Z" creationid="pingfangx" creationdate="20191013T122031Z">
        <seg>以 &lt;c0&gt;byte&lt;/c0&gt; 形式返回此 &lt;c1&gt;Short&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Short&lt;/c0&gt; as a &lt;c1&gt;double&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122041Z" creationid="pingfangx" creationdate="20191013T122041Z">
        <seg>以 &lt;c0&gt;double&lt;/c0&gt; 形式返回此 &lt;c1&gt;Short&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Short&lt;/c0&gt; as a &lt;c1&gt;float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122044Z" creationid="pingfangx" creationdate="20191013T122044Z">
        <seg>以 &lt;c0&gt;float&lt;/c0&gt; 形式返回此 &lt;c1&gt;Short&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Short&lt;/c0&gt; as a &lt;c1&gt;long&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122106Z" creationid="pingfangx" creationdate="20191013T122106Z">
        <seg>以 &lt;c0&gt;Long&lt;/c0&gt; 形式返回此 &lt;c1&gt;Short&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Short&lt;/c0&gt; as a &lt;c1&gt;short&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122115Z" creationid="pingfangx" creationdate="20191013T122115Z">
        <seg>以 &lt;c0&gt;short&lt;/c0&gt; 形式返回此 &lt;c1&gt;Short&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value of this &lt;c0&gt;Short&lt;/c0&gt; as an &lt;c1&gt;int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122105Z" creationid="pingfangx" creationdate="20191013T122105Z">
        <seg>以 &lt;c0&gt;int&lt;/c0&gt; 形式返回此 &lt;c1&gt;Short&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value to which the specified key is mapped, or &lt;c0&gt;defaultValue&lt;/c0&gt; if this map contains no mapping for the key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140329Z" creationid="pingfangx" creationdate="20191025T140329Z">
        <seg>返回到指定键所映射的值，或 &lt;c0&gt;defaultValue&lt;/c0&gt; 如果此映射不包含该键的映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value to which the specified key is mapped, or &lt;c0&gt;null&lt;/c0&gt; if this map contains no mapping for the key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135635Z" creationid="pingfangx" creationdate="20191025T135635Z">
        <seg>返回指定键所映射的值；如果对于该键来说，此映射不包含任何映射关系，则返回 &lt;c0&gt;null&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this element's annotation for the specified type if such an annotation is present, else null.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T102417Z" creationid="pingfangx" creationdate="20191013T102417Z">
        <seg>如果存在该元素的指定类型的注释，则返回这些注释，否则返回 null。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this process builder's operating system program and arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075909Z" creationid="pingfangx" creationdate="20191014T075909Z">
        <seg>返回此进程生成器的操作系统程序和参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this process builder's working directory.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075916Z" creationid="pingfangx" creationdate="20191014T075916Z">
        <seg>返回此进程生成器的工作目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this reference object's referent.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154708Z" creationid="pingfangx" creationdate="20191014T154708Z">
        <seg>返回此引用对象的指示对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this thread's name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082006Z" creationid="pingfangx" creationdate="20191014T082006Z">
        <seg>返回该线程的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this thread's priority.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082007Z" creationid="pingfangx" creationdate="20191014T082007Z">
        <seg>返回线程的优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if an annotation for the specified type is present on this element, else false.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101558Z" creationid="pingfangx" creationdate="20191013T101558Z">
        <seg>如果指定类型的注释存在于此元素上，则返回 true，否则返回 false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if and only if the specified class was dynamically generated to be a proxy class using the &lt;c0&gt;getProxyClass&lt;/c0&gt; method or the &lt;c1&gt;newProxyInstance&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113314Z" creationid="pingfangx" creationdate="20191015T113314Z">
        <seg>当且仅当指定的类通过 &lt;c0&gt;getProxyClass&lt;/c0&gt; 方法或 &lt;c1&gt;newProxyInstance&lt;/c1&gt; 方法动态生成为代理类时，返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if and only if this class was declared as an enum in the source code.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101632Z" creationid="pingfangx" creationdate="20191013T101632Z">
        <seg>当且仅当该类声明为源代码中的枚举时返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if and only if this string contains the specified sequence of char values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024406Z" creationid="pingfangx" creationdate="20191014T024406Z">
        <seg>当且仅当此字符串包含指定的 char 值序列时，返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if the method containing the execution point represented by this stack trace element is a native method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095232Z" creationid="pingfangx" creationdate="20191014T095232Z">
        <seg>如果包含由该堆栈跟踪元素所表示的执行点的方法是一个本机方法，则返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if the specified object is another &lt;c0&gt;StackTraceElement&lt;/c0&gt; instance representing the same execution point as this instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095218Z" creationid="pingfangx" creationdate="20191014T095218Z">
        <seg>如果指定的对象是另一个 &lt;c0&gt;StackTraceElement&lt;/c0&gt; 实例，并且该对象表示的执行点与该实例的相同，则返回 ture。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if the specified object is equal to this enum constant.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094036Z" creationid="pingfangx" creationdate="20191014T094036Z">
        <seg>当指定对象等于此枚举常量时，返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if the specified object represents an annotation that is logically equivalent to this one.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T145004Z" creationid="pingfangx" creationdate="20191014T145004Z">
        <seg>如果指定的对象表示在逻辑上等效于此接口的注释，则返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if this &lt;c0&gt;Class&lt;/c0&gt; object represents an annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T101544Z" creationid="pingfangx" creationdate="20191013T101544Z">
        <seg>如果此 &lt;c0&gt;Class&lt;/c0&gt; 对象表示一个注释类型则返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if this executor is in the process of terminating after &lt;c0&gt;&lt;a1&gt;shutdown()&lt;/a1&gt;&lt;/c0&gt; or &lt;c2&gt;&lt;a3&gt;shutdownNow()&lt;/a3&gt;&lt;/c2&gt; but has not completely terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130228Z" creationid="pingfangx" creationdate="20191025T130228Z">
        <seg>如果此执行程序处于在 &lt;c0&gt;&lt;a1&gt;shutdown()&lt;/a1&gt;&lt;/c0&gt; 或 &lt;c2&gt;&lt;a3&gt;shutdownNow()&lt;/a3&gt;&lt;/c2&gt; 之后正在终止但尚未完全终止的过程中，则返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125940Z" creationid="pingfangx" creationdate="20191025T125940Z">
        <seg>如果此池允许核心线程超时和终止，如果在 keepAlive 时间内没有任务到达，新任务到达时正在替换（如果需要），则返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns value of this &lt;c0&gt;Float&lt;/c0&gt; as a &lt;c1&gt;long&lt;/c1&gt; (by casting to type &lt;c2&gt;long&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132311Z" creationid="pingfangx" creationdate="20191013T132311Z">
        <seg>将此 &lt;c0&gt;Float&lt;/c0&gt; 值以 &lt;c1&gt;long&lt;/c1&gt; 形式返回（强制转换为 &lt;c2&gt;long&lt;/c2&gt; 类型）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns x's Class if it is of the form "class C implements Comparable&lt;c0&gt;", else null.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083220Z" creationid="pingfangx" creationdate="20191026T083126Z">
        <seg>如果 x 的形式是 "class C implements Comparable&lt;c0&gt;"，则返回 x 的 Class，否则返回 null。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124603Z" creationid="pingfangx" creationdate="20191013T124603Z">
        <seg>如果指定值在其二进制补码表示形式中没有 1 位，即等于零，则返回零。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Runs the finalization methods of any objects pending finalization.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153641Z" creationid="pingfangx" creationdate="20191013T153641Z">
        <seg>运行处于挂起终止状态的所有对象的终止方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Runs the garbage collector.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153549Z" creationid="pingfangx" creationdate="20191013T153549Z">
        <seg>运行垃圾回收器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sample code might look like:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072305Z" creationid="pingfangx" creationdate="20191014T072305Z">
        <seg>示例代码如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Save the state of the &lt;t0&gt;HashMap&lt;/t0&gt; instance to a stream (i.e., serialize it).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095436Z" creationid="pingfangx" creationdate="20191026T095436Z">
        <seg>将 &lt;t0&gt;HashMap&lt;/t0&gt; 实例的状态保存到流(即序列化它)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;c0&gt;&lt;a1&gt;TypeVariable&lt;/a1&gt;&lt;/c0&gt; for details on the creation process for type variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071633Z" creationid="pingfangx" creationdate="20191015T071633Z">
        <seg>有关类型变量创建过程的详细信息，请参阅 &lt;c0&gt;&lt;a1&gt;TypeVariable&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;c0&gt;&lt;a1&gt;stop()&lt;/a1&gt;&lt;/c0&gt; for details.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082646Z" creationid="pingfangx" creationdate="20191014T082646Z">
        <seg>有关详细信息，请参见 &lt;c0&gt;&lt;a1&gt;stop()&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See &lt;c1&gt;&lt;a2&gt;clone()&lt;/a2&gt;&lt;/c1&gt; for details on overriding this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101521Z" creationid="pingfangx" creationdate="20191014T101517Z">
        <seg>请参阅 &lt;c1&gt;&lt;a2&gt;clone()&lt;/a2&gt;&lt;/c1&gt;，以获得有关重写此方法的详细信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See Section 15.8.2 of &lt;c1&gt;The Java™ Language Specification&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T040127Z" creationid="pingfangx" creationdate="20191013T040127Z">
        <seg>请参阅 &lt;c1&gt;The Java™ Language Specification&lt;/c1&gt; 的第 15.8.2 节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also the &lt;c0&gt;&lt;a1&gt;java.util.concurrent.locks&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;java.util.concurrent.atomic&lt;/a3&gt;&lt;/c2&gt; packages.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T105140Z" creationid="pingfangx" creationdate="20191025T105140Z">
        <seg>另请参阅 &lt;c0&gt;&lt;a1&gt;java.util.concurrent.locks&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;java.util.concurrent.atomic&lt;/a3&gt;&lt;/c2&gt; 包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135208Z" creationid="pingfangx" creationdate="20191025T135208Z">
        <seg>另请参阅：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See below for hook methods defined to be invoked upon insertion, removal and access that allow LinkedHashMap internals to otherwise remain independent of these mechanics.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081831Z" creationid="pingfangx" creationdate="20191026T081831Z">
        <seg>请参阅下面的钩子方法，这些钩子方法被定义为在插入，移除和访问时被调用，以允许 LinkedHashMap 内部部件保持独立于这些机制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the &lt;c0&gt;notify&lt;/c0&gt; method for a description of the ways in which a thread can become the owner of a monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133119Z" creationid="pingfangx" creationdate="20191014T133119Z">
        <seg>有关线程能够成为监视器所有者的方法的描述，请参阅 &lt;c0&gt;notify&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the declaration of &lt;c1&gt;&lt;a2&gt;ParameterizedType&lt;/a2&gt;&lt;/c1&gt; for the semantics of the creation process for parameterized types and see &lt;c3&gt;&lt;a4&gt;TypeVariable&lt;/a4&gt;&lt;/c3&gt; for the creation process for type variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161730Z" creationid="pingfangx" creationdate="20191014T161730Z">
        <seg>请参见 &lt;c1&gt;&lt;a2&gt;ParameterizedType&lt;/a2&gt;&lt;/c1&gt; 的声明获得参数化类型创建过程的语义，参见 &lt;c3&gt;&lt;a4&gt;TypeVariable&lt;/a4&gt;&lt;/c3&gt; 获得创建类型变量的过程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Selects the proxy server to use, if any, when connecting to the network resource referenced by a URL.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083335Z" creationid="pingfangx" creationdate="20191011T083335Z">
        <seg>连接到 URL 引用的网络资源时选择要使用的代理服务器（如果有）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sending and receiving with TCP sockets is done through InputStreams and OutputStreams which can be obtained via the &lt;c0&gt;&lt;a1&gt;getInputStream()&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;getOutputStream()&lt;/a3&gt;&lt;/c2&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080920Z" creationid="pingfangx" creationdate="20191011T080920Z">
        <seg>使用 TCP 套接字的发送和接收操作需要借助 InputStream 和 OutputStream 来完成，这两者是通过 &lt;c0&gt;&lt;a1&gt;Socket.getInputStream()&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;Socket.getOutputStream()&lt;/a3&gt;&lt;/c2&gt; 方法获取的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Serializability of a class is enabled by the class implementing the java.io.Serializable interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094557Z" creationid="pingfangx" creationdate="20191010T094557Z">
        <seg>类通过实现 java.io.Serializable 接口以启用其序列化功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Serialization's descriptor for classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102633Z" creationid="pingfangx" creationdate="20191010T102633Z">
        <seg>类的序列化描述符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set the &lt;c0&gt;accessible&lt;/c0&gt; flag for this object to the indicated boolean value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090615Z" creationid="pingfangx" creationdate="20191015T090615Z">
        <seg>将此对象的 &lt;c0&gt;accessible&lt;/c0&gt; 标志设置为指示的布尔值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082153Z" creationid="pingfangx" creationdate="20191014T082153Z">
        <seg>设置当线程由于未捕获到异常而突然终止，并且没有为该线程定义其他处理程序时所调用的默认处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set the handler invoked when this thread abruptly terminates due to an uncaught exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082159Z" creationid="pingfangx" creationdate="20191014T082159Z">
        <seg>设置该线程由于未捕获到异常而突然终止时调用的处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets a new handler for unexecutable tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130257Z" creationid="pingfangx" creationdate="20191025T130257Z">
        <seg>设置用于未执行任务的新处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the context ClassLoader for this Thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082130Z" creationid="pingfangx" creationdate="20191014T082130Z">
        <seg>设置该线程的上下文 ClassLoader。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the core number of threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130238Z" creationid="pingfangx" creationdate="20191025T130238Z">
        <seg>设置核心线程数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the current thread's copy of this thread-local variable to the specified value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100746Z" creationid="pingfangx" creationdate="20191014T100746Z">
        <seg>将此线程局部变量的当前线程副本中的值设置为指定值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the default assertion status for this class loader to &lt;t0&gt;false&lt;/t0&gt; and discards any package defaults or class assertion status settings associated with the class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073026Z" creationid="pingfangx" creationdate="20191014T073026Z">
        <seg>将此类加载器的默认断言状态设置为 &lt;t0&gt;false&lt;/t0&gt;，并放弃与此类加载器关联的所有默认包或类断言状态设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the default assertion status for this class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073057Z" creationid="pingfangx" creationdate="20191014T073057Z">
        <seg>设置此类加载器的默认断言状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073055Z" creationid="pingfangx" creationdate="20191014T073055Z">
        <seg>设置在此类加载器及其包含的嵌套类中指定的最高层类所需的断言状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the field represented by this &lt;c0&gt;Field&lt;/c0&gt; object on the specified object argument to the specified new value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104554Z" creationid="pingfangx" creationdate="20191015T104554Z">
        <seg>将指定对象变量上此 &lt;c0&gt;Field&lt;/c0&gt; 对象表示的字段设置为指定的新值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the length of the character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033910Z" creationid="pingfangx" creationdate="20191014T033910Z">
        <seg>设置字符序列的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the maximum allowed number of threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130256Z" creationid="pingfangx" creationdate="20191025T130256Z">
        <seg>设置允许的最大线程数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the maximum priority of the group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093320Z" creationid="pingfangx" creationdate="20191014T093320Z">
        <seg>设置线程组的最高优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the package default assertion status for the named package.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073102Z" creationid="pingfangx" creationdate="20191014T073102Z">
        <seg>为指定包设置默认断言状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125936Z" creationid="pingfangx" creationdate="20191025T125936Z">
        <seg>如果在保持活动时间内没有任务到达，新任务到达时正在替换（如果需要），则设置控制核心线程是超时还是终止的策略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the signers of a class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073430Z" creationid="pingfangx" creationdate="20191014T073430Z">
        <seg>设置类的签署者。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the stack trace elements that will be returned by &lt;c0&gt;&lt;a1&gt;getStackTrace()&lt;/a1&gt;&lt;/c0&gt; and printed by &lt;c2&gt;&lt;a3&gt;printStackTrace()&lt;/a3&gt;&lt;/c2&gt; and related methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115253Z" creationid="pingfangx" creationdate="20191013T115253Z">
        <seg>设置将由 &lt;c0&gt;&lt;a1&gt;getStackTrace()&lt;/a1&gt;&lt;/c0&gt; 返回，并由 &lt;c2&gt;&lt;a3&gt;printStackTrace()&lt;/a3&gt;&lt;/c2&gt; 和相关方法输出的堆栈跟踪元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the system property indicated by the specified key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154517Z" creationid="pingfangx" creationdate="20191013T154517Z">
        <seg>设置指定键指示的系统属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the thread factory used to create new threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130258Z" creationid="pingfangx" creationdate="20191025T130258Z">
        <seg>设置用于创建新线程的线程工厂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130255Z" creationid="pingfangx" creationdate="20191025T130255Z">
        <seg>设置线程保持活动时间，即线程在终止之前可能保持空闲的时间量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as a &lt;c0&gt;boolean&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104555Z" creationid="pingfangx" creationdate="20191015T104555Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;boolean&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as a &lt;c0&gt;byte&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104556Z" creationid="pingfangx" creationdate="20191015T104556Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;byte&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as a &lt;c0&gt;char&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104556Z" creationid="pingfangx" creationdate="20191015T104556Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;char&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as a &lt;c0&gt;double&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104558Z" creationid="pingfangx" creationdate="20191015T104558Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as a &lt;c0&gt;float&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104558Z" creationid="pingfangx" creationdate="20191015T104558Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;float&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as a &lt;c0&gt;long&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104601Z" creationid="pingfangx" creationdate="20191015T104601Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;long&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as a &lt;c0&gt;short&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104602Z" creationid="pingfangx" creationdate="20191015T104602Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;short&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of a field as an &lt;c0&gt;int&lt;/c0&gt; on the specified object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104559Z" creationid="pingfangx" creationdate="20191015T104559Z">
        <seg>将字段的值设置为指定对象上的一个 &lt;c0&gt;int&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;boolean&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103454Z" creationid="pingfangx" creationdate="20191015T103454Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;boolean&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;byte&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103455Z" creationid="pingfangx" creationdate="20191015T103455Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;byte&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;char&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103457Z" creationid="pingfangx" creationdate="20191015T103457Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;char&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103458Z" creationid="pingfangx" creationdate="20191015T103458Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;float&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103459Z" creationid="pingfangx" creationdate="20191015T103459Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;float&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;int&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103502Z" creationid="pingfangx" creationdate="20191015T103502Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;int&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;long&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103504Z" creationid="pingfangx" creationdate="20191015T103504Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;long&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified &lt;c0&gt;short&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103507Z" creationid="pingfangx" creationdate="20191015T103507Z">
        <seg>将指定数组对象中索引组件的值设置为指定的 &lt;c0&gt;short&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of the indexed component of the specified array object to the specified new value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103453Z" creationid="pingfangx" creationdate="20191015T103453Z">
        <seg>将指定数组对象中索引组件的值设置为指定的新值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets this process builder's &lt;c0&gt;redirectErrorStream&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075927Z" creationid="pingfangx" creationdate="20191014T075927Z">
        <seg>设置此进程生成器的 &lt;c0&gt;redirectErrorStream&lt;/c0&gt; 属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets this process builder's operating system program and arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075911Z" creationid="pingfangx" creationdate="20191014T075911Z">
        <seg>设置此进程生成器的操作系统程序和参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets this process builder's working directory.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075918Z" creationid="pingfangx" creationdate="20191014T075918Z">
        <seg>设置此进程生成器的工作目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Setting the &lt;c0&gt;accessible&lt;/c0&gt; flag in a reflected object permits sophisticated applications with sufficient privilege, such as Java Object Serialization or other persistence mechanisms, to manipulate objects in a manner that would normally be prohibited.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090455Z" creationid="pingfangx" creationdate="20191015T090455Z">
        <seg>在反射对象中设置 &lt;c0&gt;accessible&lt;/c0&gt; 标志允许具有足够特权的复杂应用程序（比如 Java Object Serialization 或其他持久性机制）以某种通常禁止使用的方式来操作对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts between resizing and treeification thresholds.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082557Z" creationid="pingfangx" creationdate="20191026T082557Z">
        <seg>应该至少为 4 * TREEIFY_THRESHOLD 以避免调整大小和树化阈值之间的冲突。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Should be less than TREEIFY_THRESHOLD, and at most 6 to mesh with shrinkage detection under removal.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082521Z" creationid="pingfangx" creationdate="20191026T082521Z">
        <seg>应该小于 TREEIFY_THRESHOLD ，并且最大为6，以吻合移除期间的收缩检测。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that a malformed string in &lt;a0&gt;modified UTF-8&lt;/a0&gt; format has been read in a data input stream or by any class that implements the data input interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065627Z" creationid="pingfangx" creationdate="20191011T065627Z">
        <seg>在数据输入流中或由实现该数据输入接口的任何类中以 &lt;a0&gt;modified UTF-8&lt;/a0&gt; 格式读取错误字符串时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that a method has been invoked at an illegal or inappropriate time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073021Z" creationid="pingfangx" creationdate="20191012T073021Z">
        <seg>在非法或不适当的时间调用方法时产生的信号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that a resource is missing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050434Z" creationid="pingfangx" creationdate="20191012T050434Z">
        <seg>缺少资源时抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that a sync operation has failed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065529Z" creationid="pingfangx" creationdate="20191011T065529Z">
        <seg>当 sync 操作失败时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that a timeout has occurred on a socket read or accept.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083537Z" creationid="pingfangx" creationdate="20191011T083537Z">
        <seg>如果在读取或接受套接字时发生超时，则抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an I/O exception of some sort has occurred.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065508Z" creationid="pingfangx" creationdate="20191011T065508Z">
        <seg>当发生某种 I/O 异常时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an I/O operation has been interrupted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065500Z" creationid="pingfangx" creationdate="20191011T065500Z">
        <seg>I/O 操作已中断信号，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an ICMP Port Unreachable message has been received on a connected datagram.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083438Z" creationid="pingfangx" creationdate="20191011T083438Z">
        <seg>在连接的数据报上已接收到 ICMP Port Unreachable 消息时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an attempt to open the file denoted by a specified pathname has failed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065448Z" creationid="pingfangx" creationdate="20191011T065448Z">
        <seg>当试图打开指定路径名表示的文件失败时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an end of file or end of stream has been reached unexpectedly during input.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065438Z" creationid="pingfangx" creationdate="20191011T065438Z">
        <seg>当输入过程中意外到达文件或流的末尾时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an error has been reached unexpectedly while parsing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033654Z" creationid="pingfangx" creationdate="20191012T033654Z">
        <seg>表示解析时出现意外错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an error occurred while attempting to bind a socket to a local address and port.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083431Z" creationid="pingfangx" creationdate="20191011T083431Z">
        <seg>试图将套接字绑定到本地地址和端口时发生错误的情况下，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an error occurred while attempting to connect a socket to a remote address and port.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083432Z" creationid="pingfangx" creationdate="20191011T083432Z">
        <seg>试图将套接字连接到远程地址和端口时发生错误的情况下，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that an unexpected exception has occurred in a static initializer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073217Z" creationid="pingfangx" creationdate="20191012T073217Z">
        <seg>静态初始化程序中发生意外异常的信号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that one of the ObjectStreamExceptions was thrown during a write operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065629Z" creationid="pingfangx" creationdate="20191011T065629Z">
        <seg>在写入操作过程中抛出 ObjectStreamException 之一的信号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signals that the class doesn't have a field of a specified name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073037Z" creationid="pingfangx" creationdate="20191012T073037Z">
        <seg>类不包含指定名称的字段时产生的信号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SignedObject is a class for the purpose of creating authentic runtime objects whose integrity cannot be compromised without being detected.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032531Z" creationid="pingfangx" creationdate="20191012T032531Z">
        <seg>SignedObject 是一个用来创建实际运行时对象的类，在检测不到这些对象的情况下，其完整性不会遭受损害。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly for &lt;c3&gt;Callables&lt;/c3&gt; submitted to an &lt;c4&gt;ExecutorService&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113604Z" creationid="pingfangx" creationdate="20191025T113604Z">
        <seg>同样适用于向 &lt;c3&gt;ExecutorService&lt;/c3&gt; 提交 &lt;c4&gt;Callables&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, attempting to read an enum-valued member will result in a &lt;c0&gt;&lt;a1&gt;EnumConstantNotPresentException&lt;/a1&gt;&lt;/c0&gt; if the enum constant in the annotation is no longer present in the enum type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161050Z" creationid="pingfangx" creationdate="20191014T161050Z">
        <seg>类似地，如果注释中的枚举常量不再以枚举类型存在，那么试图读取一个已赋值的枚举成员将导致一个 &lt;c0&gt;&lt;a1&gt;EnumConstantNotPresentException&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, only this class or one of its subclasses can be the argument type in a &lt;c2&gt;catch&lt;/c2&gt; clause.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113145Z" creationid="pingfangx" creationdate="20191013T113145Z">
        <seg>类似地，只有此类或其子类之一才可以是 &lt;c2&gt;catch&lt;/c2&gt; 子句中的参数类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since a proxy class implements all of the interfaces specified at its creation, invoking &lt;c0&gt;getInterfaces&lt;/c0&gt; on its &lt;c1&gt;Class&lt;/c1&gt; object will return an array containing the same list of interfaces (in the order specified at its creation), invoking &lt;c2&gt;getMethods&lt;/c2&gt; on its &lt;c3&gt;Class&lt;/c3&gt; object will return an array of &lt;c4&gt;Method&lt;/c4&gt; objects that include all of the methods in those interfaces, and invoking &lt;c5&gt;getMethod&lt;/c5&gt; will find methods in the proxy interfaces as would be expected.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112454Z" creationid="pingfangx" creationdate="20191015T112454Z">
        <seg>由于代理类将实现所有在其创建时指定的接口，所以对其 &lt;c0&gt;Class&lt;/c0&gt; 对象调用 &lt;c1&gt;getInterfaces&lt;/c1&gt; 将返回一个包含相同接口列表的数组（按其创建时指定的顺序），对其 &lt;c2&gt;Class&lt;/c2&gt; 对象调用 &lt;c3&gt;getMethods&lt;/c3&gt; 将返回一个包括这些接口中所有方法的 &lt;c4&gt;Method&lt;/c4&gt; 对象的数组，并且调用 &lt;c5&gt;getMethod&lt;/c5&gt; 将会在代理接口中找到期望的一些方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the external format of environment variable names and values is system-dependent, there may not be a one-to-one mapping between them and Java's Unicode strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080052Z" creationid="pingfangx" creationdate="20191014T080052Z">
        <seg>由于环境变量名和值的外部格式取决于系统，在它们与 Java 的 Unicode 字符串之间不可能是一对一映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since this interface may be implemented by existing classes with different styles of error handling there is no guarantee that errors will be propagated to the invoker.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101412Z" creationid="pingfangx" creationdate="20191014T101412Z">
        <seg>由于此接口可能由具有不同的错误处理风格的现有类实现，所以无法保证错误不会传播给调用者。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Size the table using given load factor only if within</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095640Z" creationid="pingfangx" creationdate="20191026T095526Z">
        <seg>设置表的大小，仅当在给定的加载因子在</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So instead we swap the tree linkages.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100817Z" creationid="pingfangx" creationdate="20191026T100817Z">
        <seg>所以相反，我们交换树链接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So we apply a transform that spreads the impact of higher bits downward.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082939Z" creationid="pingfangx" creationdate="20191026T082939Z">
        <seg>所以我们应用一个转换，将高位的影响向下扩展。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, while it is possible to create an URI with any kind of protocol scheme (e.g. &lt;c0&gt;myproto://myhost.mydomain/resource/&lt;/c0&gt;), a similar URL will try to instantiate the handler for the specified protocol; if it doesn't exist an exception will be thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082858Z" creationid="pingfangx" creationdate="20191011T082858Z">
        <seg>因此，尽管可能利用任何种类的协议方案（例如，&lt;c0&gt;myproto://myhost.mydomain/resource/&lt;/c0&gt;）创建 URI，但类似的 URL 仍将试图实例化指定协议的处理程序；如果指定协议的处理程序不存在，则抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sockets</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080456Z" creationid="pingfangx" creationdate="20191011T080456Z">
        <seg>套接字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sockets are means to establish a communication link between machines over the network.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080458Z" creationid="pingfangx" creationdate="20191011T080458Z">
        <seg>套接字是在网络上建立机器之间的通信链接的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Soft and weak references are automatically cleared by the collector before being added to the queues with which they are registered, if any.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090533Z" creationid="pingfangx" creationdate="20191012T090533Z">
        <seg>在将软引用和弱引用添加到向其注册的队列（如果有）之前，回收器将自动清除这些引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090715Z" creationid="pingfangx" creationdate="20191012T090715Z">
        <seg>软引用对象，在响应内存需要时，由垃圾回收器决定是否清除此对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Soft references are for implementing memory-sensitive caches, weak references are for implementing canonicalizing mappings that do not prevent their keys (or values) from being reclaimed, and phantom references are for scheduling pre-mortem cleanup actions in a more flexible way than is possible with the Java finalization mechanism.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085603Z" creationid="pingfangx" creationdate="20191012T085603Z">
        <seg>软引用适用于实现内存敏感的缓存，弱引用适用于实现无法防止其键（或值）被回收的规范化映射，而虚引用则适用于以某种比 Java 终结机制更灵活的方式调度 pre-mortem 清除操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sole constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094025Z" creationid="pingfangx" creationdate="20191014T094025Z">
        <seg>单独的构造方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some implementations may use &lt;t0&gt;null&lt;/t0&gt; to represent the bootstrap class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073554Z" creationid="pingfangx" creationdate="20191014T073554Z">
        <seg>有些实现可能使用 &lt;t0&gt;null&lt;/t0&gt; 来表示引导类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some other thread &lt;a0&gt;interrupts&lt;/a0&gt;&lt;/a1&gt; thread &lt;v2&gt;T&lt;/v2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133817Z" creationid="pingfangx" creationdate="20191014T133817Z">
        <seg>其他某个线程&lt;a0&gt;中断&lt;/a0&gt;&lt;/a1&gt;线程 &lt;v2&gt;T&lt;/v2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some other thread invokes the &lt;c0&gt;notify&lt;/c0&gt; method for this object and thread &lt;v1&gt;T&lt;/v1&gt; happens to be arbitrarily chosen as the thread to be awakened.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133805Z" creationid="pingfangx" creationdate="20191014T133805Z">
        <seg>其他某个线程调用此对象的 &lt;c0&gt;notify&lt;/c0&gt; 方法，并且线程 &lt;v1&gt;T&lt;/v1&gt; 碰巧被任选为被唤醒的线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some other thread invokes the &lt;c0&gt;notifyAll&lt;/c0&gt; method for this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133811Z" creationid="pingfangx" creationdate="20191014T133811Z">
        <seg>其他某个线程调用此对象的 &lt;c0&gt;notifyAll&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some time after the garbage collector determines that the reachability of the referent has changed to the value corresponding to the type of the reference, it will add the reference to the associated queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085800Z" creationid="pingfangx" creationdate="20191012T085800Z">
        <seg>在垃圾回收器确定引用的可到达性已经更改为对应于引用类型的值之后的某一时间，它会将引用添加到相关的队列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T090746Z" creationid="pingfangx" creationdate="20191014T090746Z">
        <seg>某些虚拟机在某些情况下可能会从堆栈跟踪中省略一个或多个堆栈帧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specification version numbers use a syntax that consists of nonnegative decimal integers separated by periods ".", for example "2.0" or "1.2.3.4.5.6.7".</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095110Z" creationid="pingfangx" creationdate="20191014T094858Z">
        <seg>规范的版本号使用了一个由句点 "." 分隔的十进制正整数组成的语法，例如 "2.0" 或 "1.2.3.4.5.6.7"。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifies the rounding behavior for operations whose results cannot be represented exactly.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T070718Z" creationid="pingfangx" creationdate="20191011T070718Z">
        <seg>指定其结果不能精确表示的操作的舍入行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splits nodes in a tree bin into lower and upper tree bins, or untreeifies if now too small.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100938Z" creationid="pingfangx" creationdate="20191026T100938Z">
        <seg>将树形结构中的节点拆分为较低和较高的树形结构，或者如果现在太小，则将结果拆分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splits this string around matches of the given &lt;a0&gt;regular expression&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030051Z" creationid="pingfangx" creationdate="20191014T030051Z">
        <seg>根据匹配给定的&lt;a0&gt;正则表达式&lt;/a0&gt;来拆分此字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standardized representation for serialized Key objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032259Z" creationid="pingfangx" creationdate="20191012T032259Z">
        <seg>已序列化的 Key 对象的标准表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting a new process which uses the default working directory and environment is easy:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075853Z" creationid="pingfangx" creationdate="20191014T075853Z">
        <seg>很容易启动一个使用默认工作目录和环境的新进程：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting an operating system process is highly system-dependent.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080221Z" creationid="pingfangx" creationdate="20191014T080221Z">
        <seg>启动操作系统进程的方式完全取决于系统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts a core thread, causing it to idly wait for work.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130232Z" creationid="pingfangx" creationdate="20191025T130232Z">
        <seg>启动核心线程，使其处于等待工作的空闲状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts a new process using the attributes of this process builder.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075930Z" creationid="pingfangx" creationdate="20191014T075930Z">
        <seg>使用此进程生成器的属性启动一个新进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts all core threads, causing them to idly wait for work.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130230Z" creationid="pingfangx" creationdate="20191025T130230Z">
        <seg>启动所有核心线程，使其处于等待工作的空闲状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Static classes and methods for operating on or creating instances of &lt;c0&gt;&lt;a1&gt;Spliterator&lt;/a1&gt;&lt;/c0&gt; and its primitive specializations &lt;c2&gt;&lt;a3&gt;Spliterator.OfInt&lt;/a3&gt;&lt;/c2&gt;, &lt;c4&gt;&lt;a5&gt;Spliterator.OfLong&lt;/a5&gt;&lt;/c4&gt;, and &lt;c6&gt;&lt;a7&gt;Spliterator.OfDouble&lt;/a7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050903Z" creationid="pingfangx" creationdate="20191012T050903Z">
        <seg>用于操作或创建 &lt;c0&gt;&lt;a1&gt;Spliterator&lt;/a1&gt;&lt;/c0&gt; 实例的静态类和方法，以及它的基本类型用的 &lt;c2&gt;&lt;a3&gt;Spliterator.OfInt&lt;/a3&gt;&lt;/c2&gt;、&lt;c4&gt;&lt;a5&gt;Spliterator.OfLong&lt;/a5&gt;&lt;/c4&gt; 和 &lt;c6&gt;&lt;a7&gt;Spliterator.OfDouble&lt;/a7&gt;&lt;/c6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stopping a thread with Thread.stop causes it to unlock all of the monitors that it has locked (as a natural consequence of the unchecked &lt;c0&gt;ThreadDeath&lt;/c0&gt; exception propagating up the stack).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082821Z" creationid="pingfangx" creationdate="20191014T082821Z">
        <seg>使用 Thread.stop 停止线程会导致它解锁它锁定的所有监视器(这是非检查型 &lt;c0&gt;ThreadDeath&lt;/c0&gt; 异常向上传播的自然结果)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String buffers are safe for use by multiple threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063824Z" creationid="pingfangx" creationdate="20191014T063824Z">
        <seg>可将字符串缓冲区安全地用于多个线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String buffers support mutable strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T020931Z" creationid="pingfangx" creationdate="20191014T020931Z">
        <seg>字符串缓冲区支持可变的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String concatenation is implemented through the &lt;c0&gt;StringBuilder&lt;/c0&gt;(or &lt;c1&gt;StringBuffer&lt;/c1&gt;) class and its &lt;c2&gt;append&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T021119Z" creationid="pingfangx" creationdate="20191014T021119Z">
        <seg>字符串串联是通过 &lt;c0&gt;StringBuilder&lt;/c0&gt;（或 &lt;c1&gt;StringBuffer&lt;/c1&gt;）类及其 &lt;c2&gt;append&lt;/c2&gt; 方法实现的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String conversions are implemented through the method &lt;c3&gt;toString&lt;/c3&gt;, defined by &lt;c4&gt;Object&lt;/c4&gt; and inherited by all classes in Java.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T021147Z" creationid="pingfangx" creationdate="20191014T021147Z">
        <seg>字符串转换是通过 &lt;c3&gt;toString&lt;/c3&gt; 方法实现的，该方法由 &lt;c4&gt;Object&lt;/c4&gt; 类定义，并可被 Java 中的所有类继承。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings are constant; their values cannot be changed after they are created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T020926Z" creationid="pingfangx" creationdate="20191014T020926Z">
        <seg>字符串是常量；它们的值在创建之后不能更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strong bidirectional character type "AL" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143938Z" creationid="pingfangx" creationdate="20191013T143938Z">
        <seg>Unicode 规范中的强双向字符类型“AL”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strong bidirectional character type "L" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143931Z" creationid="pingfangx" creationdate="20191013T143931Z">
        <seg>Unicode 规范中的强双向字符类型“L”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strong bidirectional character type "LRE" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143932Z" creationid="pingfangx" creationdate="20191013T143932Z">
        <seg>Unicode 规范中的强双向字符类型“LRE”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strong bidirectional character type "LRO" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143933Z" creationid="pingfangx" creationdate="20191013T143933Z">
        <seg>Unicode 规范中的强双向字符类型“LRO”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strong bidirectional character type "R" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143937Z" creationid="pingfangx" creationdate="20191013T143937Z">
        <seg>Unicode 规范中的强双向字符类型“R”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strong bidirectional character type "RLE" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143939Z" creationid="pingfangx" creationdate="20191013T143939Z">
        <seg>Unicode 规范中的强双向字符类型“RLE”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strong bidirectional character type "RLO" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143940Z" creationid="pingfangx" creationdate="20191013T143940Z">
        <seg>Unicode 规范中的强双向字符类型“RLO”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses of &lt;c0&gt;LinkageError&lt;/c0&gt; indicate that a class has some dependency on another class; however, the latter class has incompatibly changed after the compilation of the former class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073225Z" creationid="pingfangx" creationdate="20191012T073225Z">
        <seg>&lt;c0&gt;LinkageError&lt;/c0&gt; 的子类指示一个类在一定程度上依赖于另一个类；但是，在编译前一个类之后，后一个类发生了不相容的改变。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses of &lt;c0&gt;Number&lt;/c0&gt; must provide methods to convert the represented numeric value to &lt;c1&gt;byte&lt;/c1&gt;, &lt;c2&gt;double&lt;/c2&gt;, &lt;c3&gt;float&lt;/c3&gt;, &lt;c4&gt;int&lt;/c4&gt;, &lt;c5&gt;long&lt;/c5&gt;, and &lt;c6&gt;short&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120906Z" creationid="pingfangx" creationdate="20191013T120906Z">
        <seg>&lt;c0&gt;Number&lt;/c0&gt; 的子类必须提供将表示的数值转换为 &lt;c1&gt;byte&lt;/c1&gt;、&lt;c2&gt;double&lt;/c2&gt;、&lt;c3&gt;float&lt;/c3&gt;、&lt;c4&gt;int&lt;/c4&gt;、&lt;c5&gt;long&lt;/c5&gt; 和 &lt;c6&gt;short&lt;/c6&gt; 的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses of &lt;c0&gt;Thread&lt;/c0&gt; should override this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085027Z" creationid="pingfangx" creationdate="20191014T085027Z">
        <seg>&lt;c0&gt;Thread&lt;/c0&gt; 的子类应该重写该方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses of &lt;c2&gt;Object&lt;/c2&gt; may override this definition.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140205Z" creationid="pingfangx" creationdate="20191014T140205Z">
        <seg>&lt;c2&gt;Object&lt;/c2&gt; 的子类可以重写此定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses of &lt;c2&gt;Throwable&lt;/c2&gt; represent errors and exceptions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T063120Z" creationid="pingfangx" creationdate="20191012T063024Z">
        <seg>&lt;c2&gt;Throwable&lt;/c2&gt; 的子类表示错误和异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Submits a Runnable task for execution and returns a Future representing that task.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130555Z" creationid="pingfangx" creationdate="20191025T130555Z">
        <seg>提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Submits a value-returning task for execution and returns a Future representing the pending results of the task.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130553Z" creationid="pingfangx" creationdate="20191025T130553Z">
        <seg>提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subprocesses subsequently started by this object's &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; method will use this as their working directory.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080011Z" creationid="pingfangx" creationdate="20191014T080011Z">
        <seg>由此对象的 &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; 方法启动的后续子进程将使用此目录作为它们的工作目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subprocesses subsequently started by this object's &lt;c2&gt;&lt;a3&gt;start()&lt;/a3&gt;&lt;/c2&gt; method will use this map as their environment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080041Z" creationid="pingfangx" creationdate="20191014T080041Z">
        <seg>由此对象的 &lt;c2&gt;&lt;a3&gt;start()&lt;/a3&gt;&lt;/c2&gt; 方法启动的后续子进程将使用这一映射作为它们的环境。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subsequent changes to this sequence do not affect the contents of the &lt;c2&gt;String&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041729Z" creationid="pingfangx" creationdate="20191014T041729Z">
        <seg>对此序列的后续更改不影响该 &lt;c2&gt;String&lt;/c2&gt; 的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subsequent modifications to this process builder will not affect the returned &lt;c0&gt;&lt;a1&gt;Process&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080237Z" creationid="pingfangx" creationdate="20191014T080237Z">
        <seg>针对此进程生成器的后续修改将不会影响返回的 &lt;c0&gt;&lt;a1&gt;Process&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subsequent updates to the list will be reflected in the state of the process builder.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075949Z" creationid="pingfangx" creationdate="20191014T075949Z">
        <seg>后续列表更新将在进程生成器的状态中反映出来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subsequent updates to the list will be reflected in the state of this process builder.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075959Z" creationid="pingfangx" creationdate="20191014T075959Z">
        <seg>后续列表更新将在此进程生成器的状态中反映出来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such deadlocks typically manifest themselves as "frozen" processes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081921Z" creationid="pingfangx" creationdate="20191014T081921Z">
        <seg>这类死锁通常会证明它们自己是“冻结”的进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such higher-performance implementations still must conform to the specification for &lt;c3&gt;Math&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151213Z" creationid="pingfangx" creationdate="20191013T151213Z">
        <seg>这种更高性能的实现仍然必须遵守 &lt;c3&gt;Math&lt;/c3&gt; 的规范。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Superclass of all exceptions specific to Object Stream classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065521Z" creationid="pingfangx" creationdate="20191011T065521Z">
        <seg>特定于 Object Stream 类的所有异常的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose that the garbage collector determines at a certain point in time that an object is &lt;a0&gt;softly reachable&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155640Z" creationid="pingfangx" creationdate="20191014T155640Z">
        <seg>假定垃圾回收器确定在某一时间点某个对象是&lt;a0&gt;软可到达对象&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose that the garbage collector determines at a certain point in time that an object is &lt;a0&gt;weakly reachable&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160121Z" creationid="pingfangx" creationdate="20191014T160121Z">
        <seg>假定垃圾回收器确定在某一时间点上某个对象是&lt;a0&gt;弱可到达对象&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose the internals of the &lt;c3&gt;add&lt;/c3&gt; method can throw an &lt;c4&gt;&lt;a5&gt;IOException&lt;/a5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113335Z" creationid="pingfangx" creationdate="20191013T113335Z">
        <seg>假定 &lt;c3&gt;add&lt;/c3&gt; 方法的内部可以抛出 &lt;c4&gt;&lt;a5&gt;IOException&lt;/a5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Synchronizers</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111425Z" creationid="pingfangx" creationdate="20191025T111425Z">
        <seg>同步器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Taking the length of &lt;c0&gt;null&lt;/c0&gt; as if it were an array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104832Z" creationid="pingfangx" creationdate="20191014T104832Z">
        <seg>将 &lt;c0&gt;null&lt;/c0&gt; 作为一个数组，获得其长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tells whether or not this reference object has been enqueued, either by the program or by the garbage collector.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154753Z" creationid="pingfangx" creationdate="20191014T154753Z">
        <seg>由程序或垃圾回收器通知是否已将此引用对象加入队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tells whether or not this string matches the given &lt;a0&gt;regular expression&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030019Z" creationid="pingfangx" creationdate="20191014T030019Z">
        <seg>告知此字符串是否匹配给定的&lt;a0&gt;正则表达式&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tells whether this process builder merges standard error and standard output.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075923Z" creationid="pingfangx" creationdate="20191014T075923Z">
        <seg>通知进程生成器是否合并标准错误和标准输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Terminates the currently running Java Virtual Machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154233Z" creationid="pingfangx" creationdate="20191013T154233Z">
        <seg>终止当前正在运行的 Java 虚拟机。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Terminates the currently running Java virtual machine by initiating its shutdown sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153541Z" creationid="pingfangx" creationdate="20191013T153541Z">
        <seg>通过启动虚拟机的关闭序列，终止当前正在运行的 Java 虚拟机。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if the substring of this string beginning at the specified index starts with the specified prefix.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030059Z" creationid="pingfangx" creationdate="20191014T030059Z">
        <seg>测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if this string ends with the specified suffix.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024419Z" creationid="pingfangx" creationdate="20191014T024419Z">
        <seg>测试此字符串是否以指定的后缀结束。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if this string starts with the specified prefix.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030055Z" creationid="pingfangx" creationdate="20191014T030055Z">
        <seg>测试此字符串是否以指定的前缀开始。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if this thread group has been destroyed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093220Z" creationid="pingfangx" creationdate="20191014T093220Z">
        <seg>测试此线程组是否已经被销毁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if this thread group is a daemon thread group.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093219Z" creationid="pingfangx" creationdate="20191014T093219Z">
        <seg>测试此线程组是否为一个后台程序线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if this thread group is either the thread group argument or one of its ancestor thread groups.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093223Z" creationid="pingfangx" creationdate="20191014T093223Z">
        <seg>测试此线程组是否为线程组参数或其祖先线程组之一。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if this thread is a daemon thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082024Z" creationid="pingfangx" creationdate="20191014T082024Z">
        <seg>测试该线程是否为守护线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if this thread is alive.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082023Z" creationid="pingfangx" creationdate="20191014T082023Z">
        <seg>测试线程是否处于活动状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests if two string regions are equal.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030027Z" creationid="pingfangx" creationdate="20191014T030027Z">
        <seg>测试两个字符串区域是否相等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests whether the current thread has been interrupted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082022Z" creationid="pingfangx" creationdate="20191014T082022Z">
        <seg>测试当前线程是否已经中断。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests whether this thread has been interrupted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082025Z" creationid="pingfangx" creationdate="20191014T082025Z">
        <seg>测试线程是否已经中断。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That class then implements the &lt;c1&gt;run&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081124Z" creationid="pingfangx" creationdate="20191014T081124Z">
        <seg>该类然后实现 &lt;c1&gt;run&lt;/c1&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, &lt;c2&gt;Error&lt;/c2&gt; and its subclasses are regarded as unchecked exceptions for the purposes of compile-time checking of exceptions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115646Z" creationid="pingfangx" creationdate="20191013T115646Z">
        <seg>即，&lt;c2&gt;Error&lt;/c2&gt; 和它的子类被认为是用于编译时异常的检查目的非检查型异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, a queue does not keep track of the references that are registered with it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090232Z" creationid="pingfangx" creationdate="20191012T090232Z">
        <seg>也就是说，队列不会追踪那些向它注册的引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "Concurrent" prefix used with some classes in this package is a shorthand indicating several differences from similar "synchronized" classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112101Z" creationid="pingfangx" creationdate="20191025T112101Z">
        <seg>此包中与某些类一起使用的 "Concurrent" 前缀是一种简写，表明与类似的“synchronized”类有所不同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "standard" error output stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153957Z" creationid="pingfangx" creationdate="20191013T153957Z">
        <seg>“标准”错误输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "standard" input stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153959Z" creationid="pingfangx" creationdate="20191013T153959Z">
        <seg>“标准”输入流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "standard" output stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154000Z" creationid="pingfangx" creationdate="20191013T154000Z">
        <seg>“标准”输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "target exception" that is provided at construction time and accessed via the &lt;c0&gt;&lt;a1&gt;getTargetException()&lt;/a1&gt;&lt;/c0&gt; method is now known as the &lt;i2&gt;cause&lt;/i2&gt;, and may be accessed via the &lt;c3&gt;&lt;a4&gt;getCause()&lt;/a4&gt;&lt;/c3&gt; method, as well as the aforementioned "legacy method."</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110923Z" creationid="pingfangx" creationdate="20191015T110923Z">
        <seg>“目标异常”是在构造的时候提供的，可以通过 &lt;c0&gt;&lt;a1&gt;getTargetException()&lt;/a1&gt;&lt;/c0&gt; 方法访问，这类对象目前被认为是导致异常的&lt;i2&gt;原因&lt;/i2&gt;，可以通过 &lt;c3&gt;&lt;a4&gt;getCause()&lt;/a4&gt;&lt;/c3&gt; 方法以及前面提到的“遗留方法”访问它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "undeclared checked exception that was thrown by the invocation handler" that may be provided at construction time and accessed via the &lt;c0&gt;&lt;a1&gt;getUndeclaredThrowable()&lt;/a1&gt;&lt;/c0&gt; method is now known as the &lt;i2&gt;cause&lt;/i2&gt;, and may be accessed via the &lt;c3&gt;&lt;a4&gt;getCause()&lt;/a4&gt;&lt;/c3&gt; method, as well as the aforementioned "legacy method."</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111102Z" creationid="pingfangx" creationdate="20191015T111102Z">
        <seg>“由调用处理程序抛出的经过检查的未声明异常”可以在构造的时候提供，并且可以通过 &lt;c0&gt;&lt;a1&gt;getUndeclaredThrowable()&lt;/a1&gt;&lt;/c0&gt; 方法访问，这类对象目前被认为是导致异常的&lt;i2&gt;原因&lt;/i2&gt;，可以通过 &lt;c3&gt;&lt;a4&gt;getCause()&lt;/a4&gt;&lt;/c3&gt; 方法以及前面提到的“遗留方法”访问它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;a3&gt;#containsKey containsKey&lt;/a3&gt; operation may be used to distinguish these two cases.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090746Z" creationid="pingfangx" creationdate="20191026T090746Z">
        <seg>&lt;a3&gt;#containsKey containsKey&lt;/a3&gt; 操作可用于区分这两种情况。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt; TooManyListenersException &lt;/c0&gt; Exception is used as part of the Java Event model to annotate and implement a unicast special case of a multicast Event Source.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050447Z" creationid="pingfangx" creationdate="20191012T050447Z">
        <seg>&lt;c0&gt;TooManyListenersException&lt;/c0&gt; 异常用作 Java Event 模型的一部分来注释和实现多播 Event Source 的单播特例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;AbstractQueuedSynchronizer&lt;/a1&gt;&lt;/c0&gt; class serves as a useful superclass for defining locks and other synchronizers that rely on queuing blocked threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122852Z" creationid="pingfangx" creationdate="20191025T122852Z">
        <seg>&lt;c0&gt;&lt;a1&gt;AbstractQueuedSynchronizer&lt;/a1&gt;&lt;/c0&gt; 类是一个非常有用的超类，可用来定义锁以及依赖于排队阻塞线程的其他同步器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;AtomicIntegerArray&lt;/a1&gt;&lt;/c0&gt;, &lt;c2&gt;&lt;a3&gt;AtomicLongArray&lt;/a3&gt;&lt;/c2&gt;, and &lt;c4&gt;&lt;a5&gt;AtomicReferenceArray&lt;/a5&gt;&lt;/c4&gt; classes further extend atomic operation support to arrays of these types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121856Z" creationid="pingfangx" creationdate="20191025T121856Z">
        <seg>&lt;c0&gt;&lt;a1&gt;AtomicIntegerArray&lt;/a1&gt;&lt;/c0&gt;、&lt;c2&gt;&lt;a3&gt;AtomicLongArray&lt;/a3&gt;&lt;/c2&gt; 和 &lt;c4&gt;&lt;a5&gt;AtomicReferenceArray&lt;/a5&gt;&lt;/c4&gt; 类进一步扩展了原子操作，对这些类型的数组提供了支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;AtomicMarkableReference&lt;/a1&gt;&lt;/c0&gt; class associates a single boolean with a reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122152Z" creationid="pingfangx" creationdate="20191025T122152Z">
        <seg>&lt;c0&gt;&lt;a1&gt;AtomicMarkableReference&lt;/a1&gt;&lt;/c0&gt; 类将单个布尔值与引用关联起来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;BlockingDeque&lt;/a1&gt;&lt;/c0&gt; interface extends &lt;c2&gt;BlockingQueue&lt;/c2&gt; to support both FIFO and LIFO (stack-based) operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111315Z" creationid="pingfangx" creationdate="20191025T111315Z">
        <seg>&lt;c0&gt;&lt;a1&gt;BlockingDeque&lt;/a1&gt;&lt;/c0&gt; 接口扩展 &lt;c2&gt;BlockingQueue&lt;/c2&gt;，以支持 FIFO 和 LIFO（基于堆栈）操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;ConcurrentLinkedQueue&lt;/a1&gt;&lt;/c0&gt; class supplies an efficient scalable thread-safe non-blocking FIFO queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110939Z" creationid="pingfangx" creationdate="20191025T110939Z">
        <seg>&lt;c0&gt;&lt;a1&gt;ConcurrentLinkedQueue&lt;/a1&gt;&lt;/c0&gt; 类提供了高效的、可伸缩的、线程安全的非阻塞 FIFO 队列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;Condition&lt;/a1&gt;&lt;/c0&gt; interface describes condition variables that may be associated with Locks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122830Z" creationid="pingfangx" creationdate="20191025T122830Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Condition&lt;/a1&gt;&lt;/c0&gt; 接口描述了可能会与锁有关联的条件变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;InetAddress&lt;/a1&gt;&lt;/c0&gt; class is the abstraction representing an IP (Internet Protocol) address.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T075223Z" creationid="pingfangx" creationdate="20191011T075223Z">
        <seg>&lt;c0&gt;&lt;a1&gt;InetAddress&lt;/a1&gt;&lt;/c0&gt; 类是表示 IP（Internet 协议）地址的抽象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;Lock&lt;/a1&gt;&lt;/c0&gt; interface supports locking disciplines that differ in semantics (reentrant, fair, etc), and that can be used in non-block-structured contexts including hand-over-hand and lock reordering algorithms.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122749Z" creationid="pingfangx" creationdate="20191025T122749Z">
        <seg>&lt;c0&gt;&lt;a1&gt;Lock&lt;/a1&gt;&lt;/c0&gt; 接口支持那些语义不同（重入、公平等）的锁规则，可以在非阻塞式结构的上下文（包括 hand-over-hand 和锁重排算法）中使用这些规则。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;NetworkInterface&lt;/a1&gt;&lt;/c0&gt; class provides APIs to browse and query all the networking interfaces (e.g. ethernet connection or PPP endpoint) of the local machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080957Z" creationid="pingfangx" creationdate="20191011T080957Z">
        <seg>&lt;c0&gt;&lt;a1&gt;NetworkInterface&lt;/a1&gt;&lt;/c0&gt; 类提供 API 以浏览和查询本地机器的所有网络接口（例如，以太网连接或 PPP 端点）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;Proxy.isProxyClass&lt;/a1&gt;&lt;/c0&gt; method will return true if it is passed a proxy class-- a class returned by &lt;c2&gt;Proxy.getProxyClass&lt;/c2&gt; or the class of an object returned by &lt;c3&gt;Proxy.newProxyInstance&lt;/c3&gt;-- and false otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112508Z" creationid="pingfangx" creationdate="20191015T112508Z">
        <seg>如果 &lt;c0&gt;&lt;a1&gt;Proxy.isProxyClass&lt;/a1&gt;&lt;/c0&gt; 方法传递代理类（由 &lt;c2&gt;Proxy.getProxyClass&lt;/c2&gt; 返回的类，或由 &lt;c3&gt;Proxy.newProxyInstance&lt;/c3&gt; 返回的对象的类），则该方法返回 true，否则返回 false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;ReadWriteLock&lt;/a1&gt;&lt;/c0&gt; interface similarly defines locks that may be shared among readers but are exclusive to writers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122816Z" creationid="pingfangx" creationdate="20191025T122816Z">
        <seg>&lt;c0&gt;&lt;a1&gt;ReadWriteLock&lt;/a1&gt;&lt;/c0&gt; 接口以类似方式定义了一些读取者可以共享而写入者独占的锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;TimeUnit&lt;/a1&gt;&lt;/c0&gt; class provides multiple granularities (including nanoseconds) for specifying and controlling time-out based operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111352Z" creationid="pingfangx" creationdate="20191025T111352Z">
        <seg>&lt;c0&gt;&lt;a1&gt;TimeUnit&lt;/a1&gt;&lt;/c0&gt; 类为指定和控制基于超时的操作提供了多重粒度（包括纳秒级）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;getCause()&lt;/a1&gt;&lt;/c0&gt; method is now the preferred means of obtaining this information.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110953Z" creationid="pingfangx" creationdate="20191015T110953Z">
        <seg>&lt;c0&gt;&lt;a1&gt;getCause()&lt;/a1&gt;&lt;/c0&gt; 方法现在是获得此信息的首选方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;Runtime.exec&lt;/a3&gt;&lt;/c2&gt; methods create a native process and return an instance of a subclass of &lt;c4&gt;Process&lt;/c4&gt; that can be used to control the process and obtain information about it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071530Z" creationid="pingfangx" creationdate="20191012T071530Z">
        <seg>&lt;c0&gt;&lt;a1&gt;start()&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;Runtime.exec&lt;/a3&gt;&lt;/c2&gt; 方法创建一个本机进程，并返回 &lt;c4&gt;Process&lt;/c4&gt; 子类的一个实例，该实例可用来控制进程并获得相关信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;AlgorithmParameterGenerator&lt;/c0&gt; class is used to generate a set of parameters to be used with a certain algorithm.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152811Z" creationid="pingfangx" creationdate="20191011T152811Z">
        <seg>&lt;c0&gt;AlgorithmParameterGenerator&lt;/c0&gt; 类用于生成将在某个特定算法中使用的参数集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Array&lt;/c0&gt; class provides static methods to dynamically create and access Java arrays.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092053Z" creationid="pingfangx" creationdate="20191012T092053Z">
        <seg>&lt;c0&gt;Array&lt;/c0&gt; 类提供了动态创建和访问 Java 数组的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Boolean&lt;/c0&gt; object corresponding to the primitive value &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133243Z" creationid="pingfangx" creationdate="20191013T133243Z">
        <seg>对应基值 &lt;c0&gt;false&lt;/c0&gt; 的 &lt;c1&gt;Boolean&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Boolean&lt;/c0&gt; object corresponding to the primitive value &lt;c1&gt;true&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133244Z" creationid="pingfangx" creationdate="20191013T133244Z">
        <seg>对应基值 &lt;c0&gt;true&lt;/c0&gt; 的 &lt;c1&gt;Boolean&lt;/c1&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;BreakIterator&lt;/c0&gt; class implements methods for finding the location of boundaries in text.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033205Z" creationid="pingfangx" creationdate="20191012T033205Z">
        <seg>&lt;c0&gt;BreakIterator&lt;/c0&gt; 类实现用于查找文本中边界位置的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Byte&lt;/c0&gt; class wraps a value of primitive type &lt;c1&gt;byte&lt;/c1&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071214Z" creationid="pingfangx" creationdate="20191012T071214Z">
        <seg>&lt;c0&gt;Byte&lt;/c0&gt; 类将基本类型 &lt;c1&gt;byte&lt;/c1&gt; 的值包装在一个对象中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Calendar&lt;/c0&gt; class is an abstract class that provides methods for converting between a specific instant in time and a set of &lt;c1&gt;&lt;a2&gt;calendar fields&lt;/a2&gt;&lt;/c1&gt; such as &lt;c3&gt;YEAR&lt;/c3&gt;, &lt;c4&gt;MONTH&lt;/c4&gt;, &lt;c5&gt;DAY_OF_MONTH&lt;/c5&gt;, &lt;c6&gt;HOUR&lt;/c6&gt;, and so on, and for manipulating the calendar fields, such as getting the date of the next week.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045431Z" creationid="pingfangx" creationdate="20191012T045213Z">
        <seg>&lt;c0&gt;Calendar&lt;/c0&gt; 类是一个抽象类，它为特定瞬间与一组诸如 &lt;c3&gt;YEAR&lt;/c3&gt;, 、 &lt;c4&gt;MONTH&lt;/c4&gt; 、 &lt;c5&gt;DAY_OF_MONTH&lt;/c5&gt; 、 &lt;c6&gt;HOUR&lt;/c6&gt; 等 &lt;c1&gt;&lt;a2&gt;日历字段&lt;/a2&gt;&lt;/c1&gt; 之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Character&lt;/c0&gt; class wraps a value of the primitive type &lt;c1&gt;char&lt;/c1&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071216Z" creationid="pingfangx" creationdate="20191012T071216Z">
        <seg>&lt;c0&gt;Character&lt;/c0&gt; 类在对象中包装一个基本类型 &lt;c1&gt;char&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; instance representing the primitive type &lt;c1&gt;byte&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121352Z" creationid="pingfangx" creationdate="20191013T121352Z">
        <seg>表示基本类型 &lt;c0&gt;byte&lt;/c0&gt; 的 &lt;c1&gt;Class&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; instance representing the primitive type &lt;c1&gt;char&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144929Z" creationid="pingfangx" creationdate="20191013T144929Z">
        <seg>表示基本类型 &lt;c0&gt;char&lt;/c0&gt; 的 &lt;c1&gt;Class &lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; instance representing the primitive type &lt;c1&gt;double&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132618Z" creationid="pingfangx" creationdate="20191013T132618Z">
        <seg>表示基本类型 &lt;c0&gt;double&lt;/c0&gt; 的 &lt;c1&gt;Class&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; instance representing the primitive type &lt;c1&gt;float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132031Z" creationid="pingfangx" creationdate="20191013T132031Z">
        <seg>表示 &lt;c0&gt;float&lt;/c0&gt; 基本类型的 &lt;c1&gt;Class&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; instance representing the primitive type &lt;c1&gt;int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123258Z" creationid="pingfangx" creationdate="20191013T123258Z">
        <seg>表示基本类型 &lt;c0&gt;int&lt;/c0&gt; 的 &lt;c1&gt;Class&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; instance representing the primitive type &lt;c1&gt;long&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124918Z" creationid="pingfangx" creationdate="20191013T124918Z">
        <seg>表示基本类型 &lt;c0&gt;long&lt;/c0&gt; 的 &lt;c1&gt;Class&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; instance representing the primitive type &lt;c1&gt;short&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122027Z" creationid="pingfangx" creationdate="20191013T122027Z">
        <seg>表示基本类型 &lt;c0&gt;short&lt;/c0&gt; 的 &lt;c1&gt;Class&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Class&lt;/c0&gt; object representing the pseudo-type corresponding to the keyword &lt;c1&gt;void&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T134902Z" creationid="pingfangx" creationdate="20191013T134847Z">
        <seg>表示对应于关键字 &lt;c1&gt;void&lt;/c1&gt; 的伪类型的 &lt;c0&gt;Class&lt;/c0&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;CollationElementIterator&lt;/c0&gt; class is used as an iterator to walk through each character of an international string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033211Z" creationid="pingfangx" creationdate="20191012T033211Z">
        <seg>&lt;c0&gt;CollationElementIterator&lt;/c0&gt; 类用作一个迭代器，以遍历国际化字符串的每个字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Collator&lt;/c0&gt; class performs locale-sensitive &lt;c1&gt;String&lt;/c1&gt; comparison.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033229Z" creationid="pingfangx" creationdate="20191012T033229Z">
        <seg>&lt;c0&gt;Collator&lt;/c0&gt; 类执行区分语言环境的 &lt;c1&gt;String&lt;/c1&gt; 比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;DataInput&lt;/c0&gt; interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094025Z" creationid="pingfangx" creationdate="20191010T094025Z">
        <seg>&lt;c0&gt;DataInput&lt;/c0&gt; 接口用于从二进制流中读取字节，并根据所有 Java 基本类型数据进行重构。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;DataOutput&lt;/c0&gt; interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094031Z" creationid="pingfangx" creationdate="20191010T094031Z">
        <seg>&lt;c0&gt;DataOutput&lt;/c0&gt; 接口用于将数据从任意 Java 基本类型转换为一系列字节，并将这些字节写入二进制流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Dictionary&lt;/c0&gt; class is the abstract parent of any class, such as &lt;c1&gt;Hashtable&lt;/c1&gt;, which maps keys to values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045501Z" creationid="pingfangx" creationdate="20191012T045501Z">
        <seg>&lt;c0&gt;Dictionary&lt;/c0&gt; 类是任何可将键映射到相应值的类（如 &lt;c1&gt;Hashtable&lt;/c1&gt; ）的抽象父类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Double&lt;/c0&gt; class wraps a value of the primitive type &lt;c1&gt;double&lt;/c1&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071250Z" creationid="pingfangx" creationdate="20191012T071250Z">
        <seg>&lt;c0&gt;Double&lt;/c0&gt; 类在对象中包装一个基本类型 &lt;c1&gt;double&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Float&lt;/c0&gt; class wraps a value of primitive type &lt;c1&gt;float&lt;/c1&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071309Z" creationid="pingfangx" creationdate="20191012T071309Z">
        <seg>&lt;c0&gt;Float&lt;/c0&gt; 类在对象中包装一个基本类型 &lt;c1&gt;float&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;GeneralSecurityException&lt;/c0&gt; class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032605Z" creationid="pingfangx" creationdate="20191012T032605Z">
        <seg>&lt;c0&gt;GeneralSecurityException&lt;/c0&gt; 类是一个一般安全异常类，可以为所有从其扩展的与安全有关的异常类提供类型安全。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Integer&lt;/c0&gt; class wraps a value of the primitive type &lt;c1&gt;int&lt;/c1&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071410Z" creationid="pingfangx" creationdate="20191012T071410Z">
        <seg>&lt;c0&gt;Integer&lt;/c0&gt; 类在对象中包装了一个基本类型 &lt;c1&gt;int&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Long&lt;/c0&gt; class wraps a value of the primitive type &lt;c1&gt;long&lt;/c1&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071412Z" creationid="pingfangx" creationdate="20191012T071412Z">
        <seg>&lt;c0&gt;Long&lt;/c0&gt; 类在对象中包装了基本类型 &lt;c1&gt;long&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Properties&lt;/c0&gt; class represents a persistent set of properties.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050044Z" creationid="pingfangx" creationdate="20191012T050044Z">
        <seg>&lt;c0&gt;Properties&lt;/c0&gt; 类表示了一个持久的属性集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;RuleBasedCollator&lt;/c0&gt; class is a concrete subclass of &lt;c1&gt;Collator&lt;/c1&gt; that provides a simple, data-driven, table collator.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033446Z" creationid="pingfangx" creationdate="20191012T033446Z">
        <seg>&lt;c0&gt;RuleBasedCollator&lt;/c0&gt; 类是 &lt;c1&gt;Collator&lt;/c1&gt; 的具体子类，它提供了一个简单的、数据驱动的表 collator。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Runnable&lt;/c0&gt; interface should be implemented by any class whose instances are intended to be executed by a thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T070020Z" creationid="pingfangx" creationdate="20191012T070020Z">
        <seg>&lt;c0&gt;Runnable&lt;/c0&gt; 接口应该由那些打算通过某一线程执行其实例的类来实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Short&lt;/c0&gt; class wraps a value of primitive type &lt;c1&gt;short&lt;/c1&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071601Z" creationid="pingfangx" creationdate="20191012T071601Z">
        <seg>&lt;c0&gt;Short&lt;/c0&gt; 类在对象中包装基本类型 &lt;c1&gt;short&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Stack&lt;/c0&gt; class represents a last-in-first-out (LIFO) stack of objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050151Z" creationid="pingfangx" creationdate="20191012T050151Z">
        <seg>&lt;c0&gt;Stack&lt;/c0&gt; 类表示后进先出（LIFO）的对象堆栈。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;StreamTokenizer&lt;/c0&gt; class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102809Z" creationid="pingfangx" creationdate="20191010T102809Z">
        <seg>&lt;c0&gt;StreamTokenizer&lt;/c0&gt; 类获取输入流并将其解析为“标记”，允许一次读取一个标记。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;String&lt;/c0&gt; class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., &lt;c1&gt;char&lt;/c1&gt; values).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022402Z" creationid="pingfangx" creationdate="20191014T022402Z">
        <seg>&lt;c0&gt;String&lt;/c0&gt; 类提供处理 Unicode 代码点（即字符）和 Unicode 代码单元（即 &lt;c1&gt;char&lt;/c1&gt; 值）的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;String&lt;/c0&gt; class represents character strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071702Z" creationid="pingfangx" creationdate="20191012T071702Z">
        <seg>&lt;c0&gt;String&lt;/c0&gt; 类代表字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;System&lt;/c0&gt; class contains several useful class fields and methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071714Z" creationid="pingfangx" creationdate="20191012T071714Z">
        <seg>&lt;c0&gt;System&lt;/c0&gt; 类包含一些有用的类字段和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Throwable&lt;/c0&gt; class is the superclass of all errors and exceptions in the Java language.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071736Z" creationid="pingfangx" creationdate="20191012T071736Z">
        <seg>&lt;c0&gt;Throwable&lt;/c0&gt; 类是 Java 语言中所有错误或异常的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Vector&lt;/c0&gt; class implements a growable array of objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050229Z" creationid="pingfangx" creationdate="20191012T050229Z">
        <seg>&lt;c0&gt;Vector&lt;/c0&gt; 类可以实现可增长的对象数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;Void&lt;/c0&gt; class is an uninstantiable placeholder class to hold a reference to the &lt;c1&gt;Class&lt;/c1&gt; object representing the Java keyword void.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071825Z" creationid="pingfangx" creationdate="20191012T071825Z">
        <seg>&lt;c0&gt;Void&lt;/c0&gt; 类是一个不可实例化的占位符类，它持有对表示 Java 关键字 void 的 &lt;c1&gt;Class&lt;/c1&gt; 对象的引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;char&lt;/c0&gt; data type (and therefore the value that a &lt;c1&gt;Character&lt;/c1&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143045Z" creationid="pingfangx" creationdate="20191013T143045Z">
        <seg>&lt;c0&gt;char&lt;/c0&gt; 数据类型（和 &lt;c1&gt;Character&lt;/c1&gt; 对象封装的值）基于原始的 Unicode 规范，将字符定义为固定宽度的 16 位实体。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;compareAndSet&lt;/c0&gt; method is not a general replacement for locking.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122200Z" creationid="pingfangx" creationdate="20191025T122200Z">
        <seg>&lt;c0&gt;compareAndSet&lt;/c0&gt; 方法不是锁的常规替换方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;double&lt;/c0&gt; value that is closer than any other to &lt;i1&gt;e&lt;/i1&gt;, the base of the natural logarithms.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151359Z" creationid="pingfangx" creationdate="20191013T151359Z">
        <seg>比任何其他值都更接近 &lt;i1&gt;e&lt;/i1&gt;（即自然对数的底数）的 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;double&lt;/c0&gt; value that is closer than any other to &lt;i1&gt;pi&lt;/i1&gt;, the ratio of the circumference of a circle to its diameter.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151403Z" creationid="pingfangx" creationdate="20191013T151403Z">
        <seg>比任何其他值都更接近 &lt;i1&gt;pi&lt;/i1&gt;（即圆的周长与直径之比）的 &lt;c0&gt;double&lt;/c0&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;dstOffset&lt;/c0&gt; argument must be greater than or equal to &lt;c1&gt;0&lt;/c1&gt;, and less than or equal to the length of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063103Z" creationid="pingfangx" creationdate="20191014T063103Z">
        <seg>&lt;c0&gt;dstOffset&lt;/c0&gt; 参数必须大于等于 &lt;c1&gt;0&lt;/c1&gt;，且小于等于此序列的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;equals&lt;/c0&gt; method for class &lt;c1&gt;Object&lt;/c1&gt; implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values &lt;c2&gt;x&lt;/c2&gt; and &lt;c3&gt;y&lt;/c3&gt;, this method returns &lt;c4&gt;true&lt;/c4&gt; if and only if &lt;c5&gt;x&lt;/c5&gt; and &lt;c6&gt;y&lt;/c6&gt; refer to the same object (&lt;c7&gt;x == y&lt;/c7&gt; has the value &lt;c8&gt;true&lt;/c8&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130801Z" creationid="pingfangx" creationdate="20191014T130801Z">
        <seg>&lt;c0&gt;Object&lt;/c0&gt; 类的 &lt;c1&gt;equals&lt;/c1&gt; 方法实现对象上差别可能性最大的相等关系；即，对于任何非空引用值 &lt;c2&gt;x&lt;/c2&gt; 和 &lt;c3&gt;y&lt;/c3&gt;，当且仅当 &lt;c4&gt;x&lt;/c4&gt; 和 &lt;c5&gt;y&lt;/c5&gt; 引用同一个对象时，此方法才返回 &lt;c6&gt;true&lt;/c6&gt;（&lt;c7&gt;x == y&lt;/c7&gt; 具有值 &lt;c8&gt;true&lt;/c8&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;equals&lt;/c0&gt; method implements an equivalence relation on non-null object references:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T130059Z" creationid="pingfangx" creationdate="20191014T130059Z">
        <seg>&lt;c0&gt;equals&lt;/c0&gt; 方法在非空对象引用上实现相等关系：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;exit&lt;/c0&gt; method of class &lt;c1&gt;Runtime&lt;/c1&gt; has been called and the security manager has permitted the exit operation to take place.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081016Z" creationid="pingfangx" creationdate="20191014T081016Z">
        <seg>调用了 &lt;c0&gt;Runtime&lt;/c0&gt; 类的 &lt;c1&gt;exit&lt;/c1&gt; 方法，并且安全管理器允许退出操作发生。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;finalize&lt;/c0&gt; method is never invoked more than once by a Java virtual machine for any given object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140237Z" creationid="pingfangx" creationdate="20191014T140237Z">
        <seg>对于任何给定对象，Java 虚拟机最多只调用一次 &lt;c0&gt;finalize&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;finalize&lt;/c0&gt; method of class &lt;c1&gt;Object&lt;/c1&gt; performs no special action; it simply returns normally.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140143Z" creationid="pingfangx" creationdate="20191014T140143Z">
        <seg>&lt;c0&gt;Object&lt;/c0&gt; 类的 &lt;c1&gt;finalize&lt;/c1&gt; 方法执行非特殊性操作；它仅执行一些常规返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;forName&lt;/c0&gt; method in class &lt;c1&gt;Class&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072939Z" creationid="pingfangx" creationdate="20191012T072939Z">
        <seg>&lt;c0&gt;Class&lt;/c0&gt; 类中的 &lt;c1&gt;forName&lt;/c1&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;abstract&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110529Z" creationid="pingfangx" creationdate="20191015T110529Z">
        <seg>表示 &lt;c0&gt;abstract&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;final&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110530Z" creationid="pingfangx" creationdate="20191015T110530Z">
        <seg>表示 &lt;c0&gt;final&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;interface&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110532Z" creationid="pingfangx" creationdate="20191015T110532Z">
        <seg>表示 &lt;c0&gt;interface&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;native&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110533Z" creationid="pingfangx" creationdate="20191015T110533Z">
        <seg>表示 &lt;c0&gt;native&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;private&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110534Z" creationid="pingfangx" creationdate="20191015T110534Z">
        <seg>表示 &lt;c0&gt;private&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;protected&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110535Z" creationid="pingfangx" creationdate="20191015T110535Z">
        <seg>表示 &lt;c0&gt;protected&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;public&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110536Z" creationid="pingfangx" creationdate="20191015T110536Z">
        <seg>表示 &lt;c0&gt;public&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;static&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110537Z" creationid="pingfangx" creationdate="20191015T110537Z">
        <seg>表示 &lt;c0&gt;static&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;strictfp&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110538Z" creationid="pingfangx" creationdate="20191015T110538Z">
        <seg>表示 &lt;c0&gt;strictfp&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;synchronized&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110539Z" creationid="pingfangx" creationdate="20191015T110539Z">
        <seg>表示 &lt;c0&gt;synchronized&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;transient&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110540Z" creationid="pingfangx" creationdate="20191015T110540Z">
        <seg>表示 &lt;c0&gt;transient&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;int&lt;/c0&gt; value representing the &lt;c1&gt;volatile&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110543Z" creationid="pingfangx" creationdate="20191015T110543Z">
        <seg>表示 &lt;c0&gt;volatile&lt;/c0&gt; 修饰符的 &lt;c1&gt;int&lt;/c1&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;java.security.ProtectionDomain&lt;/c0&gt; of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as &lt;c1&gt;java.lang.Object&lt;/c1&gt;, because the code for a proxy class is generated by trusted system code.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112517Z" creationid="pingfangx" creationdate="20191015T112517Z">
        <seg>代理类的 &lt;c0&gt;java.security.ProtectionDomain&lt;/c0&gt; 与由引导类加载器（如 &lt;c1&gt;java.lang.Object&lt;/c1&gt;）加载的系统类相同，原因是代理类的代码由受信任的系统代码生成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;minimumCapacity&lt;/c0&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040305Z" creationid="pingfangx" creationdate="20191014T040305Z">
        <seg>&lt;c0&gt;minimumCapacity&lt;/c0&gt; 参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;newLength&lt;/c0&gt; argument must be greater than or equal to &lt;c1&gt;0&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041654Z" creationid="pingfangx" creationdate="20191014T041654Z">
        <seg>&lt;c0&gt;newLength&lt;/c0&gt; 参数必须大于等于 &lt;c1&gt;0&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;offset&lt;/c0&gt; argument must be greater than or equal to &lt;c1&gt;0&lt;/c1&gt;, and less than or equal to the length of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040607Z" creationid="pingfangx" creationdate="20191014T040546Z">
        <seg>&lt;c0&gt;offset&lt;/c0&gt; 参数必须大于等于 &lt;c1&gt;0&lt;/c1&gt;，且小于等于此序列的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c0&gt;toString&lt;/c0&gt; method for class &lt;c1&gt;Object&lt;/c1&gt; returns a string consisting of the name of the class of which the object is an instance, the at-sign character `&lt;c2&gt;@&lt;/c2&gt;', and the unsigned hexadecimal representation of the hash code of the object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133257Z" creationid="pingfangx" creationdate="20191014T133257Z">
        <seg>&lt;c0&gt;Object&lt;/c0&gt; 类的 &lt;c1&gt;toString&lt;/c1&gt; 方法返回一个字符串，该字符串由类名（对象是该类的一个实例）、at 标记符“&lt;c2&gt;@&lt;/c2&gt;”和此对象哈希码的无符号十六进制表示组成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c1&gt;&lt;a2&gt;start()&lt;/a2&gt;&lt;/c1&gt; method creates a new &lt;c3&gt;&lt;a4&gt;Process&lt;/a4&gt;&lt;/c3&gt; instance with those attributes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075728Z" creationid="pingfangx" creationdate="20191014T075728Z">
        <seg>&lt;c1&gt;&lt;a2&gt;start()&lt;/a2&gt;&lt;/c1&gt; 方法利用这些属性创建一个新的 &lt;c3&gt;&lt;a4&gt;Process&lt;/a4&gt;&lt;/c3&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c2&gt;&lt;a3&gt;AbstractQueuedLongSynchronizer&lt;/a3&gt;&lt;/c2&gt; class provides the same functionality but extends support to 64 bits of synchronization state.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122858Z" creationid="pingfangx" creationdate="20191025T122858Z">
        <seg>&lt;c2&gt;&lt;a3&gt;AbstractQueuedLongSynchronizer&lt;/a3&gt;&lt;/c2&gt; 类提供相同的功能但扩展了对同步状态的 64 位的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c2&gt;&lt;a3&gt;AtomicStampedReference&lt;/a3&gt;&lt;/c2&gt; class associates an integer value with a reference.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122156Z" creationid="pingfangx" creationdate="20191025T122156Z">
        <seg>&lt;c2&gt;&lt;a3&gt;AtomicStampedReference&lt;/a3&gt;&lt;/c2&gt; 类将整数值与引用关联起来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c2&gt;&lt;a3&gt;ConcurrentLinkedDeque&lt;/a3&gt;&lt;/c2&gt; class is similar, but additionally supports the &lt;c4&gt;&lt;a5&gt;Deque&lt;/a5&gt;&lt;/c4&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110957Z" creationid="pingfangx" creationdate="20191025T110957Z">
        <seg>在 &lt;c2&gt;&lt;a3&gt;ConcurrentLinkedDeque&lt;/a3&gt;&lt;/c2&gt; 类是类似的，但附加地支持 &lt;c4&gt;&lt;a5&gt;Deque&lt;/a5&gt;&lt;/c4&gt; 接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c2&gt;ThreadDeath&lt;/c2&gt; error, though a "normal" condition, is also a subclass of &lt;c3&gt;Error&lt;/c3&gt; because most applications should not try to catch it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115556Z" creationid="pingfangx" creationdate="20191013T115556Z">
        <seg>虽然 &lt;c2&gt;ThreadDeath&lt;/c2&gt; 错误是一个“正规”的条件，但它也是 &lt;c3&gt;Error&lt;/c3&gt; 的子类，因为大多数应用程序都不应该试图捕获它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c3&gt;&lt;a4&gt;containsKey&lt;/a4&gt;&lt;/c3&gt; operation may be used to distinguish these two cases.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140920Z" creationid="pingfangx" creationdate="20191025T140920Z">
        <seg>可使用 &lt;c3&gt;&lt;a4&gt;containsKey&lt;/a4&gt;&lt;/c3&gt; 操作来区分这两种情况。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c3&gt;append&lt;/c3&gt; method always adds these characters at the end of the buffer; the &lt;c4&gt;insert&lt;/c4&gt; method adds the characters at a specified point.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063913Z" creationid="pingfangx" creationdate="20191014T063913Z">
        <seg>&lt;c3&gt;append&lt;/c3&gt; 方法始终将这些字符添加到缓冲区的末端；而 &lt;c4&gt;insert&lt;/c4&gt; 方法则在指定的点添加字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c3&gt;append&lt;/c3&gt; method always adds these characters at the end of the builder; the &lt;c4&gt;insert&lt;/c4&gt; method adds the characters at a specified point.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030401Z" creationid="pingfangx" creationdate="20191014T030401Z">
        <seg>&lt;c3&gt;append&lt;/c3&gt; 方法始终将这些字符添加到生成器的末端；而 &lt;c4&gt;insert&lt;/c4&gt; 方法则在指定的点添加字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c3&gt;finalize&lt;/c3&gt; method may take any action, including making this object available again to other threads; the usual purpose of &lt;c4&gt;finalize&lt;/c4&gt;, however, is to perform cleanup actions before the object is irrevocably discarded.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140115Z" creationid="pingfangx" creationdate="20191014T140115Z">
        <seg>&lt;c3&gt;finalize&lt;/c3&gt; 方法可以采取任何操作，其中包括再次使此对象对其他线程可用；不过，&lt;c4&gt;finalize&lt;/c4&gt; 的主要目的是在不可撤消地丢弃对象之前执行清除操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c4&gt;synchronized&lt;/c4&gt; and &lt;c5&gt;volatile&lt;/c5&gt; constructs, as well as the &lt;c6&gt;Thread.start()&lt;/c6&gt; and &lt;c7&gt;Thread.join()&lt;/c7&gt; methods, can form &lt;i8&gt;happens-before&lt;/i8&gt; relationships.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113153Z" creationid="pingfangx" creationdate="20191025T113153Z">
        <seg>&lt;c4&gt;synchronized&lt;/c4&gt; 和 &lt;c5&gt;volatile&lt;/c5&gt; 构造 happen-before 关系，&lt;c6&gt;Thread.start()&lt;/c6&gt; 和 &lt;c7&gt;Thread.join()&lt;/c7&gt; 方法形成 &lt;i8&gt;happen-before&lt;/i8&gt; 关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c5&gt;&lt;a6&gt;Executors&lt;/a6&gt;&lt;/c5&gt; class provides factory methods for the most common kinds and configurations of Executors, as well as a few utility methods for using them.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110738Z" creationid="pingfangx" creationdate="20191025T110738Z">
        <seg>&lt;c5&gt;&lt;a6&gt;Executors&lt;/a6&gt;&lt;/c5&gt; 类提供大多数 Executor 的常见类型和配置的工厂方法，以及使用它们的几种实用工具方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c5&gt;&lt;a6&gt;start()&lt;/a6&gt;&lt;/c5&gt; method can be invoked repeatedly from the same instance to create new subprocesses with identical or related attributes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075734Z" creationid="pingfangx" creationdate="20191014T075734Z">
        <seg>&lt;c5&gt;&lt;a6&gt;start()&lt;/a6&gt;&lt;/c5&gt; 方法可以从同一实例重复调用，以利用相同的或相关的属性创建新的子进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c6&gt;&lt;a7&gt;LockSupport&lt;/a7&gt;&lt;/c6&gt; class provides lower-level blocking and unblocking support that is useful for those developers implementing their own customized lock classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122902Z" creationid="pingfangx" creationdate="20191025T122902Z">
        <seg>&lt;c6&gt;&lt;a7&gt;LockSupport&lt;/a7&gt;&lt;/c6&gt; 类提供了更低级别的阻塞和解除阻塞支持，这对那些实现自己的定制锁类的开发人员很有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c7&gt;&lt;a8&gt;ScheduledExecutorService&lt;/a8&gt;&lt;/c7&gt; subinterface and associated interfaces add support for delayed and periodic task execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110524Z" creationid="pingfangx" creationdate="20191025T110524Z">
        <seg>&lt;c7&gt;&lt;a8&gt;ScheduledExecutorService&lt;/a8&gt;&lt;/c7&gt; 子接口及相关的接口添加了对延迟的和定期任务执行的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;c7&gt;Void&lt;/c7&gt; class is a non-instantiable class that holds a reference to a &lt;c8&gt;Class&lt;/c8&gt; object representing the type void.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T062634Z" creationid="pingfangx" creationdate="20191012T062634Z">
        <seg>&lt;c7&gt;Void&lt;/c7&gt; 类是一个非实例化的类，它保持一个对表示基本类型 void 的 &lt;c8&gt;Class&lt;/c8&gt; 对象的引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;i0&gt;interrupted status&lt;/i0&gt; of the thread is unaffected by this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084734Z" creationid="pingfangx" creationdate="20191014T084734Z">
        <seg>线程的&lt;i0&gt;中断状态&lt;/i0&gt; 不受该方法的影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;i0&gt;quotient&lt;/i0&gt; for this total order is:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T102117Z" creationid="pingfangx" creationdate="20191014T102117Z">
        <seg>此总的顺序的&lt;i0&gt;商&lt;/i0&gt; 是：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;i3&gt;capacity&lt;/i3&gt; is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T132403Z" creationid="pingfangx" creationdate="20191025T132403Z">
        <seg>&lt;i3&gt;容量&lt;/i3&gt; 是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;i4&gt;load factor&lt;/i4&gt; is a measure of how full the hash table is allowed to get before its capacity is automatically increased.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T132410Z" creationid="pingfangx" creationdate="20191025T132410Z">
        <seg>&lt;i4&gt;加载因子&lt;/i4&gt; 是哈希表在其容量自动增加之前可以达到多满的一种尺度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;t0&gt;ClassLoader&lt;/t0&gt; class uses a delegation model to search for classes and resources.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071909Z" creationid="pingfangx" creationdate="20191014T071909Z">
        <seg>&lt;t0&gt;ClassLoader&lt;/t0&gt; 类使用委托模型来搜索类和资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;t0&gt;Formattable&lt;/t0&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;t1&gt;'s'&lt;/t1&gt; conversion specifier of &lt;c2&gt;&lt;a3&gt;Formatter&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034509Z" creationid="pingfangx" creationdate="20191012T034358Z">
        <seg>&lt;t0&gt;Formattable&lt;/t0&gt; 接口必须通过需要执行自定义格式化（使用 &lt;c2&gt;&lt;a3&gt;Formatter&lt;/a3&gt;&lt;/c2&gt; 的 &lt;t1&gt;'s'&lt;/t1&gt; 转换说明符）的任何类来实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;t0&gt;java.nio&lt;/t0&gt; package defines the buffer classes, which are used throughout the NIO APIs.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102539Z" creationid="pingfangx" creationdate="20191011T102449Z">
        <seg>&lt;t0&gt;java.nio&lt;/t0&gt; 包定义了缓冲区类，这些类用于所有 NIO API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;t1&gt;Appendable&lt;/t1&gt; interface must be implemented by any class whose instances are intended to receive formatted output from a &lt;c2&gt;&lt;a3&gt;Formatter&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101405Z" creationid="pingfangx" creationdate="20191014T101405Z">
        <seg>如果某个类的实例打算接收取自 &lt;c2&gt;&lt;a3&gt;Formatter&lt;/a3&gt;&lt;/c2&gt; 的格式化输出，那么该类必须实现 &lt;t1&gt;Appendable&lt;/t1&gt; 接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;t2&gt;HashMap&lt;/t2&gt; is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified &lt;t3&gt;Map&lt;/t3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140510Z" creationid="pingfangx" creationdate="20191025T140510Z">
        <seg>所创建的 &lt;t2&gt;HashMap&lt;/t2&gt; 具有默认加载因子 (0.75) 和足以容纳指定 &lt;t3&gt;Map&lt;/t3&gt; 中映射关系的初始容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;t2&gt;StringBuilder&lt;/t2&gt; class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063952Z" creationid="pingfangx" creationdate="20191014T063952Z">
        <seg>与该类相比，通常应该优先使用 &lt;t2&gt;StringBuilder&lt;/t2&gt; 类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AccessibleObject class is the base class for Field, Method and Constructor objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092051Z" creationid="pingfangx" creationdate="20191012T092051Z">
        <seg>AccessibleObject 类是 Field、Method 和 Constructor 对象的基类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Boolean class wraps a value of the primitive type &lt;c0&gt;boolean&lt;/c0&gt; in an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071208Z" creationid="pingfangx" creationdate="20191012T071208Z">
        <seg>Boolean 类将基本类型为 &lt;c0&gt;boolean&lt;/c0&gt; 的值包装在一个对象中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Character Encoding is not supported.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065557Z" creationid="pingfangx" creationdate="20191011T065557Z">
        <seg>不支持字符编码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Class object representing the primitive type boolean.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T133247Z" creationid="pingfangx" creationdate="20191013T133247Z">
        <seg>表示基本类型 boolean 的 Class 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Java Virtual Machine allows an application to have multiple threads of execution running concurrently.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080846Z" creationid="pingfangx" creationdate="20191014T080846Z">
        <seg>Java 虚拟机允许应用程序并发地运行多个执行线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Java Virtual Machine continues to execute threads until either of the following occurs:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081005Z" creationid="pingfangx" creationdate="20191014T081005Z">
        <seg>Java 虚拟机会继续执行线程，直到下列任一情况出现时为止：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Java Virtual Machine exits when the only threads running are all daemon threads.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085049Z" creationid="pingfangx" creationdate="20191014T085049Z">
        <seg>当正在运行的线程都是守护线程时，Java 虚拟机退出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T021052Z" creationid="pingfangx" creationdate="20191014T021052Z">
        <seg>Java 语言提供对字符串串联符号（"+"）以及将其他对象转换为字符串的特殊支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Java math library is defined with respect to &lt;c0&gt;fdlibm&lt;/c0&gt; version 5.3.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095440Z" creationid="pingfangx" creationdate="20191014T095440Z">
        <seg>Java 数学库是根据 &lt;c0&gt;fdlibm&lt;/c0&gt; 5.3 版定义的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Java platform uses the UTF-16 representation in &lt;c4&gt;char&lt;/c4&gt; arrays and in the &lt;c5&gt;String&lt;/c5&gt; and &lt;c6&gt;StringBuffer&lt;/c6&gt; classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143330Z" creationid="pingfangx" creationdate="20191013T143308Z">
        <seg>Java 平台在 &lt;c4&gt;char&lt;/c4&gt; 数组以及 &lt;c5&gt;String&lt;/c5&gt; 和 &lt;c6&gt;StringBuffer&lt;/c6&gt; 类中使用 UTF-16 表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Java programming language does not guarantee which thread will invoke the &lt;c0&gt;finalize&lt;/c0&gt; method for any given object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140212Z" creationid="pingfangx" creationdate="20191014T140212Z">
        <seg>Java 编程语言不保证哪个线程将调用某个给定对象的 &lt;c0&gt;finalize&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Key interface is the top-level interface for all keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152408Z" creationid="pingfangx" creationdate="20191011T152408Z">
        <seg>Key 是所有密钥的顶层接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The KeyPairGenerator class is used to generate pairs of public and private keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032256Z" creationid="pingfangx" creationdate="20191012T032256Z">
        <seg>KeyPairGenerator 类用于生成公钥和私钥对。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Modifier class provides &lt;c0&gt;static&lt;/c0&gt; methods and constants to decode class and member access modifiers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092142Z" creationid="pingfangx" creationdate="20191012T092142Z">
        <seg>Modifier 类提供了 &lt;c0&gt;static&lt;/c0&gt; 方法和常量，对类和成员访问修饰符进行解码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Modifier class should be used to decode the modifiers in the integer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T014929Z" creationid="pingfangx" creationdate="20191015T014929Z">
        <seg>应该使用 Modifier 类解码整数中的修饰符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Signature class is used to provide applications the functionality of a digital signature algorithm.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032523Z" creationid="pingfangx" creationdate="20191012T032523Z">
        <seg>Signature 类用来为应用程序提供数字签名算法功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143054Z" creationid="pingfangx" creationdate="20191013T143054Z">
        <seg>Unicode 标准曾做过修改，以允许那些其表示形式需要超过 16 位的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The abstract class &lt;c0&gt;ContentHandler&lt;/c0&gt; is the superclass of all classes that read an &lt;c1&gt;Object&lt;/c1&gt; from a &lt;c2&gt;URLConnection&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083140Z" creationid="pingfangx" creationdate="20191011T083140Z">
        <seg>抽象类 &lt;c0&gt;ContentHandler&lt;/c0&gt; 是从 &lt;c1&gt;URLConnection&lt;/c1&gt; 读取 &lt;c2&gt;Object&lt;/c2&gt; 的所有类的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The abstract class &lt;c0&gt;Number&lt;/c0&gt; is the superclass of classes &lt;c1&gt;BigDecimal&lt;/c1&gt;, &lt;c2&gt;BigInteger&lt;/c2&gt;, &lt;c3&gt;Byte&lt;/c3&gt;, &lt;c4&gt;Double&lt;/c4&gt;, &lt;c5&gt;Float&lt;/c5&gt;, &lt;c6&gt;Integer&lt;/c6&gt;, &lt;c7&gt;Long&lt;/c7&gt;, and &lt;c8&gt;Short&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071447Z" creationid="pingfangx" creationdate="20191012T071447Z">
        <seg>抽象类 &lt;c0&gt;Number&lt;/c0&gt; 是 &lt;c1&gt;BigDecimal&lt;/c1&gt;、&lt;c2&gt;BigInteger&lt;/c2&gt;、&lt;c3&gt;Byte&lt;/c3&gt;、&lt;c4&gt;Double&lt;/c4&gt;、&lt;c5&gt;Float&lt;/c5&gt;、&lt;c6&gt;Integer&lt;/c6&gt;、&lt;c7&gt;Long&lt;/c7&gt; 和 &lt;c8&gt;Short&lt;/c8&gt; 类的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The abstract class &lt;c0&gt;SocketImpl&lt;/c0&gt; is a common superclass of all classes that actually implement sockets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083350Z" creationid="pingfangx" creationdate="20191011T083350Z">
        <seg>抽象类 &lt;c0&gt;SocketImpl&lt;/c0&gt; 是实际实现套接字的所有类的通用超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The abstract class &lt;c0&gt;URLConnection&lt;/c0&gt; is the superclass of all classes that represent a communications link between the application and a URL.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083409Z" creationid="pingfangx" creationdate="20191011T083409Z">
        <seg>抽象类 &lt;c0&gt;URLConnection&lt;/c0&gt; 是所有类的超类，它代表应用程序和 URL 之间的通信链接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The abstract class &lt;c0&gt;URLStreamHandler&lt;/c0&gt; is the common superclass for all stream protocol handlers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083413Z" creationid="pingfangx" creationdate="20191011T083413Z">
        <seg>抽象类 &lt;c0&gt;URLStreamHandler&lt;/c0&gt; 是所有流协议处理程序的通用超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The access checks--for public, default (package) access, protected, and private members--are performed when Fields, Methods or Constructors are used to set or get fields, to invoke methods, or to create and initialize new instances of classes, respectively.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090446Z" creationid="pingfangx" creationdate="20191015T090446Z">
        <seg>对于公共成员、默认（打包）访问成员、受保护成员和私有成员，在分别使用 Field、Method 或 Constructor 对象来设置或获取字段、调用方法，或者创建和初始化类的新实例的时候，会执行访问检查。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The action to be performed for each entry</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140713Z" creationid="pingfangx" creationdate="20191025T140713Z">
        <seg>为每个条目执行的操作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The added complexity of tree bins is worthwhile in providing worst-case O(log n) operations when keys either have distinct hashes or are orderable, Thus, performance degrades gracefully under accidental or malicious usages in which hashCode() methods return values that are poorly distributed, as well as those in which many keys share a hashCode, so long as they are also Comparable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080703Z" creationid="pingfangx" creationdate="20191026T080703Z">
        <seg>tree bins 所增加的复杂度是值得的，当 keys 具有不同的哈希或者可排序时，都提供最坏 O(log n) 的操作。因此，在无意或有意的使用中，如果 hashCode() 返回的值分布不均，或者多个 key 共享一个 hashCode，只要它们是 Comparable，性能的下降也会平滑。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The amount of real time, measured in nanoseconds, is given by:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133413Z" creationid="pingfangx" creationdate="20191014T133413Z">
        <seg>用毫微秒度量的实际时间量可以通过以下公式计算出来：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The annotation type &lt;c0&gt;java.lang.annotation.Repeatable&lt;/c0&gt; is used to indicate that the annotation type whose declaration it (meta-)annotates is &lt;e1&gt;repeatable&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082752Z" creationid="pingfangx" creationdate="20191012T082704Z">
        <seg>注释类型 &lt;c0&gt;java.lang.annotation.Repeatable&lt;/c0&gt; 用于指示注释类型，其声明它(元)注释是 &lt;e1&gt;repeatable (可重复的)&lt;/e1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument is appended to the contents of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034648Z" creationid="pingfangx" creationdate="20191014T034648Z">
        <seg>参数将被追加到此序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument may be &lt;c2&gt;null&lt;/c2&gt; -- this means to use the working directory of the current Java process, usually the directory named by the system property &lt;c3&gt;user.dir&lt;/c3&gt;, as the working directory of the child process.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080035Z" creationid="pingfangx" creationdate="20191014T080035Z">
        <seg>参数可以为 &lt;c2&gt;null&lt;/c2&gt;，这意味着要使用当前 Java 进程的工作目录，通常是由系统属性 &lt;c3&gt;user.dir&lt;/c3&gt; 指定的目录作为子进程的工作目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The atomic classes also support method &lt;c0&gt;weakCompareAndSet&lt;/c0&gt;, which has limited applicability.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121912Z" creationid="pingfangx" creationdate="20191025T121912Z">
        <seg>原子类也支持 &lt;c0&gt;weakCompareAndSet&lt;/c0&gt; 方法，该方法具有受限制的适用性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The awakened thread will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened thread enjoys no reliable privilege or disadvantage in being the next thread to lock this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132812Z" creationid="pingfangx" creationdate="20191014T132812Z">
        <seg>被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The awakened thread will not be able to proceed until the current thread relinquishes the lock on this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132801Z" creationid="pingfangx" creationdate="20191014T132801Z">
        <seg>直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The awakened threads will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened threads enjoy no reliable privilege or disadvantage in being the next thread to lock this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133046Z" creationid="pingfangx" creationdate="20191014T133046Z">
        <seg>被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The awakened threads will not be able to proceed until the current thread relinquishes the lock on this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133029Z" creationid="pingfangx" creationdate="20191014T133029Z">
        <seg>直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base &lt;c3&gt;&lt;a4&gt;Buffer&lt;/a4&gt;&lt;/c3&gt; class defines these properties as well as methods for &lt;i5&gt;clearing&lt;/i5&gt;, &lt;i6&gt;flipping&lt;/i6&gt;, and &lt;i7&gt;rewinding&lt;/i7&gt;, for &lt;i8&gt;marking&lt;/i8&gt; the current position, and for &lt;i9&gt;resetting&lt;/i9&gt; the position to the previous mark.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T111531Z" creationid="pingfangx" creationdate="20191011T111523Z">
        <seg>基本 &lt;c3&gt;&lt;a4&gt;Buffer&lt;/a4&gt;&lt;/c3&gt;  类定义了这些属性以及 &lt;i5&gt;清除&lt;/i5&gt; 、 &lt;i6&gt;反转&lt;/i6&gt; 和 &lt;i7&gt;重绕&lt;/i7&gt; 方法，用以 &lt;i8&gt;标记&lt;/i8&gt; 当前位置，以及将当前位置 &lt;i9&gt;重置&lt;/i9&gt; 为前一个标记处。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The behavior of the returned map is system-dependent.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080049Z" creationid="pingfangx" creationdate="20191014T080049Z">
        <seg>返回的映射的行为取决于系统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bin count threshold for untreeifying a (split) bin during a resize operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082503Z" creationid="pingfangx" creationdate="20191026T082503Z">
        <seg>用于 resize 期间对 bin 取消树化（分割）的 bin 数阈值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bin count threshold for using a tree rather than list for a bin.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082415Z" creationid="pingfangx" creationdate="20191026T082415Z">
        <seg>使用树而不是列表的 bin 数阈值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103617Z" creationid="pingfangx" creationdate="20191014T103617Z">
        <seg>缓冲区可用作类似以下字符的存储库：所做的唯一改变是 put 操作的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The capacity is the amount of storage available for newly inserted characters, beyond which an allocation will occur.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040127Z" creationid="pingfangx" creationdate="20191014T040127Z">
        <seg>容量指可用于最新插入字符的存储量，超过这一容量便需要再次分配。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The central abstractions of the NIO APIs are:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083704Z" creationid="pingfangx" creationdate="20191011T083704Z">
        <seg>NIO API 的集中抽象为：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character at index &lt;i0&gt;k&lt;/i0&gt; in the new character sequence is equal to:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T062053Z" creationid="pingfangx" creationdate="20191014T062053Z">
        <seg>新字符序列中索引 &lt;i0&gt;k&lt;/i0&gt; 处的字符等于：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character at index &lt;i0&gt;k&lt;/i0&gt; in this sequence becomes equal to:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T062820Z" creationid="pingfangx" creationdate="20191014T062820Z">
        <seg>在此序列中索引 &lt;i0&gt;k&lt;/i0&gt; 处的字符等于：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character at the specified index is set to &lt;c0&gt;ch&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T033908Z" creationid="pingfangx" creationdate="20191014T033908Z">
        <seg>将给定索引处的字符设置为 &lt;c0&gt;ch&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters are copied into the subarray of &lt;c4&gt;dst&lt;/c4&gt; starting at index &lt;c5&gt;dstBegin&lt;/c5&gt; and ending at index:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040335Z" creationid="pingfangx" creationdate="20191014T040335Z">
        <seg>要复制到 &lt;c4&gt;dst&lt;/c4&gt; 子数组的字符从索引 &lt;c5&gt;dstBegin&lt;/c5&gt; 处开始，结束于以下索引：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the &lt;c0&gt;CharSequence&lt;/c0&gt; argument are appended, in order, increasing the length of this sequence by the length of the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064616Z" creationid="pingfangx" creationdate="20191014T064616Z">
        <seg>按顺序追加 &lt;c0&gt;CharSequence&lt;/c0&gt; 变量中的字符，此序列将增加该变量的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the &lt;c0&gt;CharSequence&lt;/c0&gt; argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040704Z" creationid="pingfangx" creationdate="20191014T040704Z">
        <seg>按顺序将 &lt;c0&gt;CharSequence&lt;/c0&gt; 参数中的字符插入此序列中的指定位置，位于该位置处的原有字符将向后移，此序列将增加该参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the &lt;c0&gt;String&lt;/c0&gt; argument are appended, in order, increasing the length of this sequence by the length of the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034828Z" creationid="pingfangx" creationdate="20191014T034828Z">
        <seg>按顺序追加 &lt;c0&gt;String&lt;/c0&gt; 变量中的字符，此序列将增加该变量的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the &lt;c0&gt;String&lt;/c0&gt; argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041041Z" creationid="pingfangx" creationdate="20191014T041041Z">
        <seg>按顺序将 &lt;c0&gt;String&lt;/c0&gt; 参数中的字符插入此序列中的指定位置，位于该位置处的原有字符将向后移，此序列将增加该参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the &lt;t0&gt;StringBuffer&lt;/t0&gt; argument are appended, in order, to the contents of this &lt;t1&gt;StringBuffer&lt;/t1&gt;, increasing the length of this &lt;t2&gt;StringBuffer&lt;/t2&gt; by the length of the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064259Z" creationid="pingfangx" creationdate="20191014T064150Z">
        <seg>按顺序将 &lt;t0&gt;StringBuffer&lt;/t0&gt; 参数中的字符追加到此 &lt;t1&gt;StringBuffer&lt;/t1&gt; 中，并使 &lt;t2&gt;StringBuffer&lt;/t2&gt; 在长度上增加该参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the &lt;t0&gt;StringBuffer&lt;/t0&gt; argument are appended, in order, to this sequence, increasing the length of this sequence by the length of the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035002Z" creationid="pingfangx" creationdate="20191014T035002Z">
        <seg>按顺序追加 &lt;t0&gt;StringBuffer &lt;/t0&gt;参数中的字符，此序列将增加该参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the array argument are appended, in order, to the contents of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034809Z" creationid="pingfangx" creationdate="20191014T034809Z">
        <seg>按顺序将数组参数中的字符追加到此序列中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the array argument are inserted into the contents of this sequence at the position indicated by &lt;c0&gt;offset&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040501Z" creationid="pingfangx" creationdate="20191014T040501Z">
        <seg>数组参数的字符将被插入此序列中 &lt;c0&gt;offset&lt;/c0&gt; 所指示的位置处。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters of the subarray are inserted into this sequence at the position indicated by &lt;c4&gt;index&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041027Z" creationid="pingfangx" creationdate="20191014T041027Z">
        <seg>子数组的字符将被插入 &lt;c4&gt;index&lt;/c4&gt; 所指示的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The characters to be appended should be valid Unicode characters as described in &lt;a0&gt;Unicode Character Representation&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101407Z" creationid="pingfangx" creationdate="20191014T101407Z">
        <seg>要添加的字符应该是有效的 Unicode 字符，正如 &lt;a0&gt;Unicode Character Representation&lt;/a0&gt; 中描述的那样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The charset API is defined in the &lt;c1&gt;&lt;a2&gt;java.nio.charset&lt;/a2&gt;&lt;/c1&gt; package, and the channel and selector APIs are defined in the &lt;c3&gt;&lt;a4&gt;java.nio.channels&lt;/a4&gt;&lt;/c3&gt; package.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102656Z" creationid="pingfangx" creationdate="20191011T102624Z">
        <seg>&lt;c1&gt;&lt;a2&gt;java.nio.charset&lt;/a2&gt;&lt;/c1&gt; 包中定义了字符集 API，&lt;c3&gt;&lt;a4&gt;java.nio.channels&lt;/a4&gt;&lt;/c3&gt; 包中定义了信道和选择器 API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The choice is arbitrary and occurs at the discretion of the implementation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132732Z" creationid="pingfangx" creationdate="20191014T132732Z">
        <seg>选择是任意性的，并在对实现做出决定时发生。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;Date&lt;/c0&gt; represents a specific instant in time, with millisecond precision.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045455Z" creationid="pingfangx" creationdate="20191012T045455Z">
        <seg>类 &lt;c0&gt;Date&lt;/c0&gt; 表示特定的瞬间，精确到毫秒。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;Exception&lt;/c0&gt; and any subclasses that are not also subclasses of &lt;c1&gt;&lt;a2&gt;RuntimeException&lt;/a2&gt;&lt;/c1&gt; are &lt;e3&gt;checked exceptions&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120348Z" creationid="pingfangx" creationdate="20191013T120348Z">
        <seg>类 &lt;c0&gt;Exception&lt;/c0&gt; 和任何子类，只要不属于 &lt;c1&gt;&lt;a2&gt;RuntimeException&lt;/a2&gt;&lt;/c1&gt; 的子类都是 &lt;e3&gt;checked exceptions (检查型异常)&lt;/e3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;Exception&lt;/c0&gt; and its subclasses are a form of &lt;c1&gt;Throwable&lt;/c1&gt; that indicates conditions that a reasonable application might want to catch.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072955Z" creationid="pingfangx" creationdate="20191012T072955Z">
        <seg>&lt;c0&gt;Exception&lt;/c0&gt; 类及其子类是 &lt;c1&gt;Throwable&lt;/c1&gt; 的一种形式，它指出了合理的应用程序想要捕获的条件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;Math&lt;/c0&gt; contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071432Z" creationid="pingfangx" creationdate="20191012T071432Z">
        <seg>&lt;c0&gt;Math&lt;/c0&gt; 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;Math&lt;/c0&gt; provides commonly used mathematical functions such as sine, cosine, and square root.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T062641Z" creationid="pingfangx" creationdate="20191012T062641Z">
        <seg>类 &lt;c0&gt;Math&lt;/c0&gt; 提供了常用的数学函数，比如正弦、余弦和平方根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;Object&lt;/c0&gt; does not itself implement the interface &lt;c1&gt;Cloneable&lt;/c1&gt;, so calling the &lt;c2&gt;clone&lt;/c2&gt; method on an object whose class is &lt;c3&gt;Object&lt;/c3&gt; will result in throwing an exception at run time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135848Z" creationid="pingfangx" creationdate="20191014T135848Z">
        <seg>&lt;c0&gt;Object&lt;/c0&gt; 类本身不实现接口 &lt;c1&gt;Cloneable&lt;/c1&gt;，所以在类为 &lt;c2&gt;Object&lt;/c2&gt; 的对象上调用 &lt;c3&gt;clone&lt;/c3&gt; 方法将会导致在运行时抛出异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;StrictMath&lt;/c0&gt; contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071659Z" creationid="pingfangx" creationdate="20191012T071659Z">
        <seg>&lt;c0&gt;StrictMath&lt;/c0&gt; 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c0&gt;String&lt;/c0&gt; includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T021018Z" creationid="pingfangx" creationdate="20191014T021018Z">
        <seg>&lt;c0&gt;String&lt;/c0&gt; 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;c5&gt;Process&lt;/c5&gt; provides methods for performing input from the process, performing output to the process, waiting for the process to complete, checking the exit status of the process, and destroying (killing) the process.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074038Z" creationid="pingfangx" creationdate="20191014T074038Z">
        <seg>&lt;c5&gt;Process&lt;/c5&gt; 类提供了执行从进程输入、执行输出到进程、等待进程完成、检查进程的退出状态以及销毁（杀掉）进程的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class &lt;t0&gt;ClassLoader&lt;/t0&gt; is an abstract class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071401Z" creationid="pingfangx" creationdate="20191014T071401Z">
        <seg>&lt;t0&gt;ClassLoader&lt;/t0&gt; 类是一个抽象类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class Authenticator represents an object that knows how to obtain authentication for a network connection.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083135Z" creationid="pingfangx" creationdate="20191011T083135Z">
        <seg>Authenticator 类表示懂得如何获得网络连接验证的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class PasswordAuthentication is a data holder that is used by Authenticator.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083331Z" creationid="pingfangx" creationdate="20191011T083331Z">
        <seg>PasswordAuthentication 类是供 Authenticator 使用的数据持有者。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class implements a buffered output stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094616Z" creationid="pingfangx" creationdate="20191010T094616Z">
        <seg>该类实现缓冲的输出流。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class itself defines a programming interface to which applications may write.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T151959Z" creationid="pingfangx" creationdate="20191011T151959Z">
        <seg>该类本身定义了应用程序可以写入的编程接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class loader for an array class, as returned by &lt;c1&gt;&lt;a2&gt;getClassLoader()&lt;/a2&gt;&lt;/c1&gt; is the same as the class loader for its element type; if the element type is a primitive type, then the array class has no class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071741Z" creationid="pingfangx" creationdate="20191014T071724Z">
        <seg>数组类的类加载器由 &lt;c1&gt;&lt;a2&gt;Class.getClassLoader()&lt;/a2&gt;&lt;/c1&gt; 返回，该加载器与其元素类型的类加载器是相同的；如果该元素类型是基本类型，则该数组类没有类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class must define a method of no arguments called &lt;c1&gt;run&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154632Z" creationid="pingfangx" creationdate="20191013T154632Z">
        <seg>类必须定义一个称为 &lt;c1&gt;run&lt;/c1&gt; 的无参数方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The classes &lt;c1&gt;String&lt;/c1&gt;, &lt;c2&gt;StringBuffer&lt;/c2&gt;, and &lt;c3&gt;StringBuilder&lt;/c3&gt; similarly provide commonly used operations on character strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T062726Z" creationid="pingfangx" creationdate="20191012T062726Z">
        <seg>类似地，类 &lt;c1&gt;String&lt;/c1&gt;、&lt;c2&gt;StringBuffer&lt;/c2&gt; 和 &lt;c3&gt;StringBuilder&lt;/c3&gt; 提供了常用的字符串操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The classes are:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T081020Z" creationid="pingfangx" creationdate="20191011T081020Z">
        <seg>这些类为：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The classes in this package also contain methods to get and unconditionally set values, as well as a weaker conditional atomic update operation &lt;c3&gt;weakCompareAndSet&lt;/c3&gt; described below.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120737Z" creationid="pingfangx" creationdate="20191025T120737Z">
        <seg>此包中的类还包含获取并无条件设置值的方法，以及以下描述的较弱条件的原子更新操作 &lt;c3&gt; weakCompareAndSet&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141343Z" creationid="pingfangx" creationdate="20191025T141343Z">
        <seg>该 collection 受映射的支持，所以对映射的更改将反映在该 collection 中，反之亦然。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection supports element removal, which removes the corresponding mapping from the map, via the &lt;t2&gt;Iterator.remove&lt;/t2&gt;, &lt;t3&gt;Collection.remove&lt;/t3&gt;, &lt;t4&gt;removeAll&lt;/t4&gt;, &lt;t5&gt;retainAll&lt;/t5&gt; and &lt;t6&gt;clear&lt;/t6&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095202Z" creationid="pingfangx" creationdate="20191026T095202Z">
        <seg>该 collection 支持元素的移除，通过 &lt;t2&gt;Iterator.remove&lt;/t2&gt;、&lt;t3&gt;Collection.remove&lt;/t3&gt;、&lt;t4&gt;removeAll&lt;/t4&gt;、&lt;t5&gt;retainAll&lt;/t5&gt; 和 &lt;t6&gt;clear&lt;/t6&gt; 操作可从该映射中移除相应的映射关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection supports element removal, which removes the corresponding mapping from the map, via the &lt;t3&gt;Iterator.remove&lt;/t3&gt;, &lt;t4&gt;Collection.remove&lt;/t4&gt;, &lt;t5&gt;removeAll&lt;/t5&gt;, &lt;t6&gt;retainAll&lt;/t6&gt; and &lt;t7&gt;clear&lt;/t7&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141347Z" creationid="pingfangx" creationdate="20191025T141347Z">
        <seg>该 collection 支持元素的移除，通过 &lt;t3&gt;Iterator.remove&lt;/t3&gt;、&lt;t4&gt;Collection.remove&lt;/t4&gt;、&lt;t5&gt;removeAll&lt;/t5&gt;、&lt;t6&gt;retainAll&lt;/t6&gt; 和 &lt;t7&gt;clear&lt;/t7&gt; 操作可从该映射中移除相应的映射关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The common interface extended by all annotation types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082757Z" creationid="pingfangx" creationdate="20191012T082757Z">
        <seg>所有 annotation 类型都要扩展的公共接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The concurrent-programming-like SSA-based coding style helps avoid aliasing errors amid all of the twisty pointer operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081904Z" creationid="pingfangx" creationdate="20191026T081904Z">
        <seg>类似于并发编程的基于 SSA 的编码风格有助于避免所有扭曲的指针操作中的别名错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The constant value of this field is the largest value of type &lt;c0&gt;char&lt;/c0&gt;, &lt;c1&gt;'\uFFFF'&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144523Z" creationid="pingfangx" creationdate="20191013T144523Z">
        <seg>此字段的常量值是 &lt;c0&gt;char&lt;/c0&gt; 类型的最大值，即 &lt;c1&gt;'\uFFFF'&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The constant value of this field is the smallest value of type &lt;c0&gt;char&lt;/c0&gt;, &lt;c1&gt;'\u0000'&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144844Z" creationid="pingfangx" creationdate="20191013T144844Z">
        <seg>此字段的常量值是 &lt;c0&gt;char&lt;/c0&gt; 类型的最小值，即 &lt;c1&gt;'\u0000'&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The constants of this enumerated type describe the various policies for retaining annotations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152456Z" creationid="pingfangx" creationdate="20191014T152456Z">
        <seg>此枚举类型的常量描述保留注释的不同策略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The constants of this enumerated type provide a simple classification of the declared elements in a Java program.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152353Z" creationid="pingfangx" creationdate="20191014T152353Z">
        <seg>此枚举类型的常量提供了 Java 程序中声明的元素的简单分类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The contents all three implementation strings are vendor specific.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095027Z" creationid="pingfangx" creationdate="20191014T095027Z">
        <seg>三个实现字符串内容都是特定于供应商的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The context ClassLoader is provided by the creator of the thread for use by code running in this thread when loading classes and resources.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084545Z" creationid="pingfangx" creationdate="20191014T084545Z">
        <seg>上下文 ClassLoader 由线程创建者提供，供运行于该线程中的代码在加载类和资源时使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The current runtime can be obtained from the &lt;c1&gt;getRuntime&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T153500Z" creationid="pingfangx" creationdate="20191013T153500Z">
        <seg>可以通过 &lt;c1&gt;getRuntime&lt;/c1&gt; 方法获取当前运行时。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The current thread must own this object's monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133434Z" creationid="pingfangx" creationdate="20191014T133434Z">
        <seg>当前线程必须拥有此对象监视器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The declaring class of the &lt;c2&gt;Method&lt;/c2&gt; object will be the interface that the method was declared in, which may be a superinterface of the proxy interface that the proxy class inherits the method through.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121134Z" creationid="pingfangx" creationdate="20191015T121107Z">
        <seg>&lt;c2&gt;Method&lt;/c2&gt; 对象的声明类将是在其中声明方法的接口，该接口可以是代理类赖以继承方法的代理接口的超接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The declaring class of the &lt;c5&gt;Method&lt;/c5&gt; object passed to &lt;c6&gt;invoke&lt;/c6&gt; will be &lt;c7&gt;java.lang.Object&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112920Z" creationid="pingfangx" creationdate="20191015T112920Z">
        <seg>传递到 &lt;c5&gt;invoke&lt;/c5&gt; 的 &lt;c6&gt;Method&lt;/c6&gt; 对象的声明类是 &lt;c7&gt;java.lang.Object&lt;/c7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default initial capacity - MUST be a power of two.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082117Z" creationid="pingfangx" creationdate="20191026T082117Z">
        <seg>默认初始容量 - 必须是 2 的幂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default priority that is assigned to a thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081359Z" creationid="pingfangx" creationdate="20191014T081359Z">
        <seg>分配给线程的默认优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is the current working directory of the current process, usually the directory named by the system property &lt;c1&gt;user.dir&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075823Z" creationid="pingfangx" creationdate="20191014T075823Z">
        <seg>默认值是当前进程的当前工作目录，通常根据系统属性 &lt;c1&gt;user.dir&lt;/c1&gt; 来命名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The definition of this call depends on &lt;c0&gt;&lt;a1&gt;suspend()&lt;/a1&gt;&lt;/c0&gt;, which is deprecated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081608Z" creationid="pingfangx" creationdate="20191014T081608Z">
        <seg>此调用的定义取决于 &lt;c0&gt;&lt;a1&gt;suspend()&lt;/a1&gt;&lt;/c0&gt;，它被废弃了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The description of a security service.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032454Z" creationid="pingfangx" creationdate="20191012T032454Z">
        <seg>安全服务的描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The details of the representation are implementation-dependent, but the following may be regarded as typical:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151737Z" creationid="pingfangx" creationdate="20191014T151737Z">
        <seg>表示形式的细节取决于实现，但下面的情况是最常见的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The different classes cover the most common usage contexts for producer-consumer, messaging, parallel tasking, and related concurrent designs.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111016Z" creationid="pingfangx" creationdate="20191025T111016Z">
        <seg>这些不同的类覆盖了生产者-使用者、消息传递、并行任务执行和相关并发设计的大多数常见使用的上下文。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The end argument must be greater than or equal to &lt;c0&gt;start&lt;/c0&gt;, and less than or equal to the length of s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063054Z" creationid="pingfangx" creationdate="20191014T063054Z">
        <seg>end 数必须大于等于 &lt;c0&gt;start&lt;/c0&gt;，且小于等于 s 的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The exact format of the string is unspecified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152833Z" creationid="pingfangx" creationdate="20191014T152833Z">
        <seg>字符串的确切格式没有指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The exact nature of the exception is system-dependent, but it will always be a subclass of &lt;c0&gt;&lt;a1&gt;IOException&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080235Z" creationid="pingfangx" creationdate="20191014T080235Z">
        <seg>该异常的具体本质取决于系统，但它总是 &lt;c0&gt;&lt;a1&gt;IOException&lt;/a1&gt;&lt;/c0&gt; 的一个子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The exception's type must be assignable either to any of the exception types declared in the &lt;c0&gt;throws&lt;/c0&gt; clause of the interface method or to the unchecked exception types &lt;c1&gt;java.lang.RuntimeException&lt;/c1&gt; or &lt;c2&gt;java.lang.Error&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121425Z" creationid="pingfangx" creationdate="20191015T121425Z">
        <seg>该异常的类型必须可以分配到在接口方法的 &lt;c0&gt;throws&lt;/c0&gt; 子句中声明的任一异常类型或未经检查的异常类型 &lt;c1&gt;java.lang.RuntimeException&lt;/c1&gt; 或 &lt;c2&gt;java.lang.Error&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134459Z" creationid="pingfangx" creationdate="20191025T134459Z">
        <seg>在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file and its description are available from the Unicode Consortium at:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T142052Z" creationid="pingfangx" creationdate="20191013T142052Z">
        <seg>此文件及其描述可从 Unicode Consortium 获得，网址如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first &lt;c1&gt;char&lt;/c1&gt; value is at index &lt;c2&gt;0&lt;/c2&gt;, the next at index &lt;c3&gt;1&lt;/c3&gt;, and so on, as in array indexing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040206Z" creationid="pingfangx" creationdate="20191014T040206Z">
        <seg>第一个 &lt;c1&gt;char&lt;/c1&gt; 值在索引 &lt;c2&gt;0&lt;/c2&gt; 处，第二个在索引 &lt;c3&gt;1&lt;/c3&gt; 处，依此类推，这类似于数组索引。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first &lt;c2&gt;char&lt;/c2&gt; value of the sequence is at index zero, the next at index one, and so on, as for array indexing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070436Z" creationid="pingfangx" creationdate="20191014T070436Z">
        <seg>对于数组索引，序列的第一个 &lt;c2&gt;char&lt;/c2&gt; 值是索引零，下一个是索引一，依此类推。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first character to be copied is at index &lt;c1&gt;srcBegin&lt;/c1&gt;; the last character to be copied is at index &lt;c2&gt;srcEnd-1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040332Z" creationid="pingfangx" creationdate="20191014T040332Z">
        <seg>要复制的第一个字符在索引 &lt;c1&gt;srcBegin&lt;/c1&gt; 处；要复制的最后一个字符在索引 &lt;c2&gt;srcEnd-1&lt;/c2&gt; 处。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first values are:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081122Z" creationid="pingfangx" creationdate="20191026T081122Z">
        <seg>第一个值是：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code would then create a thread and start it running:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081113Z" creationid="pingfangx" creationdate="20191014T081113Z">
        <seg>然后，下列代码会创建并启动一个线程：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses a &lt;c0&gt;Class&lt;/c0&gt; object to print the class name of an object:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T035217Z" creationid="pingfangx" creationdate="20191013T035217Z">
        <seg>以下示例使用 &lt;c0&gt;Class&lt;/c0&gt; 对象来显示对象的类名：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following package-protected methods are designed to be overridden by LinkedHashMap, but not by any other subclass.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095953Z" creationid="pingfangx" creationdate="20191026T095953Z">
        <seg>下面的包保护方法被设计为被 LinkedHashMap 覆盖，但不被其他子类覆盖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The format of this string depends on the implementation, but the following examples may be regarded as typical:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095339Z" creationid="pingfangx" creationdate="20191014T095339Z">
        <seg>此字符串的格式取决于实现，但以下示例是最常见的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The frame at the top of the stack represents the execution point at which the stack trace was generated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095203Z" creationid="pingfangx" creationdate="20191014T095203Z">
        <seg>堆栈顶部的帧表示生成堆栈跟踪的执行点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The framework permits much greater flexibility in the use of locks and conditions, at the expense of more awkward syntax.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122742Z" creationid="pingfangx" creationdate="20191025T122742Z">
        <seg>该框架允许更灵活地使用锁和条件，但以更难用的语法为代价。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general contract of &lt;c0&gt;finalize&lt;/c0&gt; is that it is invoked if and when the Java&lt;f1&gt;&lt;s2&gt;TM&lt;/s2&gt;&lt;/f1&gt; virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T140052Z" creationid="pingfangx" creationdate="20191014T140052Z">
        <seg>&lt;c0&gt;finalize&lt;/c0&gt; 的常规协定是：当 Java&lt;f1&gt;&lt;s2&gt;TM&lt;/s2&gt;&lt;/f1&gt; 虚拟机已确定尚未终止的任何线程无法再通过任何方法访问此对象时，将调用此方法，除非由于准备终止的其他某个对象或类的终结操作执行了某个操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general contract of &lt;c0&gt;hashCode&lt;/c0&gt; is:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T131745Z" creationid="pingfangx" creationdate="20191014T131745Z">
        <seg>&lt;c0&gt;hashCode&lt;/c0&gt; 的常规协定是： </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general contract of the method &lt;c0&gt;run&lt;/c0&gt; is that it may take any action whatsoever.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154805Z" creationid="pingfangx" creationdate="20191013T154805Z">
        <seg>方法 &lt;c0&gt;run&lt;/c0&gt; 的常规协定是，它可能执行任何所需的动作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general intent is that, for any object &lt;c0&gt;x&lt;/c0&gt;, the expression:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135245Z" creationid="pingfangx" creationdate="20191014T135245Z">
        <seg>这样做的目的是，对于任何对象 &lt;c0&gt;x&lt;/c0&gt;，表达式：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash code of a member-value depends on its type:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T145356Z" creationid="pingfangx" creationdate="20191014T145356Z">
        <seg>成员值的哈希码取决于其类型：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash code of a primitive value &lt;t0&gt;&lt;i1&gt;v&lt;/i1&gt;&lt;/t0&gt; is equal to &lt;t2&gt;&lt;i3&gt;WrapperType&lt;/i3&gt;.valueOf(&lt;i4&gt;v&lt;/i4&gt;).hashCode()&lt;/t2&gt;, where &lt;t5&gt;&lt;i6&gt;WrapperType&lt;/i6&gt;&lt;/t5&gt; is the wrapper type corresponding to the primitive type of &lt;t7&gt;&lt;i8&gt;v&lt;/i8&gt;&lt;/t7&gt; (&lt;c9&gt;&lt;a10&gt;Byte&lt;/a10&gt;&lt;/c9&gt;, &lt;c11&gt;&lt;a12&gt;Character&lt;/a12&gt;&lt;/c11&gt;, &lt;c13&gt;&lt;a14&gt;Double&lt;/a14&gt;&lt;/c13&gt;, &lt;c15&gt;&lt;a16&gt;Float&lt;/a16&gt;&lt;/c15&gt;, &lt;c17&gt;&lt;a18&gt;Integer&lt;/a18&gt;&lt;/c17&gt;, &lt;c19&gt;&lt;a20&gt;Long&lt;/a20&gt;&lt;/c19&gt;, &lt;c21&gt;&lt;a22&gt;Short&lt;/a22&gt;&lt;/c21&gt;, or &lt;c23&gt;&lt;a24&gt;Boolean&lt;/a24&gt;&lt;/c23&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150125Z" creationid="pingfangx" creationdate="20191014T145341Z">
        <seg>基值 &lt;t0&gt;&lt;i1&gt;v&lt;/i1&gt;&lt;/t0&gt; 的哈希码等于 &lt;t2&gt;&gt;&lt;i3&gt;WrapperType&lt;/i3&gt;.valueOf(&lt;i4&gt;v&lt;/i4&gt;).hashCode()&lt;/t2&gt;，其中 &lt;t5&gt;&lt;i6&gt;WrapperType&lt;/i6&gt;&lt;/t5&gt; 是对应 &lt;t7&gt;&lt;i8&gt;v&lt;/i8&gt;&lt;/t7&gt; 的基本类型的包装器类型（&lt;c9&gt;&lt;a10&gt;Byte&lt;/a10&gt;&lt;/c9&gt;、&lt;c11&gt;&lt;a12&gt;Character&lt;/a12&gt;&lt;/c11&gt;、&lt;c13&gt;&lt;a14&gt;Double&lt;/a14&gt;&lt;/c13&gt;、&lt;c15&gt;&lt;a16&gt;Float&lt;/a16&gt;&lt;/c15&gt;、&lt;c17&gt;&lt;a18&gt;Integer&lt;/a18&gt;&lt;/c17&gt;、&lt;c19&gt;&lt;a20&gt;Long&lt;/a20&gt;&lt;/c19&gt;、&lt;c21&gt;&lt;a22&gt;Short&lt;/a22&gt;&lt;/c21&gt; 或 &lt;c23&gt;&lt;a24&gt;Boolean&lt;/a24&gt;&lt;/c23&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash code of a string, enum, class, or annotation member-value I &lt;t0&gt;&lt;i1&gt;v&lt;/i1&gt;&lt;/t0&gt; is computed as by calling &lt;t2&gt;&lt;i3&gt;v&lt;/i3&gt;.hashCode()&lt;/t2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151721Z" creationid="pingfangx" creationdate="20191014T151721Z">
        <seg>string、enum、class 或 annotation 的成员值 I 的哈希码 &lt;t0&gt;&lt;i1&gt;v&lt;/i1&gt;&lt;/t0&gt; 是通过调用 &lt;t2&gt;&lt;i3&gt;v&lt;/i3&gt;.hashCode()&lt;/t2&gt; 来计算的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by &lt;c0&gt;&lt;a1&gt;hashCode()&lt;/a1&gt;&lt;/c0&gt;) XOR the hash code of the member-value, as defined below:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T145305Z" creationid="pingfangx" creationdate="20191014T145305Z">
        <seg>一个 annotation 的哈希码是其成员（包括那些带有默认值的成员）的哈希码的和，具体说明如下： annotation 成员的哈希码是成员值哈希码的 XOR（它是 &lt;c0&gt;&lt;a1&gt;hashCode()&lt;/a1&gt;&lt;/c0&gt; 计算得到的成员名哈希码的 127 倍），具体说明如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash code of an array member-value is computed by calling the appropriate overloading of &lt;c0&gt;&lt;a1&gt;Arrays.hashCode&lt;/a1&gt;&lt;/c0&gt; on the value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151727Z" creationid="pingfangx" creationdate="20191014T151727Z">
        <seg>数组成员值的哈希码是通过基于该值调用 &lt;c0&gt;&lt;a1&gt;Arrays.hashCode&lt;/a1&gt;&lt;/c0&gt; 的适当重载来计算的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation can communicate the details of the &lt;c6&gt;IOException&lt;/c6&gt; to its caller while conforming to the &lt;c7&gt;Collection&lt;/c7&gt; interface by wrapping the &lt;c8&gt;IOException&lt;/c8&gt; in an appropriate unchecked exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113433Z" creationid="pingfangx" creationdate="20191013T113350Z">
        <seg>实现可以与其调用方交流 &lt;c6&gt;IOException&lt;/c6&gt; 的详细消息，同时通过以一种合适的未检查的异常来包装 &lt;c8&gt;IOException&lt;/c8&gt;，使其符合 &lt;c7&gt;Collection&lt;/c7&gt; 接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation title, version, and vendor strings identify an implementation and are made available conveniently to enable accurate reporting of the packages involved when a problem occurs.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095016Z" creationid="pingfangx" creationdate="20191014T095016Z">
        <seg>实现标题、版本和供应商字符串共同标识了一个实现，并且可以很方便地使用它们来支持出现问题时所涉及的包的准确报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation version strings have no specified syntax and should only be compared for equality with desired version identifiers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095030Z" creationid="pingfangx" creationdate="20191014T095030Z">
        <seg>实现版本字符串没有特定的语法，并且应该只在为了使它们等同于所需的版本标识符时对它们进行比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementations themselves may then be written by independent third-party vendors and plugged in seamlessly as needed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152001Z" creationid="pingfangx" creationdate="20191011T152001Z">
        <seg>实现本身可由独立的第三方厂商来写，可以根据需要进行无缝的插入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementor must also ensure that the relation is transitive: &lt;t0&gt;(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)&lt;/t0&gt; implies &lt;t1&gt;x.compareTo(z)&gt;0&lt;/t1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103039Z" creationid="pingfangx" creationdate="20191014T103039Z">
        <seg>实现类还必须确保关系是可传递的：&lt;t0&gt;(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)&lt;/t0&gt; 意味着 &lt;t1&gt;x.compareTo(z)&gt;0&lt;/t1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementor must ensure &lt;t0&gt;sgn(x.compareTo(y)) == -sgn(y.compareTo(x))&lt;/t0&gt; for all &lt;t1&gt;x&lt;/t1&gt; and &lt;t2&gt;y&lt;/t2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103020Z" creationid="pingfangx" creationdate="20191014T103020Z">
        <seg>实现类必须确保对于所有的 &lt;t0&gt;x&lt;/t0&gt; 和 &lt;t1&gt;y&lt;/t1&gt; 都存在 &lt;t2&gt;sgn(x.compareTo(y)) == -sgn(y.compareTo(x))&lt;/t2&gt; 的关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index argument must be greater than or equal to &lt;c0&gt;0&lt;/c0&gt;, and less than the length of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040205Z" creationid="pingfangx" creationdate="20191014T040205Z">
        <seg>index 参数必须大于等于 &lt;c0&gt;0&lt;/c0&gt;，且小于此序列的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index refers to &lt;c0&gt;char&lt;/c0&gt; values (Unicode code units) and ranges from &lt;c1&gt;0&lt;/c1&gt; to &lt;c2&gt;&lt;a3&gt;length()&lt;/a3&gt;&lt;/c2&gt;&lt;c4&gt; - 1&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040212Z" creationid="pingfangx" creationdate="20191014T040212Z">
        <seg>该索引引用 &lt;c0&gt;char&lt;/c0&gt; 值（Unicode 代码单元），其范围是从 &lt;c1&gt;0&lt;/c1&gt; 到 &lt;c2&gt;&lt;a3&gt;length()&lt;/a3&gt;&lt;/c2&gt;&lt;c4&gt; - 1&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index refers to &lt;c0&gt;char&lt;/c0&gt; values (Unicode code units) and ranges from &lt;c1&gt;0&lt;/c1&gt; to length()&lt;c2&gt; - 1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T065010Z" creationid="pingfangx" creationdate="20191014T065010Z">
        <seg>该索引引用 &lt;c0&gt;char&lt;/c0&gt; 值（Unicode 代码单元），其范围是从 &lt;c1&gt;0&lt;/c1&gt; 到 length()&lt;c2&gt; - 1&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index refers to &lt;c0&gt;char&lt;/c0&gt; values (Unicode code units) and ranges from &lt;c1&gt;1&lt;/c1&gt; to &lt;c2&gt;&lt;a3&gt;length()&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040217Z" creationid="pingfangx" creationdate="20191014T040217Z">
        <seg>该索引引用 &lt;c0&gt;char&lt;/c0&gt; 值（Unicode 代码单元），其范围是从 &lt;c1&gt;1&lt;/c1&gt; 到 &lt;c2&gt;&lt;a3&gt;length()&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index refers to &lt;c0&gt;char&lt;/c0&gt; values (Unicode code units) and ranges from &lt;c1&gt;1&lt;/c1&gt; to length().</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T065027Z" creationid="pingfangx" creationdate="20191014T065027Z">
        <seg>该索引引用 &lt;c0&gt;char&lt;/c0&gt; 值（Unicode 代码单元），其范围是从 &lt;c1&gt;1&lt;/c1&gt; 到 length()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial capacity of the string buffer is &lt;c0&gt;16&lt;/c0&gt; plus the length of the string argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064111Z" creationid="pingfangx" creationdate="20191014T064111Z">
        <seg>该字符串的初始容量为 &lt;c0&gt;16 &lt;/c0&gt; 加上字符串参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial capacity of the string buffer is &lt;c1&gt;16&lt;/c1&gt; plus the length of the &lt;c2&gt;CharSequence&lt;/c2&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T065209Z" creationid="pingfangx" creationdate="20191014T065209Z">
        <seg>该字符串缓冲区的初始容量为 &lt;c1&gt;16&lt;/c1&gt; 加上 &lt;c2&gt;CharSequence&lt;/c2&gt; 参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial capacity of the string builder is &lt;c0&gt;16&lt;/c0&gt; plus the length of the string argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034507Z" creationid="pingfangx" creationdate="20191014T034507Z">
        <seg>该字符串生成器的初始容量为 &lt;c0&gt;16&lt;/c0&gt; 加上字符串参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial capacity of the string builder is &lt;c1&gt;16&lt;/c1&gt; plus the length of the &lt;c2&gt;CharSequence&lt;/c2&gt; argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034518Z" creationid="pingfangx" creationdate="20191014T034518Z">
        <seg>该字符串生成器的初始容量为 &lt;c1&gt;16&lt;/c1&gt; 加上 &lt;c2&gt;CharSequence&lt;/c2&gt; 参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial value is &lt;c5&gt;false&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080112Z" creationid="pingfangx" creationdate="20191014T080112Z">
        <seg>初始值为 &lt;c5&gt;false&lt;/c5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial value is a copy of the environment of the current process (see &lt;c3&gt;&lt;a4&gt;getenv()&lt;/a4&gt;&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075809Z" creationid="pingfangx" creationdate="20191014T075809Z">
        <seg>初始值是当前进程环境的一个副本（请参阅 &lt;c3&gt;&lt;a4&gt;getenv()&lt;/a4&gt;&lt;/c3&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer returned is the largest value &lt;i0&gt;k&lt;/i0&gt; such that:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041255Z" creationid="pingfangx" creationdate="20191014T041255Z">
        <seg>返回的整数是满足以下条件的最大 &lt;i0&gt;k&lt;/i0&gt; 值：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer returned is the smallest value &lt;i0&gt;k&lt;/i0&gt; such that:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040337Z" creationid="pingfangx" creationdate="20191014T040337Z">
        <seg>返回的整数是满足以下条件的最小 &lt;i0&gt;k&lt;/i0&gt; 值：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer returned is the smallest value &lt;t0&gt;k&lt;/t0&gt; for which:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040345Z" creationid="pingfangx" creationdate="20191014T040345Z">
        <seg>返回的整数是满足以下条件的最小 &lt;t0&gt;k&lt;/t0&gt; 值：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The invocation handler processes the encoded method invocation as appropriate and the result that it returns will be returned as the result of the method invocation on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112250Z" creationid="pingfangx" creationdate="20191015T112250Z">
        <seg>调用处理程序以适当的方式处理编码的方法调用，并且它返回的结果将作为代理实例上方法调用的结果返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The iterators returned by all of this class's "collection view methods" are &lt;i0&gt;fail-fast&lt;/i0&gt;: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own &lt;t1&gt;remove&lt;/t1&gt; method, the iterator will throw a &lt;a2&gt;ConcurrentModificationException&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T051442Z" creationid="pingfangx" creationdate="20191026T051442Z">
        <seg>由所有此类的“collection 视图方法”所返回的迭代器都是&lt;i0&gt;快速失败&lt;/i0&gt; 的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 &lt;t1&gt;remove&lt;/t1&gt; 方法，其他任何时间任何方式的修改，迭代器都将抛出 &lt;a2&gt;ConcurrentModificationException&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The iterators returned by all of this class's "collection view methods" are &lt;i0&gt;fail-fast&lt;/i0&gt;: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own &lt;t1&gt;remove&lt;/t1&gt; method, the iterator will throw a &lt;c2&gt;&lt;a3&gt;ConcurrentModificationException&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134930Z" creationid="pingfangx" creationdate="20191025T134930Z">
        <seg>由所有此类的“collection 视图方法”所返回的迭代器都是&lt;i0&gt;快速失败&lt;/i0&gt; 的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 &lt;t1&gt;remove&lt;/t1&gt; 方法，其他任何时间任何方式的修改，迭代器都将抛出 &lt;c2&gt;&lt;a3&gt;ConcurrentModificationException&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The java.net package can be roughly divided in two sections:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T073136Z" creationid="pingfangx" creationdate="20191011T073136Z">
        <seg>java.net 包可以大致分为两个部分：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The java.net package provides 4 kinds of Sockets:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080500Z" creationid="pingfangx" creationdate="20191011T080500Z">
        <seg>java.net 包提供 4 种套接字：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The kc argument caches comparableClassFor(key) upon first use comparing keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100530Z" creationid="pingfangx" creationdate="20191026T100530Z">
        <seg>kc 参数在第一次使用比较键时缓存 comparableClassFor(key)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key whose presence in this map is to be tested</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140548Z" creationid="pingfangx" creationdate="20191025T140548Z">
        <seg>要测试其是否在此映射中存在的键</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lack of information on the value to your application of each reference limits the usefulness of soft references.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155906Z" creationid="pingfangx" creationdate="20191014T155906Z">
        <seg>缺乏关于每个引用的应用价值的信息限制了软引用的有用性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T090702Z" creationid="pingfangx" creationdate="20191014T090702Z">
        <seg>最后一个元素代表堆栈底，是该序列中最旧的方法调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length (in &lt;c4&gt;char&lt;/c4&gt;s) of the returned sequence is &lt;t5&gt;end - start&lt;/t5&gt;, so if &lt;t6&gt;start == end&lt;/t6&gt; then an empty sequence is returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071110Z" creationid="pingfangx" creationdate="20191014T071110Z">
        <seg>返回序列的长度（&lt;c4&gt;char&lt;/c4&gt; 中）是 &lt;t5&gt;end - start&lt;/t5&gt;，因此，如果 &lt;t6&gt;start == end&lt;/t6&gt;，则返回一个空序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length is the number of 16-bit &lt;c0&gt;char&lt;/c0&gt;s in the sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071054Z" creationid="pingfangx" creationdate="20191014T071054Z">
        <seg>长度为序列中 16 位 &lt;c0&gt;char&lt;/c0&gt; 数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of the string will be the length of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071207Z" creationid="pingfangx" creationdate="20191014T071207Z">
        <seg>字符串的长度就是此序列的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of this sequence increases by &lt;c0&gt;1&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034649Z" creationid="pingfangx" creationdate="20191014T034649Z">
        <seg>此序列的长度将增加 &lt;c0&gt;1&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of this sequence increases by &lt;c0&gt;&lt;a1&gt;Character.charCount(codePoint)&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035404Z" creationid="pingfangx" creationdate="20191014T035404Z">
        <seg>此序列的长度将增加 &lt;c0&gt;&lt;a1&gt;Character.charCount(codePoint)&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of this sequence increases by &lt;c5&gt;len&lt;/c5&gt; &lt;c6&gt;char&lt;/c6&gt;s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041031Z" creationid="pingfangx" creationdate="20191014T041031Z">
        <seg>此序列的长度将加 &lt;c5&gt;len&lt;/c5&gt; 个 &lt;c6&gt;char&lt;/c6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of this sequence increases by the length of the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034810Z" creationid="pingfangx" creationdate="20191014T034810Z">
        <seg>此字符将增加该参数的长度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of this sequence increases by the value of &lt;c3&gt;len&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034736Z" creationid="pingfangx" creationdate="20191014T034736Z">
        <seg>此字符的长度增加 &lt;c3&gt;len&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of this sequence is increased by &lt;c3&gt;end - start&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T062802Z" creationid="pingfangx" creationdate="20191014T062802Z">
        <seg>序列的长度将增加 &lt;c3&gt;end - start&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length of this sequence is increased by the value of &lt;c3&gt;end - start&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035205Z" creationid="pingfangx" creationdate="20191014T035205Z">
        <seg>序列的长度将增加 &lt;c3&gt;end - start&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The load factor for the hash table.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084359Z" creationid="pingfangx" creationdate="20191026T084359Z">
        <seg>哈希表的加载因子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The load factor used when none specified in constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082345Z" creationid="pingfangx" creationdate="20191026T082345Z">
        <seg>当没有在构造函数中指定时，所使用的加载因子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lock returned by method &lt;c0&gt;&lt;a1&gt;readLock()&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123056Z" creationid="pingfangx" creationdate="20191025T123056Z">
        <seg>&lt;c0&gt;&lt;a1&gt;readLock()&lt;/a1&gt;&lt;/c0&gt; 方法返回的锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lock returned by method &lt;c0&gt;&lt;a1&gt;writeLock()&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123059Z" creationid="pingfangx" creationdate="20191025T123059Z">
        <seg>&lt;c0&gt;&lt;a1&gt;writeLock()&lt;/a1&gt;&lt;/c0&gt; 方法返回的锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lower (least significant) 21 bits of &lt;c2&gt;int&lt;/c2&gt; are used to represent Unicode code points and the upper (most significant) 11 bits must be zero.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143719Z" creationid="pingfangx" creationdate="20191013T143719Z">
        <seg>&lt;c2&gt;int&lt;/c2&gt; 的 21 个低位（最低有效位）用于表示 Unicode 代码点，并且 11 个高位（最高有效位）必须为零。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main implementation is &lt;c2&gt;&lt;a3&gt;ReentrantLock&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122811Z" creationid="pingfangx" creationdate="20191025T122811Z">
        <seg>主要的实现是 &lt;c2&gt;&lt;a3&gt;ReentrantLock&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The map will be empty after this call returns.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140540Z" creationid="pingfangx" creationdate="20191025T140540Z">
        <seg>此调用返回后，映射将为空。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum capacity, used if a higher value is implicitly specified by either of the constructors with arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082259Z" creationid="pingfangx" creationdate="20191026T082259Z">
        <seg>最大容量，如果任何一个带参数的构造函数隐式指定了更大的值，则使用该最大值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum priority that a thread can have.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081350Z" creationid="pingfangx" creationdate="20191014T081350Z">
        <seg>线程可以具有的最高优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum radix available for conversion to and from strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144425Z" creationid="pingfangx" creationdate="20191013T144425Z">
        <seg>可用于与字符串相互转换的最大基数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum value of a &lt;a0&gt; Unicode code point&lt;/a0&gt;, constant &lt;c1&gt;U+10FFFF&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144403Z" creationid="pingfangx" creationdate="20191013T144154Z">
        <seg>&lt;a0&gt; Unicode 代码点&lt;/a0&gt; 的最大值，常量 &lt;c1&gt;U+10FFFF&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum value of a &lt;a0&gt; Unicode high-surrogate code unit&lt;/a0&gt; in the UTF-16 encoding, constant &lt;c1&gt;'\uDBFF'&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144359Z" creationid="pingfangx" creationdate="20191013T144201Z">
        <seg>UTF-16 编码中的 &lt;a0&gt; Unicode 高代理项代码单元&lt;/a0&gt; 的最大值，常量 &lt;c1&gt;'\uDBFF'&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum value of a &lt;a0&gt; Unicode low-surrogate code unit&lt;/a0&gt; in the UTF-16 encoding, constant &lt;c1&gt;'\uDFFF'&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144423Z" creationid="pingfangx" creationdate="20191013T144423Z">
        <seg>UTF-16 编码中的 &lt;a0&gt; Unicode 低代理项代码单元&lt;/a0&gt; 的最大值，常量 &lt;c1&gt;'\uDFFF'&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum value of a Unicode surrogate code unit in the UTF-16 encoding, constant &lt;c0&gt;'\uDFFF'&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144519Z" creationid="pingfangx" creationdate="20191013T144519Z">
        <seg>UTF-16 编码中的 Unicode 代理项代码单元的最大值，常量 &lt;c0&gt;'\uDFFF'&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory effects for accesses and updates of atomics generally follow the rules for volatiles, as stated in &lt;a0&gt; Chapter 17 of &lt;c1&gt;The Java™ Language Specification&lt;/c1&gt;&lt;/a0&gt;:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121152Z" creationid="pingfangx" creationdate="20191025T121152Z">
        <seg>原子访问和更新的内存效果一般遵循以下可变规则，正如 &lt;a0&gt;&lt;c1&gt;The Java™ Language Specification&lt;/c1&gt; 17 章&lt;/a0&gt; 中的声明：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;defineClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; converts an array of bytes into an instance of class &lt;t3&gt;Class&lt;/t3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072239Z" creationid="pingfangx" creationdate="20191014T072239Z">
        <seg>&lt;c0&gt;&lt;a1&gt;&lt;t2&gt;defineClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 方法将一个 byte 数组转换为 &lt;t3&gt;Class&lt;/t3&gt; 类的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method &lt;c0&gt;clone&lt;/c0&gt; for class &lt;c1&gt;Object&lt;/c1&gt; performs a specific cloning operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135511Z" creationid="pingfangx" creationdate="20191014T135511Z">
        <seg>&lt;c0&gt;Object&lt;/c0&gt; 类的 &lt;c1&gt;clone&lt;/c1&gt; 方法执行特定的复制操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method does override or implement a method declared in a supertype.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101154Z" creationid="pingfangx" creationdate="20191014T101154Z">
        <seg>该方法不覆盖或实现超类中声明的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method has a signature that is override-equivalent to that of any public method declared in &lt;a0&gt;Object&lt;/a0&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101205Z" creationid="pingfangx" creationdate="20191014T101205Z">
        <seg>该方法有一个与 &lt;a0&gt;Object&lt;/a0&gt;&lt;/a1&gt; 中声明的任何公共方法相同的重写签名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method index of this method within its defining dex file</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104051Z" creationid="pingfangx" creationdate="20191015T104051Z">
        <seg>此方法在其定义的 dex 文件中的方法索引</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods and constructors of objects created by a class loader may reference other classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072247Z" creationid="pingfangx" creationdate="20191014T072247Z">
        <seg>类加载器所创建对象的方法和构造方法可以引用其他类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods and data of class &lt;c0&gt;Character&lt;/c0&gt; are defined by the information in the &lt;i1&gt;UnicodeData&lt;/i1&gt; file that is part of the Unicode Character Database maintained by the Unicode Consortium.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T142033Z" creationid="pingfangx" creationdate="20191013T142033Z">
        <seg>&lt;c0&gt;Character&lt;/c0&gt; 类的方法和数据是通过 &lt;i1&gt;UnicodeData&lt;/i1&gt; 文件中的信息定义的，该文件是 Unicode Consortium 维护的 Unicode Character Database 的一部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods are synchronized where necessary so that all the operations on any particular instance behave as if they occur in some serial order that is consistent with the order of the method calls made by each of the individual threads involved.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063832Z" creationid="pingfangx" creationdate="20191014T063832Z">
        <seg>可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods of all classes in &lt;c0&gt;java.util.concurrent&lt;/c0&gt; and its subpackages extend these guarantees to higher-level synchronization.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113354Z" creationid="pingfangx" creationdate="20191025T113354Z">
        <seg>&lt;c0&gt;java.util.concurrent&lt;/c0&gt; 中所有类的方法及其子包扩展了这些对更高级别同步的保证。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods that accept an &lt;c0&gt;int&lt;/c0&gt; value support all Unicode characters, including supplementary characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143740Z" creationid="pingfangx" creationdate="20191013T143740Z">
        <seg>接受一个 &lt;c0&gt;int&lt;/c0&gt; 值的方法支持所有 Unicode 字符，其中包括增补字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods that create processes may not work well for special processes on certain native platforms, such as native windowing processes, daemon processes, Win16/DOS processes on Microsoft Windows, or shell scripts.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074614Z" creationid="pingfangx" creationdate="20191014T074614Z">
        <seg>创建进程的方法可能无法针对某些本机平台上的特定进程很好地工作，比如，本机窗口进程，守护进程，Microsoft Windows 上的 Win16/DOS 进程，或者 shell 脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods that only accept a &lt;c0&gt;char&lt;/c0&gt; value cannot support supplementary characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143726Z" creationid="pingfangx" creationdate="20191013T143726Z">
        <seg>只接受一个 &lt;c0&gt;char&lt;/c0&gt; 值的方法无法支持增补字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The methods which require &lt;c4&gt;fdlibm&lt;/c4&gt; semantics are &lt;c5&gt;sin&lt;/c5&gt;, &lt;c6&gt;cos&lt;/c6&gt;, &lt;c7&gt;tan&lt;/c7&gt;, &lt;c8&gt;asin&lt;/c8&gt;, &lt;c9&gt;acos&lt;/c9&gt;, &lt;c10&gt;atan&lt;/c10&gt;, &lt;c11&gt;exp&lt;/c11&gt;, &lt;c12&gt;log&lt;/c12&gt;, &lt;c13&gt;log10&lt;/c13&gt;, &lt;c14&gt;cbrt&lt;/c14&gt;, &lt;c15&gt;atan2&lt;/c15&gt;, &lt;c16&gt;pow&lt;/c16&gt;, &lt;c17&gt;sinh&lt;/c17&gt;, &lt;c18&gt;cosh&lt;/c18&gt;, &lt;c19&gt;tanh&lt;/c19&gt;, &lt;c20&gt;hypot&lt;/c20&gt;, &lt;c21&gt;expm1&lt;/c21&gt;, and &lt;c22&gt;log1p&lt;/c22&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095516Z" creationid="pingfangx" creationdate="20191014T095516Z">
        <seg>需要 &lt;c4&gt;fdlibm&lt;/c4&gt; 语义的方法有 &lt;c5&gt;sin&lt;/c5&gt;、&lt;c6&gt;cos&lt;/c6&gt;、&lt;c7&gt;tan&lt;/c7&gt;、&lt;c8&gt;asin&lt;/c8&gt;、&lt;c9&gt;acos&lt;/c9&gt;、&lt;c10&gt;atan&lt;/c10&gt;、&lt;c11&gt;exp&lt;/c11&gt;、&lt;c12&gt;log&lt;/c12&gt;、&lt;c13&gt;log10&lt;/c13&gt;、&lt;c14&gt;cbrt&lt;/c14&gt;、&lt;c15&gt;atan2&lt;/c15&gt;、&lt;c16&gt;pow&lt;/c16&gt;、&lt;c17&gt;sinh&lt;/c17&gt;、&lt;c18&gt;cosh&lt;/c18&gt;、&lt;c19&gt;tanh&lt;/c19&gt;、&lt;c20&gt;hypot&lt;/c20&gt;、&lt;c21&gt;expm1&lt;/c21&gt; 和 &lt;c22&gt;log1p&lt;/c22&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum priority that a thread can have.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081354Z" creationid="pingfangx" creationdate="20191014T081354Z">
        <seg>线程可以具有的最低优先级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum radix available for conversion to and from strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144611Z" creationid="pingfangx" creationdate="20191013T144611Z">
        <seg>可用于与字符串相互转换的最小基数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum value of a &lt;a0&gt; Unicode code point&lt;/a0&gt;, constant &lt;c1&gt;U+0000&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144536Z" creationid="pingfangx" creationdate="20191013T144536Z">
        <seg>&lt;a0&gt; Unicode 代码点&lt;/a0&gt; 的最小值，常量 &lt;c1&gt;U+0000&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum value of a &lt;a0&gt; Unicode high-surrogate code unit&lt;/a0&gt; in the UTF-16 encoding, constant &lt;c1&gt;'\uD800'&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144553Z" creationid="pingfangx" creationdate="20191013T144553Z">
        <seg>UTF-16 编码中的 &lt;a0&gt; Unicode 高代理项代码单元&lt;/a0&gt; 的最小值，常量 &lt;c1&gt;'\uD800'&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum value of a &lt;a0&gt; Unicode low-surrogate code unit&lt;/a0&gt; in the UTF-16 encoding, constant &lt;c1&gt;'\uDC00'&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144609Z" creationid="pingfangx" creationdate="20191013T144609Z">
        <seg>UTF-16 编码中的 &lt;a0&gt; Unicode 低代理项代码单元&lt;/a0&gt; 的最小值，常量 &lt;c1&gt;'\uDC00'&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum value of a &lt;a0&gt; Unicode supplementary code point&lt;/a0&gt;, constant &lt;c1&gt;U+10000&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144746Z" creationid="pingfangx" creationdate="20191013T144746Z">
        <seg>&lt;a0&gt; Unicode 增补代码点&lt;/a0&gt; 的最小值，常量 &lt;c1&gt;U+10000&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum value of a Unicode surrogate code unit in the UTF-16 encoding, constant &lt;c0&gt;'\uD800'&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144842Z" creationid="pingfangx" creationdate="20191013T144812Z">
        <seg>UTF-16 编码中的 Unicode 代理项代码单元的最小值，常量 &lt;c0&gt;'\uD800'&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most important classes are &lt;c0&gt;Object&lt;/c0&gt;, which is the root of the class hierarchy, and &lt;c1&gt;Class&lt;/c1&gt;, instances of which represent classes at run time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T061431Z" creationid="pingfangx" creationdate="20191012T061431Z">
        <seg>最重要的类是 &lt;c0&gt;Object&lt;/c0&gt;（它是类层次结构的根）和 &lt;c1&gt;Class&lt;/c1&gt;（它的实例表示正在运行的应用程序中的类）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The multicast datagram socket class is useful for sending and receiving IP multicast packets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083325Z" creationid="pingfangx" creationdate="20191011T083325Z">
        <seg>多播数据报套接字类用于发送和接收 IP 多播包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name must match exactly an identifier used to declare an enum constant in this type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094547Z" creationid="pingfangx" creationdate="20191014T094547Z">
        <seg>名称必须与在此类型中声明枚举常量所用的标识符完全匹配。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The natural order implemented by this method is the order in which the constants are declared.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094203Z" creationid="pingfangx" creationdate="20191014T094203Z">
        <seg>该方法实现的自然顺序就是声明常量的顺序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The natural ordering for a class &lt;t0&gt;C&lt;/t0&gt; is said to be &lt;i1&gt;consistent with equals&lt;/i1&gt; if and only if &lt;t2&gt;e1.compareTo(e2) == 0&lt;/t2&gt; has the same boolean value as &lt;t3&gt;e1.equals(e2)&lt;/t3&gt; for every &lt;t4&gt;e1&lt;/t4&gt; and &lt;t5&gt;e2&lt;/t5&gt; of class &lt;t6&gt;C&lt;/t6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101840Z" creationid="pingfangx" creationdate="20191014T101644Z">
        <seg>对于类 &lt;t6&gt;C&lt;/t6&gt; 的每一个 &lt;t4&gt;e1&lt;/t4&gt; 和 &lt;t5&gt;e2&lt;/t5&gt; 来说，当且仅当 &lt;t2&gt;e1.compareTo(e2) == 0&lt;/t2&gt; 与 &lt;t3&gt;e1.equals(e2)&lt;/t3&gt; 具有相同的 boolean 值时，类 &lt;t0&gt;C&lt;/t0&gt; 的自然排序才叫做&lt;i1&gt;与 equals 一致&lt;/i1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The network class loader subclass must define the methods &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;findClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; and &lt;t3&gt;loadClassData&lt;/t3&gt; to load a class from the network.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072324Z" creationid="pingfangx" creationdate="20191014T072324Z">
        <seg>网络类加载器子类必须定义方法 &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;findClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 和 &lt;t3&gt;loadClassData&lt;/t3&gt;，以实现从网络加载类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new capacity is the larger of:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040259Z" creationid="pingfangx" creationdate="20191014T040259Z">
        <seg>新容量的大小应大于：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new process will invoke the command and arguments given by &lt;c0&gt;&lt;a1&gt;command()&lt;/a1&gt;&lt;/c0&gt;, in a working directory as given by &lt;c2&gt;&lt;a3&gt;directory()&lt;/a3&gt;&lt;/c2&gt;, with a process environment as given by &lt;c4&gt;&lt;a5&gt;environment()&lt;/a5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080126Z" creationid="pingfangx" creationdate="20191014T080126Z">
        <seg>在 &lt;c0&gt;&lt;a1&gt;directory()&lt;/a1&gt;&lt;/c0&gt; 指定的工作目录中，利用 &lt;c2&gt;&lt;a3&gt;environment()&lt;/a3&gt;&lt;/c2&gt; 指定的进程环境，新进程将调用由 &lt;c4&gt;&lt;a5&gt;command()&lt;/a5&gt;&lt;/c4&gt; 给出的命令和参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new reference is not registered with any queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160004Z" creationid="pingfangx" creationdate="20191014T160004Z">
        <seg>新的引用没有向任何队列注册。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next size value at which to resize (capacity * load factor).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084037Z" creationid="pingfangx" creationdate="20191026T084037Z">
        <seg>下一次调整大小的值（容量 * 加载因子）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent a &lt;c0&gt;byte&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121339Z" creationid="pingfangx" creationdate="20191013T121339Z">
        <seg>用于以二进制补码形式表示 &lt;c0&gt;byte&lt;/c0&gt; 值的位数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132617Z" creationid="pingfangx" creationdate="20191013T132617Z">
        <seg>用于表示 &lt;c0&gt;double&lt;/c0&gt; 值的位数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent a &lt;c0&gt;float&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132027Z" creationid="pingfangx" creationdate="20191013T132027Z">
        <seg>表示一个 &lt;c0&gt;float&lt;/c0&gt; 值所使用的位数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent a &lt;c0&gt;long&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124917Z" creationid="pingfangx" creationdate="20191013T124917Z">
        <seg>用来以二进制补码形式表示 &lt;c0&gt;long&lt;/c0&gt; 值的位数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent a &lt;c0&gt;short&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122024Z" creationid="pingfangx" creationdate="20191013T122024Z">
        <seg>用来以二进制补码形式表示 &lt;c0&gt;short&lt;/c0&gt; 值的位数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent a &lt;t0&gt;char&lt;/t0&gt; value in unsigned binary form, constant &lt;c1&gt;16&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T144919Z" creationid="pingfangx" creationdate="20191013T144919Z">
        <seg>用来以无符号二进制形式表示 &lt;t0&gt;char&lt;/t0&gt; 值的位数，常量 &lt;c1&gt;16&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent an &lt;c0&gt;int&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123248Z" creationid="pingfangx" creationdate="20191013T123248Z">
        <seg>用来以二进制补码形式表示 &lt;c0&gt;int&lt;/c0&gt; 值的比特位数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes used to represent a &lt;c0&gt;byte&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T121317Z" creationid="pingfangx" creationdate="20191013T121317Z">
        <seg>用于以二进制补码形式表示 &lt;c0&gt;byte&lt;/c0&gt; 值的字节数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes used to represent a &lt;c0&gt;char&lt;/c0&gt; value in unsigned binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143914Z" creationid="pingfangx" creationdate="20191013T143914Z">
        <seg>用来以无符号二进制形式表示 &lt;c0&gt;char&lt;/c0&gt; 值的字节数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes used to represent a &lt;c0&gt;double&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T132602Z" creationid="pingfangx" creationdate="20191013T132602Z">
        <seg>表示一个 &lt;c0&gt;double&lt;/c0&gt; 值所使用的字节数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes used to represent a &lt;c0&gt;float&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T131417Z" creationid="pingfangx" creationdate="20191013T131349Z">
        <seg>表示一个 &lt;c0&gt;float&lt;/c0&gt; 值所使用的字节数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes used to represent a &lt;c0&gt;int&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T123242Z" creationid="pingfangx" creationdate="20191013T123242Z">
        <seg>用于以二进制补码形式表示 &lt;c0&gt;int&lt;/c0&gt; 值的字节数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes used to represent a &lt;c0&gt;long&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T124912Z" creationid="pingfangx" creationdate="20191013T124912Z">
        <seg>用于以二进制补码形式表示 &lt;c0&gt;long&lt;/c0&gt; 值的字节数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes used to represent a &lt;c0&gt;short&lt;/c0&gt; value in two's complement binary form.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T122018Z" creationid="pingfangx" creationdate="20191013T122018Z">
        <seg>用于以二进制补码形式表示 &lt;c0&gt;short&lt;/c0&gt; 值的字节数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of dimensions of the new array must not exceed the number of array dimensions supported by the implementation (typically 255).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103735Z" creationid="pingfangx" creationdate="20191015T103735Z">
        <seg>新数组的维数不能超过该实现所支持的数组维数（通常为 255）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of key-value mappings contained in this map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083918Z" creationid="pingfangx" creationdate="20191026T083918Z">
        <seg>此映射中包含的键值映射的数量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of times this HashMap has been structurally modified Structural modifications are those that change the number of mappings in the HashMap or otherwise modify its internal structure (e.g., rehash).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083950Z" creationid="pingfangx" creationdate="20191026T083950Z">
        <seg>这个 HashMap 被结构修改的次数，结构修改是那些改变 HashMap 中的映射数量或修改其内部结构（例如，rehash）的修改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only family of subsets defined in the &lt;c0&gt;Character&lt;/c0&gt; class is &lt;c1&gt;&lt;a2&gt;Character.UnicodeBlock&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093456Z" creationid="pingfangx" creationdate="20191014T093434Z">
        <seg>&lt;c0&gt;Character&lt;/c0&gt; 类中定义的唯一子集系列是 &lt;c1&gt;&lt;a2&gt;Character.UnicodeBlock&lt;/a2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The operating system program file was not found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080310Z" creationid="pingfangx" creationdate="20191014T080310Z">
        <seg>未找到操作系统程序文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The other way to create a thread is to declare a class that implements the &lt;c0&gt;Runnable&lt;/c0&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081119Z" creationid="pingfangx" creationdate="20191014T081119Z">
        <seg>创建线程的另一种方法是声明实现 &lt;c0&gt;Runnable&lt;/c0&gt; 接口的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a &lt;c0&gt;char&lt;/c0&gt; array by the method &lt;c1&gt;&lt;a2&gt;toChars(int)&lt;/a2&gt;&lt;/c1&gt; and the character in that array were then &lt;c3&gt;&lt;a4&gt;ERROR(appended/#append(char[]) appended)&lt;/a4&gt;&lt;/c3&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040046Z" creationid="pingfangx" creationdate="20191014T040046Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c1&gt;&lt;a2&gt;Character.toChars(int)&lt;/a2&gt;&lt;/c1&gt; 方法将参数转为 &lt;c0&gt;char&lt;/c0&gt; 数组，然后将数组中的字符&lt;c3&gt;&lt;a4&gt;追加&lt;/a4&gt;&lt;/c3&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(Object)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034727Z" creationid="pingfangx" creationdate="20191014T034727Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(Object)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(boolean)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034632Z" creationid="pingfangx" creationdate="20191014T034632Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(boolean)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(char)&lt;/a1&gt;&lt;/c0&gt;, and the character in that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034707Z" creationid="pingfangx" creationdate="20191014T034707Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(char)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(char[])&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034827Z" creationid="pingfangx" creationdate="20191014T034827Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(char[])&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(double)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034808Z" creationid="pingfangx" creationdate="20191014T034808Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(double)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(float)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035117Z" creationid="pingfangx" creationdate="20191014T035117Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(float)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(int)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035155Z" creationid="pingfangx" creationdate="20191014T035155Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(int)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(long)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034646Z" creationid="pingfangx" creationdate="20191014T034646Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(long)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the arguments were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(char[], int, int)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(appended/#append(String) appended)&lt;/a3&gt;&lt;/c2&gt; to this character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034740Z" creationid="pingfangx" creationdate="20191014T034740Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(char[], int, int)&lt;/a1&gt;&lt;/c0&gt; 方法将参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;追加&lt;/a3&gt;&lt;/c2&gt;到此字符序列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(Object)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041231Z" creationid="pingfangx" creationdate="20191014T041231Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(Object)&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(boolean)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041235Z" creationid="pingfangx" creationdate="20191014T041235Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(boolean)&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(char)&lt;/a1&gt;&lt;/c0&gt;, and the character in that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041016Z" creationid="pingfangx" creationdate="20191014T041016Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(char)&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(char[])&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040855Z" creationid="pingfangx" creationdate="20191014T040855Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(char[])&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(double)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041222Z" creationid="pingfangx" creationdate="20191014T041222Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(double)&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(float)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040919Z" creationid="pingfangx" creationdate="20191014T040919Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(float)&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(int)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041036Z" creationid="pingfangx" creationdate="20191014T041036Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(int)&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overall effect is exactly as if the second argument were converted to a string by the method &lt;c0&gt;&lt;a1&gt;valueOf(long)&lt;/a1&gt;&lt;/c0&gt;, and the characters of that string were then &lt;c2&gt;&lt;a3&gt;ERROR(inserted/#insert(int,String) inserted)&lt;/a3&gt;&lt;/c2&gt; into this character sequence at the indicated offset.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041020Z" creationid="pingfangx" creationdate="20191014T041020Z">
        <seg>该方法的最终效果与以下操作过程的效果相同：先使用 &lt;c0&gt;&lt;a1&gt;valueOf(long)&lt;/a1&gt;&lt;/c0&gt; 方法将第二个参数转换为字符串，然后将所得字符串的字符&lt;c2&gt;&lt;a3&gt;插入&lt;/a3&gt;&lt;/c2&gt;到此字符序列的指定位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The parent process uses these streams to feed input to and get output from the subprocess.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074756Z" creationid="pingfangx" creationdate="20191014T074756Z">
        <seg>父进程使用这些流来提供到子进程的输入和获得从子进程的输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The precise meaning of "copy" may depend on the class of the object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135237Z" creationid="pingfangx" creationdate="20191014T135237Z">
        <seg>“副本”的准确含义可能依赖于对象的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The primitive Java types (&lt;c2&gt;boolean&lt;/c2&gt;, &lt;c3&gt;byte&lt;/c3&gt;, &lt;c4&gt;char&lt;/c4&gt;, &lt;c5&gt;short&lt;/c5&gt;, &lt;c6&gt;int&lt;/c6&gt;, &lt;c7&gt;long&lt;/c7&gt;, &lt;c8&gt;float&lt;/c8&gt;, and &lt;c9&gt;double&lt;/c9&gt;), and the keyword &lt;c10&gt;void&lt;/c10&gt; are also represented as &lt;c11&gt;Class&lt;/c11&gt; objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T024718Z" creationid="pingfangx" creationdate="20191013T024718Z">
        <seg>基本的 Java 类型（ &lt;c2&gt;boolean&lt;/c2&gt; 、 &lt;c3&gt;byte&lt;/c3&gt; 、 &lt;c4&gt;char&lt;/c4&gt; 、 &lt;c5&gt;short&lt;/c5&gt; 、 &lt;c6&gt;int&lt;/c6&gt; 、 &lt;c7&gt;long&lt;/c7&gt; 、 &lt;c8&gt;float&lt;/c8&gt; 和 &lt;c9&gt;double&lt;/c9&gt; ）和关键字 &lt;c10&gt;void&lt;/c10&gt; 也表示为 &lt;c11&gt;Class&lt;/c11&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The principal operations on a &lt;c0&gt;StringBuffer&lt;/c0&gt; are the &lt;c1&gt;append&lt;/c1&gt; and &lt;c2&gt;insert&lt;/c2&gt; methods, which are overloaded so as to accept data of any type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063901Z" creationid="pingfangx" creationdate="20191014T063901Z">
        <seg>&lt;c0&gt;StringBuffer&lt;/c0&gt; 上的主要操作是 &lt;c1&gt;append&lt;/c1&gt; 和 &lt;c2&gt;insert&lt;/c2&gt; 方法，可重载这些方法，以接受任意类型的数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The principal operations on a &lt;c0&gt;StringBuilder&lt;/c0&gt; are the &lt;c1&gt;append&lt;/c1&gt; and &lt;c2&gt;insert&lt;/c2&gt; methods, which are overloaded so as to accept data of any type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030338Z" creationid="pingfangx" creationdate="20191014T030338Z">
        <seg>在 &lt;c0&gt;StringBuilder&lt;/c0&gt; 上的主要操作是 &lt;c1&gt;append&lt;/c1&gt; 和 &lt;c2&gt;insert&lt;/c2&gt; 方法，可重载这些方法，以接受任意类型的数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The program may remove references from a queue either by polling or by blocking until a reference becomes available.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085809Z" creationid="pingfangx" creationdate="20191012T085809Z">
        <seg>通过轮询或阻塞，直到获得了引用，程序才可以从队列中移除引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The proxy class will be defined by the specified class loader and will implement all of the supplied interfaces.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113535Z" creationid="pingfangx" creationdate="20191015T113535Z">
        <seg>该代理类将由指定的类加载器定义，并将实现提供的所有接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The quality of implementation specifications concern two properties, accuracy of the returned result and monotonicity of the method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151217Z" creationid="pingfangx" creationdate="20191013T151217Z">
        <seg>实现规范的质量涉及到两种属性，即返回结果的准确性和方法的单调性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range of legal &lt;e2&gt;code point&lt;/e2&gt;s is now U+0000 to U+10FFFF, known as &lt;e3&gt;Unicode scalar value&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143101Z" creationid="pingfangx" creationdate="20191013T143101Z">
        <seg>合法&lt;e2&gt;代码点&lt;/e2&gt; 的范围现在是从 U+0000 到 U+10FFFF，即通常所说的 &lt;e3&gt;Unicode 标量值&lt;/e3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reader/writer facility, available through the &lt;c4&gt;javax.sql.RowSet&lt;/c4&gt; group of interfaces, can be customized to use and update data from a spread sheet, flat file, or any other tabular data source.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033029Z" creationid="pingfangx" creationdate="20191012T033029Z">
        <seg>通过接口的 &lt;c4&gt;javax.sql.RowSet&lt;/c4&gt; 组可以使用的 reader/writer 实用程序，可以被定制以使用和更新来自电子表格、纯文本文件或其他任何表格式数据源的数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The recommended language is "Note: this class has a natural ordering that is inconsistent with equals."</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T103214Z" creationid="pingfangx" creationdate="20191014T103158Z">
        <seg>推荐如此阐述：“注意：此类具有与 equals 不一致的自然排序。”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The recommended usage is to use &lt;c0&gt;&lt;a1&gt;URI&lt;/a1&gt;&lt;/c0&gt; to identify resources, then convert it into a &lt;c2&gt;&lt;a3&gt;URL&lt;/a3&gt;&lt;/c2&gt; when it is time to access the resource.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082826Z" creationid="pingfangx" creationdate="20191011T082826Z">
        <seg>建议的用法是使用 &lt;c0&gt;&lt;a1&gt;URI&lt;/a1&gt;&lt;/c0&gt; 指定资源，然后在访问资源时将其转换为 &lt;c2&gt;&lt;a3&gt;URL&lt;/a3&gt;&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The recording of this causal information is referred to as the &lt;i3&gt;chained exception&lt;/i3&gt; facility, as the cause can, itself, have a cause, and so on, leading to a "chain" of exceptions, each caused by another.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T114523Z" creationid="pingfangx" creationdate="20191013T114523Z">
        <seg>这种因果信息的记录被称为&lt;i3&gt;异常链&lt;/i3&gt; 设施，因为 cause 自身也会有 cause，依此类推，就形成了异常链，每个异常都是由另一个异常引起的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reflected field may be a class (static) field or an instance field.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104458Z" creationid="pingfangx" creationdate="20191015T104458Z">
        <seg>反射的字段可能是一个类（静态）字段或实例字段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reflected method may be a class method or an instance method (including an abstract method).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110123Z" creationid="pingfangx" creationdate="20191015T110123Z">
        <seg>所反映的方法可能是类方法或实例方法（包括抽象方法）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The relationship between a registered reference object and its queue is one-sided.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090226Z" creationid="pingfangx" creationdate="20191012T090226Z">
        <seg>已注册的引用对象及其队列之间的关系是单向的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reliability of this method is important for the ability to use it to make security decisions, so its implementation should not just test if the class in question extends &lt;c0&gt;Proxy&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T115549Z" creationid="pingfangx" creationdate="20191015T115549Z">
        <seg>此方法的可靠性对于使用它做出安全决策而言非常重要，所以此方法的实现不应仅测试相关的类是否可以扩展 &lt;c0&gt;Proxy&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is that two threads are running concurrently: the current thread (which returns from the call to the &lt;c0&gt;start&lt;/c0&gt; method) and the other thread (which executes its &lt;c1&gt;run&lt;/c1&gt; method).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085209Z" creationid="pingfangx" creationdate="20191014T085209Z">
        <seg>结果是两个线程并发地运行；当前线程（从调用返回给 &lt;c0&gt;start&lt;/c0&gt; 方法）和另一个线程（执行其 &lt;c1&gt;run&lt;/c1&gt; 方法）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of comparing two objects that implement &lt;t4&gt;CharSequence&lt;/t4&gt; is therefore, in general, undefined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070402Z" creationid="pingfangx" creationdate="20191014T070402Z">
        <seg>因此，通常未定义比较实现 &lt;t4&gt;CharSequence&lt;/t4&gt; 的两个对象的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of this method is exactly the same as if it were an invocation of this object's &lt;c0&gt;&lt;a1&gt;ERROR(insert/#insert(int,CharSequence,int,int) insert)&lt;/a1&gt;&lt;/c0&gt;(dstOffset, s, 0, s.length()) method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040947Z" creationid="pingfangx" creationdate="20191014T040947Z">
        <seg>此方法的结果与调用此对象的 &lt;c0&gt;&lt;a1&gt;ERROR(insert/#insert(int,CharSequence,int,int) insert)&lt;/a1&gt;&lt;/c0&gt;(dstOffset, s, 0, s.length()) 方法的结果完全相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of this method is exactly the same as if it were an invocation of this.append(s, 0, s.length());</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064701Z" creationid="pingfangx" creationdate="20191014T064701Z">
        <seg>此方法的最终效果与调用 this.append(s, 0, s.length()) 方法的效果完全相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result should be a concise but informative representation that is easy for a person to read.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133154Z" creationid="pingfangx" creationdate="20191014T133154Z">
        <seg>结果应是一个简明但易于读懂的信息表达式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting proxy class must not exceed any limits imposed on classes by the virtual machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113700Z" creationid="pingfangx" creationdate="20191015T113700Z">
        <seg>得到的代理类必须不超过虚拟机在类上施加的任何限制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The results of a write by one thread are guaranteed to be visible to a read by another thread only if the write operation &lt;i3&gt;happens-before&lt;/i3&gt; the read operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112944Z" creationid="pingfangx" creationdate="20191025T112944Z">
        <seg>只有写入操作 &lt;i3&gt;happen-before&lt;/i3&gt; 读取操作时，才保证一个线程写入的结果对另一个线程的读取是可视的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned &lt;c1&gt;Class&lt;/c1&gt; object is the object that is locked by &lt;c2&gt;static synchronized&lt;/c2&gt; methods of the represented class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T131009Z" creationid="pingfangx" creationdate="20191014T131009Z">
        <seg>返回的 &lt;c1&gt;Class&lt;/c1&gt; 对象是由所表示类的 &lt;c2&gt;static synchronized&lt;/c2&gt; 方法锁定的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned index is the largest value &lt;i1&gt;k&lt;/i1&gt; such that</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041313Z" creationid="pingfangx" creationdate="20191014T041313Z">
        <seg>返回的索引是满足以下条件的最大 &lt;i1&gt;k&lt;/i1&gt; 值：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned list is &lt;i0&gt;not&lt;/i0&gt; a copy.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075958Z" creationid="pingfangx" creationdate="20191014T075958Z">
        <seg>该返回的列表&lt;i0&gt;不是&lt;/i0&gt; 一份副本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned map and its collection views may not obey the general contract of the &lt;c0&gt;&lt;a1&gt;equals(Object)&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;hashCode()&lt;/a3&gt;&lt;/c2&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080057Z" creationid="pingfangx" creationdate="20191014T080057Z">
        <seg>返回的映射及其集合视图不能遵守 &lt;c0&gt;&lt;a1&gt;equals(Object)&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;hashCode()&lt;/a3&gt;&lt;/c2&gt; 方法的常规协定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned map does not permit null keys or values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080046Z" creationid="pingfangx" creationdate="20191014T080046Z">
        <seg>返回的映射不允许空键或空值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned map is typically case-sensitive on all platforms.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080055Z" creationid="pingfangx" creationdate="20191014T080055Z">
        <seg>返回的映射通常在所有平台上都是区分大小写的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned object may be modified using ordinary &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080042Z" creationid="pingfangx" creationdate="20191014T080042Z">
        <seg>可以使用普通的 &lt;c0&gt;&lt;a1&gt;Map&lt;/a1&gt;&lt;/c0&gt; 操作来修改返回的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned string may, but is not required to, contain the value as well.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152825Z" creationid="pingfangx" creationdate="20191014T152825Z">
        <seg>返回的字符串可以，但不一定包含该值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned value may be &lt;c2&gt;null&lt;/c2&gt; -- this means to use the working directory of the current Java process, usually the directory named by the system property &lt;c3&gt;user.dir&lt;/c3&gt;, as the working directory of the child process.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080013Z" creationid="pingfangx" creationdate="20191014T080013Z">
        <seg>返回值可以为 &lt;c2&gt;null&lt;/c2&gt;，这意味着要使用当前 Java 进程的工作目录，通常是由系统属性 &lt;c3&gt;user.dir&lt;/c3&gt; 指定的目录作为子进程的工作目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rightmost empty string "" is considered to occur at the index value &lt;c0&gt;this.length()&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041312Z" creationid="pingfangx" creationdate="20191014T041312Z">
        <seg>将最右边的空字符串 "" 视为出现在索引值 &lt;c0&gt;this.length()&lt;/c0&gt; 处。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The root class from which all event state objects shall be derived.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045553Z" creationid="pingfangx" creationdate="20191012T045553Z">
        <seg>所有事件状态对象都将从其派生的根类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The root interface in the &lt;i0&gt;collection hierarchy&lt;/i0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T034337Z" creationid="pingfangx" creationdate="20191012T034337Z">
        <seg>&lt;i0&gt;Collection 层次结构&lt;/i0&gt; 中的根接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The root of a tree bin is normally its first node.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081459Z" creationid="pingfangx" creationdate="20191026T081459Z">
        <seg>树 bin 的根节点通常是它的第一个节点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The runtime doesn't have enough information on which references to clear and which to keep.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155852Z" creationid="pingfangx" creationdate="20191014T155852Z">
        <seg>运行时没有足够的信息来清除哪些引用和保留哪些引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same example in this other style looks like the following:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081135Z" creationid="pingfangx" creationdate="20191014T081135Z">
        <seg>采用这种风格的同一个例子如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The scheduler is free to ignore this hint.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085232Z" creationid="pingfangx" creationdate="20191014T085232Z">
        <seg>调度是可以忽略这个提示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence is changed to a new character sequence whose length is specified by the argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041356Z" creationid="pingfangx" creationdate="20191014T041356Z">
        <seg>序列将被更改为一个新的字符序列，新序列的长度由参数指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140623Z" creationid="pingfangx" creationdate="20191025T140623Z">
        <seg>该 set 受映射支持，所以对映射的更改将反映在此 set 中，反之亦然。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of classes that make up the package may implement a particular specification and if so the specification title, version number, and vendor strings identify that specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094837Z" creationid="pingfangx" creationdate="20191014T094837Z">
        <seg>组成包的类集可以实现一个特定规范，如此一来，就可以通过规范标题、版本号和供应商字符串来标识该规范。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set supports element removal, which removes the corresponding mapping from the map, via the &lt;t2&gt;Iterator.remove&lt;/t2&gt;, &lt;t3&gt;Set.remove&lt;/t3&gt;, &lt;t4&gt;removeAll&lt;/t4&gt;, &lt;t5&gt;retainAll&lt;/t5&gt;, and &lt;t6&gt;clear&lt;/t6&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095047Z" creationid="pingfangx" creationdate="20191026T095047Z">
        <seg>该 set 支持元素的移除，通过 &lt;t2&gt;Iterator.remove&lt;/t2&gt;、&lt;t3&gt;Set.remove&lt;/t3&gt;、&lt;t4&gt;removeAll&lt;/t4&gt;、&lt;t5&gt;retainAll&lt;/t5&gt; 和 &lt;t6&gt;clear&lt;/t6&gt; 操作可从该映射中移除相应的映射关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set supports element removal, which removes the corresponding mapping from the map, via the &lt;t3&gt;Iterator.remove&lt;/t3&gt;, &lt;t4&gt;Set.remove&lt;/t4&gt;, &lt;t5&gt;removeAll&lt;/t5&gt;, &lt;t6&gt;retainAll&lt;/t6&gt; and &lt;t7&gt;clear&lt;/t7&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095215Z" creationid="pingfangx" creationdate="20191026T095215Z">
        <seg>该 set 支持元素的移除，通过 &lt;t3&gt;Iterator.remove&lt;/t3&gt;、&lt;t4&gt;Set.remove&lt;/t4&gt;、&lt;t5&gt;removeAll&lt;/t5&gt;、&lt;t6&gt;retainAll&lt;/t6&gt; 和 &lt;t7&gt;clear&lt;/t7&gt; 操作可从该映射中移除相应的映射关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set supports element removal, which removes the corresponding mapping from the map, via the &lt;t3&gt;Iterator.remove&lt;/t3&gt;, &lt;t4&gt;Set.remove&lt;/t4&gt;, &lt;t5&gt;removeAll&lt;/t5&gt;, &lt;t6&gt;retainAll&lt;/t6&gt;, and &lt;t7&gt;clear&lt;/t7&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141114Z" creationid="pingfangx" creationdate="20191025T141114Z">
        <seg>该 set 支持元素的移除，通过 &lt;t3&gt;Iterator.remove&lt;/t3&gt;、&lt;t4&gt;Set.remove&lt;/t4&gt;、&lt;t5&gt;removeAll&lt;/t5&gt;、&lt;t6&gt;retainAll&lt;/t6&gt; 和 &lt;t7&gt;clear&lt;/t7&gt; 操作可从该映射中移除相应的映射关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set supports element removal, which removes the corresponding mapping from the map, via the &lt;t4&gt;Iterator.remove&lt;/t4&gt;, &lt;t5&gt;Set.remove&lt;/t5&gt;, &lt;t6&gt;removeAll&lt;/t6&gt;, &lt;t7&gt;retainAll&lt;/t7&gt; and &lt;t8&gt;clear&lt;/t8&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140627Z" creationid="pingfangx" creationdate="20191025T140627Z">
        <seg>该 set 支持元素的移除，通过 &lt;t4&gt;Iterator.remove&lt;/t4&gt;、&lt;t5&gt;Set.remove&lt;/t5&gt;、&lt;t6&gt;removeAll&lt;/t6&gt;、&lt;t7&gt;retainAll&lt;/t7&gt; 和 &lt;t8&gt;clear&lt;/t8&gt; 操作可从该映射中移除相应的映射关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sets of modifiers are represented as integers with distinct bit positions representing different modifiers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110429Z" creationid="pingfangx" creationdate="20191015T110429Z">
        <seg>修饰符集被表示为整数，用不同的位位置 (bit position) 表示不同的修饰符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The smallest table capacity for which bins may be treeified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082527Z" creationid="pingfangx" creationdate="20191026T082527Z">
        <seg>bins 可能被树化的最小表容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The space of class names that begin with the string &lt;c0&gt;"$Proxy"&lt;/c0&gt; should be, however, reserved for proxy classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112329Z" creationid="pingfangx" creationdate="20191015T112329Z">
        <seg>但是，以字符串 &lt;c0&gt;"$Proxy"&lt;/c0&gt; 开头的类名空间应该为代理类保留。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The specification of the &lt;c0&gt;&lt;a1&gt;java.nio.charset.Charset&lt;/a1&gt;&lt;/c0&gt; class describes the naming conventions for character encodings as well as the set of standard encodings that must be supported by every implementation of the Java platform.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T064800Z" creationid="pingfangx" creationdate="20191012T064800Z">
        <seg>&lt;c0&gt;&lt;a1&gt;java.nio.charset.Charset&lt;/a1&gt;&lt;/c0&gt; 类的规范描述了字符编码的命名约定，以及每个 Java 平台实现必须支持的标准编码集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The specifications of these methods enable implementations to employ efficient machine-level atomic instructions that are available on contemporary processors.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120740Z" creationid="pingfangx" creationdate="20191025T120740Z">
        <seg>这些方法的规范使实现能够使用当代处理器上提供的高效机器级别原子指令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The specified amount of real time has elapsed, more or less.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133823Z" creationid="pingfangx" creationdate="20191014T133823Z">
        <seg>大约已经到达指定的实际时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The start argument must be nonnegative, and not greater than &lt;c0&gt;end&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063049Z" creationid="pingfangx" creationdate="20191014T063049Z">
        <seg>start 参数必须为非负，但不得大于 &lt;c0&gt;end&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static &lt;c0&gt;&lt;a1&gt;Proxy.getInvocationHandler&lt;/a1&gt;&lt;/c0&gt; method will return the invocation handler associated with the proxy instance passed as its argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112729Z" creationid="pingfangx" creationdate="20191015T112729Z">
        <seg>静态 &lt;c0&gt;&lt;a1&gt;Proxy.getInvocationHandler&lt;/a1&gt;&lt;/c0&gt; 方法将返回与作为其参数传递的代理实例相关的调用处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static methods allow a package to be found by name or the set of all packages known to the current class loader to be found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095033Z" creationid="pingfangx" creationdate="20191014T095033Z">
        <seg>静态方法允许通过名称或当前类加载器已知的所有包的集合来找到包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stream obtains data piped from the error output of the process represented by this &lt;c0&gt;Process&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075523Z" creationid="pingfangx" creationdate="20191014T075506Z">
        <seg>该流获得由本 &lt;c0&gt;Process&lt;/c0&gt; 对象所表示的进程的错误输出管道的数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stream obtains data piped from the standard output of the process represented by this &lt;c0&gt;Process&lt;/c0&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075542Z" creationid="pingfangx" creationdate="20191014T075542Z">
        <seg>该流获得由本 &lt;c0&gt;Process&lt;/c0&gt; 对象所表示的进程的标准输出管道的数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string tokenizer class allows an application to break a string into tokens.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050208Z" creationid="pingfangx" creationdate="20191012T050208Z">
        <seg>string tokenizer 类允许应用程序将字符串分解为标记。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subarray begins at the specified &lt;c1&gt;offset&lt;/c1&gt; and extends &lt;c2&gt;len&lt;/c2&gt; &lt;c3&gt;char&lt;/c3&gt;s.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041026Z" creationid="pingfangx" creationdate="20191014T041026Z">
        <seg>子数组从指定的 &lt;c1&gt;offset&lt;/c1&gt; 开始，包含 &lt;c2&gt;len&lt;/c2&gt; 个 &lt;c3&gt;char&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subprocess is not killed when there are no more references to the &lt;c0&gt;Process&lt;/c0&gt; object, but rather the subprocess continues executing asynchronously.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074823Z" creationid="pingfangx" creationdate="20191014T074823Z">
        <seg>当没有 &lt;c0&gt;Process&lt;/c0&gt; 对象的更多引用时，不是删掉子进程，而是继续异步执行子进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subprocess represented by this &lt;c0&gt;Process&lt;/c0&gt; object is forcibly terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075323Z" creationid="pingfangx" creationdate="20191014T075323Z">
        <seg>强制终止此 &lt;c0&gt;Process&lt;/c0&gt; 对象表示的子进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subsequence of the argument &lt;c0&gt;s&lt;/c0&gt; specified by &lt;c1&gt;start&lt;/c1&gt; and &lt;c2&gt;end&lt;/c2&gt; are inserted, in order, into this sequence at the specified destination offset, moving up any characters originally above that position.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063001Z" creationid="pingfangx" creationdate="20191014T063001Z">
        <seg>由 &lt;c1&gt;start&lt;/c1&gt; 和 &lt;c2&gt;end&lt;/c2&gt; 指定的参数 &lt;c0&gt;s&lt;/c0&gt; 的子序列按顺序插入到该序列中指定的目标偏移量处，最初位于该位置上方的任何字符向上移动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subsequence starts with the &lt;c1&gt;char&lt;/c1&gt; value at the specified index and ends with the &lt;c2&gt;char&lt;/c2&gt; value at index &lt;t3&gt;end - 1&lt;/t3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T071147Z" creationid="pingfangx" creationdate="20191014T071108Z">
        <seg>子序列从指定序列的 &lt;c1&gt;char&lt;/c1&gt; 值开始，并在索引 &lt;t3&gt;end - 1&lt;/t3&gt; 的 &lt;c2&gt;char&lt;/c2&gt; 值结束。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The substring begins at the specified &lt;c0&gt;start&lt;/c0&gt; and extends to the character at index &lt;c1&gt;end - 1&lt;/c1&gt; or to the end of the sequence if no such character exists.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040237Z" creationid="pingfangx" creationdate="20191014T040237Z">
        <seg>该子字符串从指定的 &lt;c0&gt;start&lt;/c0&gt; 处开始，一直到索引 &lt;c1&gt;end - 1&lt;/c1&gt; 处的字符，如果不存在这种字符，则一直到序列尾部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The substring begins at the specified &lt;c1&gt;start&lt;/c1&gt; and extends to the character at index &lt;c2&gt;end - 1&lt;/c2&gt; or to the end of the sequence if no such character exists.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041338Z" creationid="pingfangx" creationdate="20191014T041338Z">
        <seg>该子字符串从指定的 &lt;c1&gt;start&lt;/c1&gt; 处开始，一直到索引 &lt;c2&gt;end - 1&lt;/c2&gt; 处的字符，如果不存在这种字符，则一直到序列尾部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The substring begins at the specified &lt;c1&gt;start&lt;/c1&gt; and extends to the character at index &lt;c2&gt;end - 1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041724Z" creationid="pingfangx" creationdate="20191014T041724Z">
        <seg>该子字符串从指定的 &lt;c1&gt;start&lt;/c1&gt; 处开始，一直到索引 &lt;c2&gt;end - 1&lt;/c2&gt; 处的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The substring begins at the specified index and extends to the end of this sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041726Z" creationid="pingfangx" creationdate="20191014T041726Z">
        <seg>该子字符串始于指定索引处的字符，一直到此字符串末尾。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table, initialized on first use, and resized as necessary.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083537Z" creationid="pingfangx" creationdate="20191026T083537Z">
        <seg>表，在初次使用时初始化，并根据需要调整大小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The target thread should check this variable regularly, and return from its run method in an orderly fashion if the variable indicates that it is to stop running.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082840Z" creationid="pingfangx" creationdate="20191014T082840Z">
        <seg>目标线程应定期检查此变量，如果变量指示要停止运行，则应按顺序从其 run 方法返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The text range begins at the specified &lt;c0&gt;beginIndex&lt;/c0&gt; and extends to the &lt;c1&gt;char&lt;/c1&gt; at index &lt;c2&gt;endIndex - 1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040225Z" creationid="pingfangx" creationdate="20191014T040225Z">
        <seg>文本范围始于指定的 &lt;c0&gt;beginIndex&lt;/c0&gt;，并扩展到索引 &lt;c1&gt;endIndex - 1&lt;/c1&gt; 上的 &lt;c2&gt;char&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread &lt;v0&gt;T&lt;/v0&gt; is then removed from the wait set for this object and re-enabled for thread scheduling.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133844Z" creationid="pingfangx" creationdate="20191014T133844Z">
        <seg>此方法导致当前线程（称之为 &lt;v0&gt;T&lt;/v0&gt;）将其自身放置在对象的等待集中，然后放弃此对象上的所有同步要求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread ID is a positive &lt;t0&gt;long&lt;/t0&gt; number generated when this thread was created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084643Z" creationid="pingfangx" creationdate="20191014T084643Z">
        <seg>线程 ID 是创建此线程时生成的正 &lt;t0&gt;long&lt;/t0&gt; 数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread ID is unique and remains unchanged during its lifetime.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084616Z" creationid="pingfangx" creationdate="20191014T084616Z">
        <seg>线程 ID 是唯一的，在其生存期内保持不变。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread does not lose ownership of any monitors.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085126Z" creationid="pingfangx" creationdate="20191014T085126Z">
        <seg>该线程不丢失任何监视器的所属权。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread groups form a tree in which every thread group except the initial thread group has a parent.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093054Z" creationid="pingfangx" creationdate="20191014T093054Z">
        <seg>线程组构成一棵树，在树中，除了初始线程组外，每个线程组都有一个父线程组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread has completed execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104537Z" creationid="pingfangx" creationdate="20191014T104537Z">
        <seg>线程已经结束执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread releases ownership of this monitor and waits until another thread notifies threads waiting on this object's monitor to wake up either through a call to the &lt;c0&gt;notify&lt;/c0&gt; method or the &lt;c1&gt;notifyAll&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135206Z" creationid="pingfangx" creationdate="20191014T135206Z">
        <seg>该线程发布对此监视器的所有权并等待，直到其他线程通过调用 &lt;c0&gt;notify&lt;/c0&gt; 方法，或 &lt;c1&gt;notifyAll&lt;/c1&gt; 方法通知在此对象的监视器上等待的线程醒来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread releases ownership of this monitor and waits until either of the following two conditions has occurred:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133442Z" creationid="pingfangx" creationdate="20191014T133442Z">
        <seg>该线程发布对此监视器的所有权，并等待下面两个条件之一发生：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread then waits until it can re-obtain ownership of the monitor and resumes execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133546Z" creationid="pingfangx" creationdate="20191014T133546Z">
        <seg>然后，该线程等到重新获得对监视器的所有权后才能继续执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The timeout period, specified by &lt;c0&gt;timeout&lt;/c0&gt; milliseconds plus &lt;c1&gt;nanos&lt;/c1&gt; nanoseconds arguments, has elapsed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133534Z" creationid="pingfangx" creationdate="20191014T133534Z">
        <seg>&lt;c0&gt;timeout&lt;/c0&gt; 毫秒值与 &lt;c1&gt;nanos&lt;/c1&gt; 毫微秒参数值之和指定的超时时间已用完。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The total number of characters to be copied is &lt;c3&gt;srcEnd-srcBegin&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040332Z" creationid="pingfangx" creationdate="20191014T040332Z">
        <seg>要复制的字符总数为 &lt;c3&gt;srcEnd-srcBegin&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the entity requesting authentication.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083415Z" creationid="pingfangx" creationdate="20191011T083415Z">
        <seg>请求验证的实体的类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unqualified name of a proxy class is unspecified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112319Z" creationid="pingfangx" creationdate="20191015T112319Z">
        <seg>未指定代理类的非限定名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The use and transitions among plain vs tree modes is complicated by the existence of subclass LinkedHashMap.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081805Z" creationid="pingfangx" creationdate="20191026T081805Z">
        <seg>由于存在子类 LinkedHashMap，在普通模式和树模式之间的使用和转换变得复杂了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The use of this queue interacts with pool sizing:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124535Z" creationid="pingfangx" creationdate="20191025T124535Z">
        <seg>可以使用此队列与池大小进行交互：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value is automatically wrapped in an object if it has a primitive type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103525Z" creationid="pingfangx" creationdate="20191015T103525Z">
        <seg>如果该值是一个基本类型值，则自动将其包装在一个对象中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value must be greater than 2 and should be at least 8 to mesh with assumptions in tree removal about conversion back to plain bins upon shrinkage.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082442Z" creationid="pingfangx" creationdate="20191026T082442Z">
        <seg>该值必须大于 2，并且应该至少为 8，以便满足在收缩时移除树转换回普通 bin 的假设。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of &lt;c2&gt;@Repeatable&lt;/c2&gt; indicates the &lt;e3&gt;containing annotation type&lt;/e3&gt; for the repeatable annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152043Z" creationid="pingfangx" creationdate="20191014T152043Z">
        <seg>值 &lt;c2&gt;@Repeatable&lt;/c2&gt; 表示包含 &lt;e3&gt;containing annotation type (包含的注释类型)&lt;/e3&gt; 是可重复注释类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values for the constants representing the modifiers are taken from the tables in sections 4.1, 4.4, 4.5, and 4.7 of &lt;c1&gt;The Java™ Virtual Machine Specification&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110521Z" creationid="pingfangx" creationdate="20191015T110521Z">
        <seg>表示修饰符的常量值取自于 &lt;c1&gt;The Java™ Virtual Machine Specification&lt;/c1&gt; 的表 4.1、4.4、4.5 和 4.7。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The version specification is described by the following formal grammar:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095114Z" creationid="pingfangx" creationdate="20191014T094919Z">
        <seg>版本规范是由下列形式的语法描述的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The virtual machine's built-in class loader, called the "bootstrap class loader", does not itself have a parent but may serve as the parent of a &lt;t3&gt;ClassLoader&lt;/t3&gt; instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072050Z" creationid="pingfangx" creationdate="20191014T072050Z">
        <seg>虚拟机的内置类加载器（称为 "bootstrap class loader"）本身没有父类加载器，但是可以将它用作 &lt;t3&gt;ClassLoader&lt;/t3&gt; 实例的父类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The working directory does not exist.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080233Z" creationid="pingfangx" creationdate="20191014T080233Z">
        <seg>工作目录不存在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wrapper classes &lt;c0&gt;Boolean&lt;/c0&gt;, &lt;c1&gt;Character&lt;/c1&gt;, &lt;c2&gt;Integer&lt;/c2&gt;, &lt;c3&gt;Long&lt;/c3&gt;, &lt;c4&gt;Float&lt;/c4&gt;, and &lt;c5&gt;Double&lt;/c5&gt; serve this purpose.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T061451Z" creationid="pingfangx" creationdate="20191012T061451Z">
        <seg>包装器类 &lt;c0&gt;Boolean&lt;/c0&gt;、&lt;c1&gt;Character&lt;/c1&gt;、&lt;c2&gt;Integer&lt;/c2&gt;、&lt;c3&gt;Long&lt;/c3&gt;、&lt;c4&gt;Float&lt;/c4&gt; 和 &lt;c5&gt;Double&lt;/c5&gt; 就是用于这个目的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then the character at index &lt;i2&gt;k&lt;/i2&gt; in the new character sequence is equal to the character at index &lt;i3&gt;k&lt;/i3&gt; in the old character sequence, if &lt;i4&gt;k&lt;/i4&gt; is less than &lt;i5&gt;n&lt;/i5&gt;; otherwise, it is equal to the character at index &lt;i6&gt;k-n&lt;/i6&gt; in the argument &lt;c7&gt;sb&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035059Z" creationid="pingfangx" creationdate="20191014T035059Z">
        <seg>如果 &lt;i4&gt;k&lt;/i4&gt; 小于 &lt;i5&gt;n&lt;/i5&gt;，则新字符序列中索引 &lt;i2&gt;k&lt;/i2&gt; 处的字符等于原序列中索引 &lt;i3&gt;k&lt;/i3&gt; 处的字符；否则它等于参数 &lt;c7&gt;sb&lt;/c7&gt; 中索引 &lt;i6&gt;k-n&lt;/i6&gt; 处的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then the character at index &lt;i2&gt;k&lt;/i2&gt; in the new character sequence is equal to the character at index &lt;i3&gt;k&lt;/i3&gt; in the old character sequence, if &lt;i4&gt;k&lt;/i4&gt; is less than &lt;i5&gt;n&lt;/i5&gt;; otherwise, it is equal to the character at index &lt;i6&gt;k-n&lt;/i6&gt; in the argument &lt;c7&gt;str&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T034951Z" creationid="pingfangx" creationdate="20191014T034951Z">
        <seg>如果 &lt;i4&gt;k&lt;/i4&gt; 小于 &lt;i5&gt;n&lt;/i5&gt;，则新字符序列中索引 &lt;i2&gt;k&lt;/i2&gt; 处的字符等于原序列中索引 &lt;i3&gt;k&lt;/i3&gt; 处的字符；否则它等于参数 &lt;c7&gt;str&lt;/c7&gt; 中索引 &lt;i6&gt;k-n&lt;/i6&gt; 处的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then the character at index &lt;i2&gt;k&lt;/i2&gt; in this character sequence becomes equal to the character at index &lt;i3&gt;k&lt;/i3&gt; in this sequence, if &lt;i4&gt;k&lt;/i4&gt; is less than &lt;i5&gt;n&lt;/i5&gt;; otherwise, it is equal to the character at index &lt;i6&gt;k+start-n&lt;/i6&gt; in the argument &lt;c7&gt;s&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T035326Z" creationid="pingfangx" creationdate="20191014T035220Z">
        <seg>如果 &lt;i2&gt;k&lt;/i2&gt; 小于 &lt;i3&gt;n&lt;/i3&gt;，则新字符序列中索引 &lt;i4&gt;k&lt;/i4&gt; 处的字符等于原序列中索引 &lt;i5&gt;k&lt;/i5&gt; 处的字符；否则它等于参数 &lt;c7&gt;s&lt;/c7&gt; 中索引 &lt;i6&gt;k+start-n&lt;/i6&gt; 处的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then the character at index &lt;i3&gt;k&lt;/i3&gt; in the new character sequence is equal to the character at index &lt;i4&gt;k&lt;/i4&gt; in the old character sequence, if &lt;i5&gt;k&lt;/i5&gt; is less than &lt;i6&gt;n&lt;/i6&gt;; otherwise, it is equal to the character at index &lt;i7&gt;k-n&lt;/i7&gt; in the argument &lt;c8&gt;sb&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064449Z" creationid="pingfangx" creationdate="20191014T064449Z">
        <seg>如果 &lt;i5&gt;k&lt;/i5&gt; 小于 &lt;i6&gt;n&lt;/i6&gt;，则新字符序列中索引 &lt;i3&gt;k&lt;/i3&gt; 处的字符等于原序列中索引 &lt;i4&gt;k&lt;/i4&gt; 处的字符；否则它等于参数 &lt;c8&gt;sb&lt;/c8&gt; 中索引 &lt;i7&gt;k-n&lt;/i7&gt; 处的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then the character at index &lt;i3&gt;k&lt;/i3&gt; in the new character sequence is equal to the character at index &lt;i4&gt;n-k-1&lt;/i4&gt; in the old character sequence.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063532Z" creationid="pingfangx" creationdate="20191014T063532Z">
        <seg>则新字符序列中索引 &lt;i3&gt;k&lt;/i3&gt; 处的字符将等于原字符序列索引 &lt;i4&gt;n-k-1&lt;/i4&gt; 处的字符。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several restrictions on the parameters that may be passed to &lt;c0&gt;Proxy.getProxyClass&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113547Z" creationid="pingfangx" creationdate="20191015T113547Z">
        <seg>对可以传递给 &lt;c0&gt;Proxy.getProxyClass&lt;/c0&gt; 的参数有以下几个限制：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are three general strategies for queuing:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124559Z" creationid="pingfangx" creationdate="20191025T124559Z">
        <seg>排队有三种通用策略：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two ways to create a new thread of execution.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081045Z" creationid="pingfangx" creationdate="20191014T081045Z">
        <seg>创建新执行线程有两种方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is a buffer class for each non-boolean primitive type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T110929Z" creationid="pingfangx" creationdate="20191011T110929Z">
        <seg>每个非布尔基本类型都有一个缓冲区类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is a tradeoff between speed, utility, and quality of bit-spreading.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082957Z" creationid="pingfangx" creationdate="20191026T082957Z">
        <seg>这是在速度，效用和比特传播质量之间进行的权衡。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is no requirement that a process represented by a &lt;c0&gt;Process&lt;/c0&gt; object execute asynchronously or concurrently with respect to the Java process that owns the &lt;c1&gt;Process&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T074831Z" creationid="pingfangx" creationdate="20191014T074831Z">
        <seg>对于带有 &lt;c0&gt;Process&lt;/c0&gt; 对象的 Java 进程，没有必要异步或并发执行由 &lt;c1&gt;Process&lt;/c1&gt; 对象表示的进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore application developers may take advantage of any number of provider-based implementations without having to add or rewrite code.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152003Z" creationid="pingfangx" creationdate="20191011T152003Z">
        <seg>因此，应用程序开发人员可以利用任何数量的基于提供商的实现而不必添加或重写代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore soft and weak references need not be registered with a queue in order to be useful, while phantom references do.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090535Z" creationid="pingfangx" creationdate="20191012T090535Z">
        <seg>所以，软引用和弱引用不需要向队列注册即可使用，而虚引用则需要这样做。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, it is not possible to clone an object merely by virtue of the fact that it implements this interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101533Z" creationid="pingfangx" creationdate="20191014T101533Z">
        <seg>因此，因为某个对象实现了此接口就克隆它是不可能的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, it would be wrong to write a program that depended on this exception for its correctness: &lt;i1&gt;the fail-fast behavior of iterators should be used only to detect bugs.&lt;/i1&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135028Z" creationid="pingfangx" creationdate="20191025T135001Z">
        <seg>因此，编写依赖于此异常的程序的做法是错误的，正确做法是：&lt;i1&gt;迭代器的快速失败行为应该仅用于检测程序错误。&lt;/i1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, most methods with more than 0.5 ulp errors are required to be &lt;i4&gt;semi-monotonic&lt;/i4&gt;: whenever the mathematical function is non-decreasing, so is the floating-point approximation, likewise, whenever the mathematical function is non-increasing, so is the floating-point approximation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151335Z" creationid="pingfangx" creationdate="20191013T151335Z">
        <seg>因此，大多数误差大于 0.5 ulp 的方法都要求是&lt;i4&gt;半单调的&lt;/i4&gt;：只要数学函数是非递减的，浮点近似值就是非递减的；同样，只要数学函数是非递增的，浮点近似值就是非递增的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, when a duplicate method is invoked on a proxy instance, the &lt;c2&gt;Method&lt;/c2&gt; object for the method in the foremost interface that contains the method (either directly or inherited through a superinterface) in the proxy class's list of interfaces is passed to the invocation handler's &lt;c3&gt;invoke&lt;/c3&gt; method, regardless of the reference type through which the method invocation occurred.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113108Z" creationid="pingfangx" creationdate="20191015T113108Z">
        <seg>因此，在代理实例上调用重复方法时，第一个接口中的方法的 &lt;c2&gt;Method&lt;/c2&gt; 对象包含接口的代理类列表中的方法（直接或通过超级接口继承），该对象会传递到调用处理程序的 &lt;c3&gt;invoke&lt;/c3&gt; 方法，无论该方法调用通过哪一种引用类型发生。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These algorithms are available from the well-known network library &lt;c0&gt;netlib&lt;/c0&gt; as the package "Freely Distributable Math Library," &lt;a1&gt;&lt;c2&gt;fdlibm&lt;/c2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095431Z" creationid="pingfangx" creationdate="20191014T095431Z">
        <seg>这些算法可以从众所周知的网络库 &lt;c0&gt;netlib&lt;/c0&gt; 以 &lt;a1&gt;&lt;c2&gt;fdlibm&lt;/c2&gt;&lt;/a1&gt;（“Freely Distributable Math Library，免费发布的数学库”）包的形式获得。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These algorithms, which are written in the C programming language, are then to be understood as executed with all floating-point operations following the rules of Java floating-point arithmetic.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095435Z" creationid="pingfangx" creationdate="20191014T095435Z">
        <seg>这些算法都是用 C 编程语言编写的，在使用所有遵循 Java 浮点算法规则的浮点运算执行时也能够被理解。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are mainly of use in atomic data structures in which several &lt;c9&gt;volatile&lt;/c9&gt; fields of the same node (for example, the links of a tree node) are independently subject to atomic updates.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121849Z" creationid="pingfangx" creationdate="20191025T121849Z">
        <seg>它们主要用于原子数据结构中，该结构中同一节点（例如，树节点的链接）的几个 &lt;c9&gt;volatile&lt;/c9&gt; 字段都独立受原子更新控制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are similar in usage to the implicit monitors accessed using &lt;c2&gt;Object.wait&lt;/c2&gt;, but offer extended capabilities.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122834Z" creationid="pingfangx" creationdate="20191025T122834Z">
        <seg>这些变量在用法上与使用 &lt;c2&gt;Object.wait&lt;/c2&gt; 访问的隐式监视器类似，但提供了更强大的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These can be used to manipulate the execution environment; for example, reinitializing ThreadLocals, gathering statistics, or adding log entries.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125724Z" creationid="pingfangx" creationdate="20191025T125724Z">
        <seg>它们可用于操纵执行环境；例如，重新初始化 ThreadLocal、搜集统计信息或添加日志条目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These classes also provide a number of methods for converting among primitive values, as well as supporting such standard methods as equals and hashCode.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T061518Z" creationid="pingfangx" creationdate="20191012T061518Z">
        <seg>这些类还提供了大量用于转换基值的方法，并支持一些标准方法，比如 equals 和 hashCode。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These classes are also notable in providing &lt;c6&gt;volatile&lt;/c6&gt; access semantics for their array elements, which is not supported for ordinary arrays.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121903Z" creationid="pingfangx" creationdate="20191025T121903Z">
        <seg>这些类在为其数组元素提供 &lt;c6&gt;volatile&lt;/c6&gt; 访问语义方面也引人注目，这对于普通数组来说是不受支持的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These classes are capable of formatting dates, numbers, and messages, parsing; searching and sorting strings; and iterating over characters, words, sentences, and line breaks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033110Z" creationid="pingfangx" creationdate="20191012T033110Z">
        <seg>这些类能够格式化日期、数字和消息、解析、搜索和排序字符串，以及迭代字符、单词、语句和换行符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These classes employ a work-stealing scheduler that attains high throughput for tasks conforming to restrictions that often hold in computation-intensive parallel processing.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T110924Z" creationid="pingfangx" creationdate="20191025T110924Z">
        <seg>这些类使用一个工作窃取调度程序，该调度程序可以为符合计算密集型并行处理中经常存在的限制的任务获得高吞吐量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These classes enable greater flexibility in how and when to use atomic updates, at the expense of more awkward reflection-based setup, less convenient usage, and weaker guarantees.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121853Z" creationid="pingfangx" creationdate="20191025T121853Z">
        <seg>这些类在如何以及何时使用原子更新方面具有更大的灵活性，但相应的弊端是基于映射的设置较为拙笨、使用不太方便，而且在保证方面也较差。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These constants are used with the &lt;c0&gt;&lt;a1&gt;Target&lt;/a1&gt;&lt;/c0&gt; meta-annotation type to specify where it is legal to use an annotation type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152358Z" creationid="pingfangx" creationdate="20191014T152358Z">
        <seg>这些常量与 &lt;c0&gt;&lt;a1&gt;Target&lt;/a1&gt;&lt;/c0&gt; 元注释类型一起使用，以指定在什么情况下使用注释类型是合法的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These include raw types, parameterized types, array types, type variables and primitive types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T080457Z" creationid="pingfangx" creationdate="20191015T080457Z">
        <seg>它们包括原始类型、参数化类型、数组类型、类型变量和基本类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These include:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104805Z" creationid="pingfangx" creationdate="20191014T104800Z">
        <seg>这种情况包括：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141214Z" creationid="pingfangx" creationdate="20191025T141214Z">
        <seg>这些映射关系将替换此映射目前针对指定映射中所有键的所有映射关系。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are also used when serializing HashSets</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095426Z" creationid="pingfangx" creationdate="20191026T095426Z">
        <seg>序列化哈希集时也使用这些方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These modifications will be visible to subprocesses started via the &lt;c2&gt;&lt;a3&gt;start()&lt;/a3&gt;&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080042Z" creationid="pingfangx" creationdate="20191014T080042Z">
        <seg>对于通过 &lt;c2&gt;&lt;a3&gt;start()&lt;/a3&gt;&lt;/c2&gt; 方法启动的子进程，这些修改是可见的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These states are virtual machine states which do not reflect any operating system thread states.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104505Z" creationid="pingfangx" creationdate="20191014T104505Z">
        <seg>这些状态是虚拟机状态，它们并没有反映所有操作系统线程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These variables differ from their normal counterparts in that each thread that accesses one (via its &lt;t0&gt;get&lt;/t0&gt; or &lt;t1&gt;set&lt;/t1&gt; method) has its own, independently initialized copy of the variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095845Z" creationid="pingfangx" creationdate="20191014T095845Z">
        <seg>这些变量不同于它们的普通对应物，因为访问某个变量（通过其 &lt;t0&gt;get&lt;/t0&gt; 或 &lt;t1&gt;set&lt;/t1&gt; 方法）的每个线程都有自己的局部变量，它独立于变量的初始化副本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They also support several features not found in the other buffer classes:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T111736Z" creationid="pingfangx" creationdate="20191011T111736Z">
        <seg>它们还支持其他缓冲区类所没有的几个特性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are operationally defined as follows:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090541Z" creationid="pingfangx" creationdate="20191012T090541Z">
        <seg>在操作上，可将它们定义如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are used in conjunction with the &lt;c0&gt;&lt;a1&gt;Retention&lt;/a1&gt;&lt;/c0&gt; meta-annotation type to specify how long annotations are to be retained.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152457Z" creationid="pingfangx" creationdate="20191014T152457Z">
        <seg>它们与 &lt;c0&gt;&lt;a1&gt;Retention&lt;/a1&gt;&lt;/c0&gt; 元注释类型一起使用，以指定保留多长的注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They do &lt;e1&gt;not&lt;/e1&gt; define methods such as &lt;c2&gt;equals&lt;/c2&gt;, &lt;c3&gt;hashCode&lt;/c3&gt; and &lt;c4&gt;compareTo&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122246Z" creationid="pingfangx" creationdate="20191025T122246Z">
        <seg>它们&lt;e1&gt;不&lt;/e1&gt; 定义诸如 &lt;c2&gt;equals&lt;/c2&gt;，&lt;c3&gt;hashCode&lt;/c3&gt; 和 &lt;c4&gt;compareTo&lt;/c4&gt; 之类的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They treat &lt;c1&gt;char&lt;/c1&gt; values from the surrogate ranges as undefined characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143728Z" creationid="pingfangx" creationdate="20191013T143728Z">
        <seg>它们将代理项字符范围内的 &lt;c1&gt;char&lt;/c1&gt; 值视为未定义字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This &lt;c1&gt;String&lt;/c1&gt; is then returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041728Z" creationid="pingfangx" creationdate="20191014T041728Z">
        <seg>然后返回此 &lt;c1&gt;String&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This API includes a framework whereby different drivers can be installed dynamically to access different data sources.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032844Z" creationid="pingfangx" creationdate="20191012T032844Z">
        <seg>此 API 包括一个框架，凭借此框架可以动态地安装不同驱动程序来访问不同数据源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This Certificate interface is entirely deprecated and is here to allow for a smooth transition to the new package.&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152150Z" creationid="pingfangx" creationdate="20191011T152150Z">
        <seg>此 Certificate 接口已完全废弃，其仍存在是为了能平稳地过渡到新包。&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032444Z" creationid="pingfangx" creationdate="20191012T032444Z">
        <seg>此 MessageDigest 类为应用程序提供信息摘要算法的功能，如 SHA-1 或 SHA-256 算法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This abstract class is the superclass of all classes representing an input stream of bytes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100747Z" creationid="pingfangx" creationdate="20191010T100747Z">
        <seg>此抽象类是表示字节输入流的所有类的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This abstract class is the superclass of all classes representing an output stream of bytes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102651Z" creationid="pingfangx" creationdate="20191010T102651Z">
        <seg>此抽象类是表示输出字节流的所有类的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This abstract class will delegate most of the work to the underlying protocol handlers like http or ftp.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082047Z" creationid="pingfangx" creationdate="20191011T082047Z">
        <seg>此抽象类将大多数工作委托给底层协议处理程序，如 http 或 ftp。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows an extensible number to be used to represent major, minor, micro, etc. versions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095113Z" creationid="pingfangx" creationdate="20191014T094913Z">
        <seg>这允许使用可扩展的编号来表示主版本号、次版本号、缩微版本号，等等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows the flexibility of adding localizations for new localizations at any time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033105Z" creationid="pingfangx" creationdate="20191012T033105Z">
        <seg>这实现了随时为新本地化添加本地化的灵活性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can occur if this type represents a non-parameterized type nested within a parameterized type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071706Z" creationid="pingfangx" creationdate="20191015T071706Z">
        <seg>如果此类型表示嵌套在参数化类型中的非参数化类型，则会发生这种情况。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class centralizes all security properties and common security methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032502Z" creationid="pingfangx" creationdate="20191012T032502Z">
        <seg>此类集中了所有的安全属性和常见的安全方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class consists exclusively of static methods that operate on or return collections.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045448Z" creationid="pingfangx" creationdate="20191012T045448Z">
        <seg>此类完全由在 collection 上进行操作或返回 collection 的静态方法组成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class consists of &lt;c0&gt;static&lt;/c0&gt; utility methods for operating on objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045903Z" creationid="pingfangx" creationdate="20191012T045903Z">
        <seg>这个类包含 &lt;c0&gt;static&lt;/c0&gt; 实用方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class contains various methods for manipulating arrays (such as sorting and searching).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045142Z" creationid="pingfangx" creationdate="20191012T045142Z">
        <seg>此类包含用来操作数组（比如排序和搜索）的各种方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;AlgorithmParameterGenerator&lt;/c2&gt; class, which is used to generate a set of parameters to be used with a certain algorithm.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T031014Z" creationid="pingfangx" creationdate="20191012T023916Z">
        <seg>此类为 &lt;c2&gt;AlgorithmParameterGenerator&lt;/c2&gt; 类定义 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)，AlgorithmParameterGenerator 类用于生成在某个特定算法中使用的参数集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;AlgorithmParameters&lt;/c2&gt; class, which is used to manage algorithm parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T031234Z" creationid="pingfangx" creationdate="20191012T023826Z">
        <seg>此类为 &lt;c2&gt;AlgorithmParameters&lt;/c2&gt; 类定义 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)，AlgorithmParameters 类用于管理算法参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;KeyFactory&lt;/c2&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032254Z" creationid="pingfangx" creationdate="20191012T032254Z">
        <seg>此类为 &lt;c2&gt;KeyFactory&lt;/c2&gt; 类定义 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;KeyPairGenerator&lt;/c2&gt; class, which is used to generate pairs of public and private keys.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032258Z" creationid="pingfangx" creationdate="20191012T032258Z">
        <seg>此类为用来生成公钥和私钥的 &lt;c2&gt;KeyPairGenerator&lt;/c2&gt; 类定义了 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;KeyStore&lt;/c2&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032410Z" creationid="pingfangx" creationdate="20191012T032410Z">
        <seg>此类为 &lt;c2&gt;KeyStore&lt;/c2&gt; 类定义 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;MessageDigest&lt;/c2&gt; class, which provides the functionality of a message digest algorithm, such as MD5 or SHA.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032447Z" creationid="pingfangx" creationdate="20191012T032447Z">
        <seg>此类为 &lt;c2&gt;MessageDigest&lt;/c2&gt; 类定义 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)，MessageDigest 类提供信息摘要算法的功能，如 MD5 或 SHA。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;Policy&lt;/c2&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032450Z" creationid="pingfangx" creationdate="20191012T032450Z">
        <seg>此类为 &lt;c2&gt;Policy&lt;/c2&gt; 类定义 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;SecureRandom&lt;/c2&gt; class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032500Z" creationid="pingfangx" creationdate="20191012T032500Z">
        <seg>此类为 &lt;c2&gt;SecureRandom&lt;/c2&gt; 类定义了 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the &lt;i0&gt;Service Provider Interface&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;) for the &lt;c2&gt;Signature&lt;/c2&gt; class, which is used to provide the functionality of a digital signature algorithm.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032525Z" creationid="pingfangx" creationdate="20191012T032525Z">
        <seg>此类为 &lt;c2&gt;Signature&lt;/c2&gt; 类定义了 &lt;i0&gt;服务提供者接口&lt;/i0&gt; (&lt;b1&gt;SPI&lt;/b1&gt;)，可用来提供数字签名算法功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class defines the operations common to all reference objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155103Z" creationid="pingfangx" creationdate="20191014T155103Z">
        <seg>此类定义了常用于所有引用对象的操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class does not properly convert characters into bytes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T102817Z" creationid="pingfangx" creationdate="20191010T102817Z">
        <seg>此类未能正确地将字符转换为字节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class encapsulates information about a code signer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T023831Z" creationid="pingfangx" creationdate="20191012T023831Z">
        <seg>此类扩展 codebase 的概念，不仅可以封装位置 (URL) 而且可以封装用于验证起源于该位置的签名代码的证书链。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class encapsulates information about a signed timestamp.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032547Z" creationid="pingfangx" creationdate="20191012T032547Z">
        <seg>此类封装有关签署时间戳的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class extends &lt;t0&gt;ThreadLocal&lt;/t0&gt; to provide inheritance of values from parent thread to child thread: when a child thread is created, the child receives initial values for all inheritable thread-local variables for which the parent has values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071408Z" creationid="pingfangx" creationdate="20191012T071408Z">
        <seg>该类扩展了 &lt;t0&gt;ThreadLocal&lt;/t0&gt;，为子线程提供从父线程那里继承的值：在创建子线程时，子线程会接收所有可继承的线程局部变量的初始值，以获得父线程所具有的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class extends ClassLoader with additional support for defining classes with an associated code source and permissions which are retrieved by the system policy by default.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032455Z" creationid="pingfangx" creationdate="20191012T032455Z">
        <seg>此类扩展了 ClassLoader，使它另外还支持使用相关的代码源和权限定义类，这些代码源和权限默认情况下可根据系统策略获取到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements a character buffer that can be used as a character-input stream.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094658Z" creationid="pingfangx" creationdate="20191010T094658Z">
        <seg>此类实现一个可用作字符输入流的字符缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements a character buffer that can be used as an Writer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094704Z" creationid="pingfangx" creationdate="20191010T094704Z">
        <seg>此类实现一个可用作 Writer 的字符缓冲区。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements a hash table, which maps keys to values.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045650Z" creationid="pingfangx" creationdate="20191012T045650Z">
        <seg>此类实现一个哈希表，该哈希表将键映射到相应的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements a vector of bits that grows as needed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045202Z" creationid="pingfangx" creationdate="20191012T045202Z">
        <seg>此类实现了一个按需增长的位向量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the hostname.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083318Z" creationid="pingfangx" creationdate="20191011T083318Z">
        <seg>此类实现 IP 套接字地址（IP 地址 + 端口号），它也可以是一对(主机名+端口号)，在这种情况下，将尝试解析主机名。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements an output stream in which the data is written into a byte array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094651Z" creationid="pingfangx" creationdate="20191010T094651Z">
        <seg>此类实现了一个输出流，其中的数据被写入一个 byte 数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements client sockets (also called just "sockets").</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083347Z" creationid="pingfangx" creationdate="20191011T083347Z">
        <seg>此类实现客户端套接字（也可以就叫“套接字”）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements server sockets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083339Z" creationid="pingfangx" creationdate="20191011T083339Z">
        <seg>此类实现服务器套接字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements the &lt;t0&gt;Map&lt;/t0&gt; interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045703Z" creationid="pingfangx" creationdate="20191012T045703Z">
        <seg>此类利用哈希表实现 &lt;t0&gt;Map&lt;/t0&gt; 接口，比较键（和值）时使用引用相等性代替对象相等性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements the &lt;t0&gt;Set&lt;/t0&gt; interface, backed by a hash table (actually a &lt;t1&gt;HashMap&lt;/t1&gt; instance).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045640Z" creationid="pingfangx" creationdate="20191012T045640Z">
        <seg>此类实现 &lt;t0&gt;Set&lt;/t0&gt; 接口，由哈希表（实际上是一个 &lt;t1&gt;HashMap&lt;/t1&gt; 实例）支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class implements the Unicode Bidirectional Algorithm.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033203Z" creationid="pingfangx" creationdate="20191012T033203Z">
        <seg>此类实现了 Unicode 双向算法 (Unicode Bidirectional Algorithm)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class incorrectly assumes that bytes adequately represent characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T101745Z" creationid="pingfangx" creationdate="20191010T101745Z">
        <seg>此类错误假定字节能充分表示字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is a member of the &lt;a0&gt; Java Collections Framework&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T135016Z" creationid="pingfangx" creationdate="20191025T135016Z">
        <seg>此类是 &lt;a0&gt;Java Collections Framework&lt;/a0&gt; 的成员。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is a simple holder for a key pair (a public key and a private key).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032255Z" creationid="pingfangx" creationdate="20191012T032255Z">
        <seg>此类是简单的密钥对（公钥和私钥）持有者。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is designed for use as a drop-in replacement for &lt;c1&gt;StringBuffer&lt;/c1&gt; in places where the string buffer was being used by a single thread (as is generally the case).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030323Z" creationid="pingfangx" creationdate="20191014T030323Z">
        <seg>该类被设计用作 &lt;c1&gt;StringBuffer&lt;/c1&gt; 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is no longer used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T031503Z" creationid="pingfangx" creationdate="20191012T031503Z">
        <seg>将不再使用此类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is the superclass of all classes that filter output streams.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T100741Z" creationid="pingfangx" creationdate="20191010T100741Z">
        <seg>此类是过滤输出流的所有类的超类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is used as an opaque representation of cryptographic parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T153239Z" creationid="pingfangx" creationdate="20191011T153239Z">
        <seg>此类用作密码参数的不透明表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is used to create operating system processes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071547Z" creationid="pingfangx" creationdate="20191012T071547Z">
        <seg>此类用于创建操作系统进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class loader is used to load classes and resources from a search path of URLs referring to both JAR files and directories.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083408Z" creationid="pingfangx" creationdate="20191011T083408Z">
        <seg>该类加载器用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T131514Z" creationid="pingfangx" creationdate="20191025T131514Z">
        <seg>此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides &lt;c0&gt;protected&lt;/c0&gt; overridable &lt;c1&gt;&lt;a2&gt;beforeExecute(Thread, Runnable)&lt;/a2&gt;&lt;/c1&gt; and &lt;c3&gt;&lt;a4&gt;afterExecute(Runnable, Throwable)&lt;/a4&gt;&lt;/c3&gt; methods that are called before and after execution of each task.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125719Z" creationid="pingfangx" creationdate="20191025T125719Z">
        <seg>此类提供 &lt;c0&gt;protected&lt;/c0&gt; 可重写的 &lt;c1&gt;&lt;a2&gt;beforeExecute(Thread, Runnable)&lt;/a2&gt;&lt;/c1&gt; 和 &lt;c3&gt;&lt;a4&gt;afterExecute(Runnable, Throwable)&lt;/a4&gt;&lt;/c3&gt; 方法，这两种方法分别在执行每个任务之前和之后调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides a cryptographically strong random number generator (RNG).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032459Z" creationid="pingfangx" creationdate="20191012T032459Z">
        <seg>此类提供强加密随机数生成器 (RNG)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides a skeletal implementation of the &lt;c0&gt;&lt;a1&gt;List&lt;/a1&gt;&lt;/c0&gt; interface to minimize the effort required to implement this interface backed by a "random access" data store (such as an array).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045054Z" creationid="pingfangx" creationdate="20191012T045054Z">
        <seg>此类提供 &lt;c0&gt;&lt;a1&gt;List&lt;/a1&gt;&lt;/c0&gt; 接口的骨干实现，以最大限度地减少实现“随机访问”数据存储（如数组）支持的该接口所需的工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides a skeletal implementation of the &lt;t0&gt;Collection&lt;/t0&gt; interface, to minimize the effort required to implement this interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045045Z" creationid="pingfangx" creationdate="20191012T045045Z">
        <seg>此类提供 &lt;t0&gt;Collection&lt;/t0&gt; 接口的骨干实现，以最大限度地减少了实现此接口所需的工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides a skeletal implementation of the &lt;t0&gt;List&lt;/t0&gt; interface to minimize the effort required to implement this interface backed by a "sequential access" data store (such as a linked list).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045121Z" creationid="pingfangx" creationdate="20191012T045121Z">
        <seg>此类提供了 &lt;t0&gt;List&lt;/t0&gt; 接口的骨干实现，从而最大限度地减少了实现受“连续访问”数据存储（如链接列表）支持的此接口所需的工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides a skeletal implementation of the &lt;t0&gt;Map&lt;/t0&gt; interface, to minimize the effort required to implement this interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045057Z" creationid="pingfangx" creationdate="20191012T045057Z">
        <seg>此类提供 &lt;t0&gt;Map&lt;/t0&gt; 接口的骨干实现，以最大限度地减少实现此接口所需的工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides a skeletal implementation of the &lt;t0&gt;Set&lt;/t0&gt; interface to minimize the effort required to implement this interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045124Z" creationid="pingfangx" creationdate="20191012T045124Z">
        <seg>此类提供 &lt;t0&gt;Set&lt;/t0&gt; 接口的骨干实现，从而最大限度地减少了实现此接口所需的工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides an API compatible with &lt;c0&gt;StringBuffer&lt;/c0&gt;, but with no guarantee of synchronization.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030313Z" creationid="pingfangx" creationdate="20191014T030313Z">
        <seg>此类提供一个与 &lt;c0&gt;StringBuffer&lt;/c0&gt; 兼容的 API，但不保证同步。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides skeletal implementations of some &lt;c0&gt;&lt;a1&gt;Queue&lt;/a1&gt;&lt;/c0&gt; operations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045112Z" creationid="pingfangx" creationdate="20191012T045112Z">
        <seg>此类提供某些 &lt;c0&gt;&lt;a1&gt;Queue&lt;/a1&gt;&lt;/c0&gt; 操作的骨干实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides the method &lt;c0&gt;normalize&lt;/c0&gt; which transforms Unicode text into an equivalent composed or decomposed form, allowing for easier sorting and searching of text.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033440Z" creationid="pingfangx" creationdate="20191012T033440Z">
        <seg>此类提供 &lt;c0&gt;normalize&lt;/c0&gt; 方法，它把 Unicode 文本转换为等效的组合或分解形式，允许对文本进行更方便地分类和搜索。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides thread-local variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071731Z" creationid="pingfangx" creationdate="20191012T071731Z">
        <seg>该类提供了线程局部 (thread-local) 变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a "provider" for the Java Security API, where a provider implements some or all parts of Java Security.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032453Z" creationid="pingfangx" creationdate="20191012T032453Z">
        <seg>此类表示 Java 安全 API "provider"，这里 provider 实现了 Java 安全性的一部分或者全部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a Network Interface address.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083319Z" creationid="pingfangx" creationdate="20191011T083319Z">
        <seg>此类表示网络接口地址。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083329Z" creationid="pingfangx" creationdate="20191011T083329Z">
        <seg>此类表示一个由名称和分配给此接口的 IP 地址列表组成的网络接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a Socket Address with no protocol attachment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083349Z" creationid="pingfangx" creationdate="20191011T083349Z">
        <seg>此类表示不带任何协议附件的 Socket Address。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a datagram packet.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083154Z" creationid="pingfangx" creationdate="20191011T083154Z">
        <seg>此类表示数据报包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a proxy setting, typically a type (http, socks) and a socket address.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083334Z" creationid="pingfangx" creationdate="20191011T083334Z">
        <seg>此类表示代理设置，通常为类型（http、socks）和套接字地址。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a socket for sending and receiving datagram packets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083155Z" creationid="pingfangx" creationdate="20191011T083155Z">
        <seg>此类表示用来发送和接收数据报包的套接字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a storage facility for cryptographic keys and certificates.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032300Z" creationid="pingfangx" creationdate="20191012T032300Z">
        <seg>此类表示密钥和证书的存储设施。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents an Internet Protocol (IP) address.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083205Z" creationid="pingfangx" creationdate="20191011T083205Z">
        <seg>此类表示互联网协议 (IP) 地址。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents an Internet Protocol version 4 (IPv4) address.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083202Z" creationid="pingfangx" creationdate="20191011T083202Z">
        <seg>此类表示 Internet Protocol version 4 (IPv4) 地址。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents an Internet Protocol version 6 (IPv6) address.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083204Z" creationid="pingfangx" creationdate="20191011T083204Z">
        <seg>此类表示互联网协议第 6 版 (IPv6) 地址。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents an observable object, or "data" in the model-view paradigm.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T045906Z" creationid="pingfangx" creationdate="20191012T045906Z">
        <seg>此类表示模型视图范例中的 observable 对象，或者说“数据”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by &lt;c0&gt;DecimalFormat&lt;/c0&gt; to format numbers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033426Z" creationid="pingfangx" creationdate="20191012T033426Z">
        <seg>此类表示了 &lt;c0&gt;DecimalFormat&lt;/c0&gt; 格式化数字所需的符号集（如小数点、组分隔符等等）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor does &lt;i0&gt;not&lt;/i0&gt; make a copy of the &lt;c1&gt;command&lt;/c1&gt; list.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075948Z" creationid="pingfangx" creationdate="20191014T075948Z">
        <seg>此构造方法&lt;i0&gt;不会&lt;/i0&gt; 制作一份 &lt;c1&gt;command&lt;/c1&gt; 列表的副本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor has the same effect as &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(group, null, name)&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T083943Z" creationid="pingfangx" creationdate="20191014T083943Z">
        <seg>这种构造方法与 &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(group, null, name)&lt;/c3&gt; 同样的效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor has the same effect as &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(group, target, gname)&lt;/c3&gt; ,where &lt;c4&gt;gname&lt;/c4&gt; is a newly generated name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T083857Z" creationid="pingfangx" creationdate="20191014T083857Z">
        <seg>这种构造方法与 &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(group, target, gname)&lt;/c3&gt; 具有相同的作用，其中 &lt;c4&gt;gname&lt;/c4&gt; 是一个新生成的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor has the same effect as &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, null, gname)&lt;/c3&gt;, where &lt;c4&gt;gname&lt;/c4&gt; is a newly generated name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T083748Z" creationid="pingfangx" creationdate="20191014T083748Z">
        <seg>这种构造方法与 &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, null, gname)&lt;/c3&gt; 具有相同的作用，其中 &lt;c4&gt;gname&lt;/c4&gt; 是一个新生成的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor has the same effect as &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, null, name)&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T083941Z" creationid="pingfangx" creationdate="20191014T083922Z">
        <seg>这种构造方法与 &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, null, name)&lt;/c3&gt; 同样的效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor has the same effect as &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, target, gname)&lt;/c3&gt;, where &lt;c4&gt;gname&lt;/c4&gt; is a newly generated name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T083842Z" creationid="pingfangx" creationdate="20191014T083842Z">
        <seg>这种构造方法与 &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, target, gname)&lt;/c3&gt; 具有相同的作用，其中 &lt;c4&gt;gname&lt;/c4&gt; 是一个新生成的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor has the same effect as &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, target, name)&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T083951Z" creationid="pingfangx" creationdate="20191014T083951Z">
        <seg>这种构造方法与 &lt;a1&gt;Thread&lt;/a1&gt;&lt;/a2&gt; &lt;c3&gt;(null, target, name)&lt;/c3&gt; 同样的效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This constructor was deprecated in API level 1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023735Z" creationid="pingfangx" creationdate="20191014T023735Z">
        <seg>此构造函数在 API 级别 1 中已弃用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This enum provides constants of the four Unicode normalization forms that are described in &lt;a0&gt; Unicode Standard Annex #15 — Unicode Normalization Forms&lt;/a0&gt; and two methods to access them.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033653Z" creationid="pingfangx" creationdate="20191012T033653Z">
        <seg>此枚举提供在 &lt;a0&gt; Unicode Standard Annex #15 — Unicode Normalization Forms&lt;/a0&gt; 中描述的四个 Unicode 标准化形式的常量，以及访问这些常量的两个方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This error can be thrown by the &lt;a0&gt;API used to read annotations reflectively&lt;/a0&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T153806Z" creationid="pingfangx" creationdate="20191014T153806Z">
        <seg>此错误可以通过&lt;a0&gt;用于读取反射性注释的API 被抛出&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception can be thrown by the &lt;a0&gt;API used to read annotations reflectively&lt;/a0&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152757Z" creationid="pingfangx" creationdate="20191014T152746Z">
        <seg>此异常可以通过&lt;a0&gt;用于读取反射性注释的API 被抛出&lt;/a0&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception is not thrown until the lock status of this object has been restored as described above.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134832Z" creationid="pingfangx" creationdate="20191014T134832Z">
        <seg>在按上述形式恢复此对象的锁定状态时才会抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception is thrown by the AccessController to indicate that a requested access (to a critical system resource such as the file system or the network) is denied.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032601Z" creationid="pingfangx" creationdate="20191012T032601Z">
        <seg>此异常由 AccessController 抛出，提示请求的访问（对关键系统资源（如文件系统或网络）的访问）被拒绝。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception is thrown if a key in the keystore cannot be recovered.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032652Z" creationid="pingfangx" creationdate="20191012T032652Z">
        <seg>如果 keystore 中的密钥无法恢复，则抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception is thrown if an entry in the keystore cannot be recovered.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032650Z" creationid="pingfangx" creationdate="20191012T032650Z">
        <seg>如果 keystore 中的某项无法恢复，则抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception is thrown when a particular cryptographic algorithm is requested but is not available in the environment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032633Z" creationid="pingfangx" creationdate="20191012T032633Z">
        <seg>当请求特定的加密算法而它在该环境中不可用时抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception is thrown when a particular security provider is requested but is not available in the environment.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032638Z" creationid="pingfangx" creationdate="20191012T032638Z">
        <seg>当请求特定安全性 provider 但它在该环境中不可用时抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception may be thrown by methods that have detected concurrent modification of an object when such modification is not permissible.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033742Z" creationid="pingfangx" creationdate="20191012T033742Z">
        <seg>当方法检测到对象的并发修改，但不允许这种修改时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception will not be thrown if the new element has a default value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T153641Z" creationid="pingfangx" creationdate="20191014T153641Z">
        <seg>如果新元素有默认值，则不抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exception, designed for use by the JCA/JCE engine classes, is thrown when an invalid parameter is passed to a method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032628Z" creationid="pingfangx" creationdate="20191012T032628Z">
        <seg>当将无效参数传递给某个方法时抛出此异常，设计该异常供 JCA/JCE 引擎类使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This field is used to make iterators on Collection-views of the HashMap fail-fast.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084003Z" creationid="pingfangx" creationdate="20191026T084003Z">
        <seg>该字段用于在 HashMap 的 Collection 视图的迭代上产生快速失败。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file specifies various properties including name and general category for every defined Unicode code point or character range.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T142036Z" creationid="pingfangx" creationdate="20191013T142036Z">
        <seg>此文件指定了各种属性，其中包括每个已定义 Unicode 代码点或字符范围的名称和常规类别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This guarantees that enums are never cloned, which is necessary to preserve their "singleton" status.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094626Z" creationid="pingfangx" creationdate="20191014T094626Z">
        <seg>这可保证永远不会复制枚举，这对于保留其“单元素”状态是必需的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation always throws an &lt;t0&gt;UnsupportedOperationException&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140104Z" creationid="pingfangx" creationdate="20191025T140104Z">
        <seg>此实现始终抛出 &lt;t0&gt;UnsupportedOperationException&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation calls &lt;t0&gt;entrySet().clear()&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140002Z" creationid="pingfangx" creationdate="20191025T140002Z">
        <seg>此实现调用 &lt;t0&gt;entrySet().clear()&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation iterates over &lt;t0&gt;entrySet()&lt;/t0&gt; searching for an entry with the specified key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140010Z" creationid="pingfangx" creationdate="20191025T140010Z">
        <seg>此实现在 &lt;t0&gt;entrySet()&lt;/t0&gt; 上进行迭代，以搜索带有指定键的条目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation iterates over &lt;t0&gt;entrySet()&lt;/t0&gt; searching for an entry with the specified value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140028Z" creationid="pingfangx" creationdate="20191025T140013Z">
        <seg>此实现在 &lt;t0&gt;entrySet()&lt;/t0&gt; 上进行迭代，以搜索带有指定值的条目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation iterates over the specified map's &lt;t0&gt;entrySet()&lt;/t0&gt; collection, and calls this map's &lt;t1&gt;put&lt;/t1&gt; operation once for each entry returned by the iteration.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140108Z" creationid="pingfangx" creationdate="20191025T140108Z">
        <seg>此实现在指定映射的 &lt;t0&gt;entrySet()&lt;/t0&gt; collection 上进行迭代，并对迭代返回的每个条目调用一次此映射的 &lt;t1&gt;put&lt;/t1&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation provides all of the optional map operations, and permits &lt;t1&gt;null&lt;/t1&gt; values and the &lt;t2&gt;null&lt;/t2&gt; key.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T131456Z" creationid="pingfangx" creationdate="20191025T131456Z">
        <seg>此实现提供所有可选的映射操作，并允许使用 &lt;t1&gt;null&lt;/t1&gt; 值和 &lt;t2&gt;null&lt;/t2&gt; 键。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation provides constant-time performance for the basic operations (&lt;t0&gt;get&lt;/t0&gt; and &lt;t1&gt;put&lt;/t1&gt;), assuming the hash function disperses the elements properly among the buckets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T131743Z" creationid="pingfangx" creationdate="20191025T131743Z">
        <seg>此实现假定哈希函数将元素适当地分布在各桶之间，可为基本操作（&lt;t0&gt;get&lt;/t0&gt; 和 &lt;t1&gt;put&lt;/t1&gt;）提供稳定的性能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation returns &lt;t0&gt;entrySet().size()&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140121Z" creationid="pingfangx" creationdate="20191025T140121Z">
        <seg>此实现返回 &lt;t0&gt;entrySet().size()&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation returns &lt;t0&gt;size() == 0&lt;/t0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140039Z" creationid="pingfangx" creationdate="20191025T140039Z">
        <seg>此实现返回 &lt;t0&gt;size() == 0&lt;/t0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation returns a collection that subclasses &lt;c0&gt;&lt;a1&gt;AbstractCollection&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140126Z" creationid="pingfangx" creationdate="20191025T140126Z">
        <seg>此实现返回一个子类化 &lt;c0&gt;&lt;a1&gt;AbstractCollection&lt;/a1&gt;&lt;/c0&gt; 的 collection。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation returns a set that subclasses &lt;c0&gt;&lt;a1&gt;AbstractSet&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140044Z" creationid="pingfangx" creationdate="20191025T140044Z">
        <seg>此实现返回一个子类化 &lt;c0&gt;&lt;a1&gt;AbstractSet&lt;/a1&gt;&lt;/c0&gt; 的 set。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation simply returns &lt;t0&gt;null&lt;/t0&gt;; if the programmer desires thread-local variables to have an initial value other than &lt;t1&gt;null&lt;/t1&gt;, &lt;t2&gt;ThreadLocal&lt;/t2&gt; must be subclassed, and this method overridden.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100913Z" creationid="pingfangx" creationdate="20191014T100913Z">
        <seg>该实现返回 &lt;t0&gt;null&lt;/t0&gt;；如果程序员希望线程局部变量具有 &lt;t1&gt;null&lt;/t1&gt; 以外的值，则必须为 &lt;t2&gt;ThreadLocal&lt;/t2&gt; 创建子类，并重写此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This in turn admits the possibility of unbounded thread growth when commands continue to arrive on average faster than they can be processed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125037Z" creationid="pingfangx" creationdate="20191025T125037Z">
        <seg>当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes classes that implement an easily configurable, fine-grained access control security architecture.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T151900Z" creationid="pingfangx" creationdate="20191011T151900Z">
        <seg>包括那些实现了可方便配置的、细粒度的访问控制安全架构的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This integer need not remain consistent from one execution of an application to another execution of the same application.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T131846Z" creationid="pingfangx" creationdate="20191014T131846Z">
        <seg>从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface defines a factory for &lt;c0&gt;URL&lt;/c0&gt; stream protocol handlers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083129Z" creationid="pingfangx" creationdate="20191011T083129Z">
        <seg>该接口为 &lt;c0&gt;URL&lt;/c0&gt; 流协议处理程序定义一个工厂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface defines a factory for content handlers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083027Z" creationid="pingfangx" creationdate="20191011T083027Z">
        <seg>此接口定义内容处理程序的工厂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface defines a factory for datagram socket implementations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083041Z" creationid="pingfangx" creationdate="20191011T083041Z">
        <seg>此接口定义用于数据报套接字实现的工厂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface defines a factory for socket implementations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083103Z" creationid="pingfangx" creationdate="20191011T083103Z">
        <seg>此接口定义用于套接字实现的工厂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface defines a protocol for bidirectional iteration over text.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033150Z" creationid="pingfangx" creationdate="20191012T033150Z">
        <seg>此接口定义了对文本进行双向迭代的协议。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface does not refine the general contracts of the &lt;c0&gt;&lt;a1&gt;equals&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;hashCode&lt;/a3&gt;&lt;/c2&gt; methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070357Z" creationid="pingfangx" creationdate="20191014T070357Z">
        <seg>此接口不修改 &lt;c0&gt;&lt;a1&gt;equals&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;hashCode&lt;/a3&gt;&lt;/c2&gt; 方法的常规协定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface imposes a total ordering on the objects of each class that implements it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T065733Z" creationid="pingfangx" creationdate="20191012T065733Z">
        <seg>此接口强行对实现它的每个类的对象进行整体排序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface is a member of the &lt;a0&gt; Java Collections Framework&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T102142Z" creationid="pingfangx" creationdate="20191014T102142Z">
        <seg>此接口是 &lt;a0&gt;Java Collections Framework&lt;/a0&gt; 的成员。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface is designed to provide a common protocol for objects that wish to execute code while they are active.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154641Z" creationid="pingfangx" creationdate="20191013T154641Z">
        <seg>设计该接口的目的是为希望在活动时执行代码的对象提供一个公共协议。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface provides uniform, read-only access to many different kinds of &lt;c2&gt;char&lt;/c2&gt; sequences.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T070342Z" creationid="pingfangx" creationdate="20191014T070342Z">
        <seg>此接口对许多不同种类的 &lt;c2&gt;char&lt;/c2&gt; 序列提供统一的只读访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface represents a guard, which is an object that is used to protect access to another object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152257Z" creationid="pingfangx" creationdate="20191011T152257Z">
        <seg>此接口表示一个 guard，guard 是用来保护对另一个对象的访问的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface represents the abstract notion of a principal, which can be used to represent any entity, such as an individual, a corporation, and a login id.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152419Z" creationid="pingfangx" creationdate="20191011T152419Z">
        <seg>此接口表示主体的抽象概念，它可以用来表示任何实体，例如，个人、公司或登录 id。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This interface specifies constraints for cryptographic algorithms, keys (key sizes), and other algorithm parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T152108Z" creationid="pingfangx" creationdate="20191011T152108Z">
        <seg>此接口指定用于加密的算法，密钥(密钥大小)，和其他算法参数约束。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a convenience constructor that sets the process builder's command to a string list containing the same strings as the &lt;c0&gt;command&lt;/c0&gt; array, in the same order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075955Z" creationid="pingfangx" creationdate="20191014T075955Z">
        <seg>这是一个有用的构造方法，它将进程生成器的命令设置为与 &lt;c0&gt;command&lt;/c0&gt; 数组包含相同字符串的字符串列表，且顺序相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a convenience method that sets the command to a string list containing the same strings as the &lt;c0&gt;command&lt;/c0&gt; array, in the same order.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080001Z" creationid="pingfangx" creationdate="20191014T080001Z">
        <seg>这是一个有用的方法，它将命令设置为与 &lt;c0&gt;command&lt;/c0&gt; 数组包含相同字符串的字符串列表，且顺序相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is best done at creation time, to prevent accidental unsynchronized access to the map:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134920Z" creationid="pingfangx" creationdate="20191025T134920Z">
        <seg>最好在创建时完成这一操作，以防止对映射进行意外的非同步访问，如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is how the &lt;c0&gt;&lt;c1&gt;&lt;a2&gt;WeakHashMap&lt;/a2&gt;&lt;/c1&gt;&lt;/c0&gt; class works.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090438Z" creationid="pingfangx" creationdate="20191012T090438Z">
        <seg>这就是 &lt;c0&gt;&lt;c1&gt;&lt;a2&gt;WeakHashMap&lt;/a2&gt;&lt;/c1&gt;&lt;/c0&gt; 类的工作方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154747Z" creationid="pingfangx" creationdate="20191013T154747Z">
        <seg>这很重要，因为除非程序员打算修改或增强类的基本行为，否则不应为该类创建子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is messier than typical red-black deletion code because we cannot swap the contents of an interior node with a leaf successor that is pinned by "next" pointers that are accessible independently during traversal.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100811Z" creationid="pingfangx" creationdate="20191026T100811Z">
        <seg>这比典型的红黑删除代码更混乱，因为我们不能将内部节点的内容与被遍历期间独立访问的“下一个”指针固定的叶子后继替换。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is so because sorted sets (and sorted maps) without explicit comparators behave "strangely" when they are used with elements (or keys) whose natural ordering is inconsistent with equals.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101847Z" creationid="pingfangx" creationdate="20191014T101847Z">
        <seg>这是因为在使用自然排序与 equals 不一致的元素（或键）时，没有显式比较器的有序集合（和有序映射表）行为表现“怪异”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the basic key exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032629Z" creationid="pingfangx" creationdate="20191012T032629Z">
        <seg>此异常是基本的密钥异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the common base class of all Java language enumeration types.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T071307Z" creationid="pingfangx" creationdate="20191012T071307Z">
        <seg>这是所有 Java 语言枚举类型的公共基本类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the default behavior.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152534Z" creationid="pingfangx" creationdate="20191014T152534Z">
        <seg>这是默认的行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the exception for invalid Keys (invalid encoding, wrong length, uninitialized, etc).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032626Z" creationid="pingfangx" creationdate="20191012T032626Z">
        <seg>用于无效 Key（无效的编码、错误的长度、未初始化等）的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the exception for invalid or inappropriate algorithm parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032606Z" creationid="pingfangx" creationdate="20191012T032606Z">
        <seg>用于无效或不合适的算法参数的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the general key management exception for all operations dealing with key management.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032630Z" creationid="pingfangx" creationdate="20191012T032630Z">
        <seg>此异常是用于所有处理密钥管理的操作的通用密钥管理异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the generic KeyStore exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032632Z" creationid="pingfangx" creationdate="20191012T032632Z">
        <seg>这是一般的 KeyStore 异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the generic Message Digest exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032603Z" creationid="pingfangx" creationdate="20191012T032603Z">
        <seg>此为一般 Message Digest 异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the generic Signature exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T032648Z" creationid="pingfangx" creationdate="20191012T032648Z">
        <seg>这是一般的签名异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the major difference with URIs which only identify resources, and therefore don't need to have access to the protocol handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T082851Z" creationid="pingfangx" creationdate="20191011T082851Z">
        <seg>此为与 URI 的主要不同点，URI 仅标识资源，所以不必访问协议处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is typically accomplished by synchronizing on some object that naturally encapsulates the map.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134544Z" creationid="pingfangx" creationdate="20191025T134544Z">
        <seg>这一般通过对自然封装该映射的对象进行同步操作来完成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This limitation exists because the corresponding method implementation in the generated proxy class cannot determine which interface it was invoked through.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113050Z" creationid="pingfangx" creationdate="20191015T113050Z">
        <seg>此限制存在的原因是，生成的代理类中的相应方法实现无法确定它通过哪一个接口调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This makes it easier to correlate error messages with the corresponding output.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080107Z" creationid="pingfangx" creationdate="20191014T080107Z">
        <seg>这使得关联错误消息和相应的输出变得更容易。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This map usually acts as a binned (bucketed) hash table, but when bins get too large, they are transformed into bins of TreeNodes, each structured similarly to those in java.util.TreeMap.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T075640Z" creationid="pingfangx" creationdate="20191026T075640Z">
        <seg>这个映射通常充当一个 binned (分箱的)(bucketed (分桶的))哈希表，但是当 bin 变得太大时，它们会被转换成 TreeNodes (树结点) 的 bin，每个 bin 的结构与 java.util.TreeMap 中的相似。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may be acceptable when, for example, updating performance statistics, but rarely otherwise.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122150Z" creationid="pingfangx" creationdate="20191025T122150Z">
        <seg>例如，在更新性能统计数据时，这也许可以接受，但其他情况几乎不可以。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may be appropriate when each task is completely independent of others, so tasks cannot affect each others execution; for example, in a web page server.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125413Z" creationid="pingfangx" creationdate="20191025T125413Z">
        <seg>当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may be used for example, to represent version numbers corresponding to series of updates.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122157Z" creationid="pingfangx" creationdate="20191025T122157Z">
        <seg>例如，这可用于表示与更新系列对应的版本号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may result in a &lt;c3&gt;&lt;a4&gt;SecurityException&lt;/a4&gt;&lt;/c3&gt; being thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080201Z" creationid="pingfangx" creationdate="20191014T080201Z">
        <seg>这可能导致抛出 &lt;c3&gt;&lt;a4&gt;SecurityException&lt;/a4&gt;&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may result in a &lt;c5&gt;&lt;a6&gt;SecurityException&lt;/a6&gt;&lt;/c5&gt; being thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080100Z" creationid="pingfangx" creationdate="20191014T080100Z">
        <seg>这可能导致抛出 &lt;c5&gt;&lt;a6&gt;SecurityException&lt;/a6&gt;&lt;/c5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may result in multiple invocations of the &lt;t6&gt;initialValue&lt;/t6&gt; method in the current thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100901Z" creationid="pingfangx" creationdate="20191014T100901Z">
        <seg>这将导致在当前线程多次调用 &lt;t6&gt;initialValue&lt;/t6&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may result in throwing a &lt;c1&gt;SecurityException&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084259Z" creationid="pingfangx" creationdate="20191014T084259Z">
        <seg>这可能导致抛出 &lt;c1&gt;SecurityException&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means your main application or applet can be written to be language-independent, and it can rely upon separate, dynamically-linked localized resources.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033103Z" creationid="pingfangx" creationdate="20191012T033103Z">
        <seg>这意味着所编写的主程序或 applet 是与语言无关的，并且它可以依靠独立的、动态链接的本地化资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This meta-annotation indicates that the declared type is intended solely for use as a member type in complex annotation type declarations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T152301Z" creationid="pingfangx" creationdate="20191014T152301Z">
        <seg>此元注释指示该声明类型只可作为复杂注释类型声明中的成员类型使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method (which varies in argument types across different classes) atomically sets a variable to the &lt;c0&gt;updateValue&lt;/c0&gt; if it currently holds the &lt;c1&gt;expectedValue&lt;/c1&gt;, reporting &lt;c2&gt;true&lt;/c2&gt; on success.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120734Z" creationid="pingfangx" creationdate="20191025T120734Z">
        <seg>如果此方法（在不同的类间参数类型也不同）当前保持 &lt;c0&gt;expectedValue&lt;/c0&gt;，则以原子方式将变量设置为 &lt;c1&gt;updateValue&lt;/c1&gt;，并在成功时报告 &lt;c2&gt;true&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method causes the current thread (call it &lt;v0&gt;T&lt;/v0&gt;) to place itself in the wait set for this object and then to relinquish any and all synchronization claims on this object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133656Z" creationid="pingfangx" creationdate="20191014T133656Z">
        <seg>此方法导致当前线程（称之为 &lt;v0&gt;T&lt;/v0&gt;）将其自身放置在对象的等待集中，然后放弃此对象上的所有同步要求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method checks that the command is a valid operating system command.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080145Z" creationid="pingfangx" creationdate="20191014T080145Z">
        <seg>此方法检查 command 是否是一条有效的操作系统命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method creates the component type of the array.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161721Z" creationid="pingfangx" creationdate="20191014T161721Z">
        <seg>此方法创建数组的组件类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method does &lt;i0&gt;not&lt;/i0&gt; make a copy of the &lt;c1&gt;command&lt;/c1&gt; list.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080005Z" creationid="pingfangx" creationdate="20191014T080005Z">
        <seg>此方法&lt;i0&gt;不会&lt;/i0&gt; 制作一份 &lt;c1&gt;command&lt;/c1&gt; 列表的副本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method does not offer real-time guarantees: It schedules the timeout as if by invoking the &lt;c0&gt;&lt;a1&gt;wait(long)&lt;/a1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155549Z" creationid="pingfangx" creationdate="20191014T155549Z">
        <seg>此方法不提供实时保证：它通过调用 &lt;c0&gt;&lt;a1&gt;wait(long)&lt;/a1&gt;&lt;/c0&gt; 方法来调度超时。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method does not properly convert bytes into characters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T023704Z" creationid="pingfangx" creationdate="20191014T023704Z">
        <seg>该方法无法将字节正确地转换为字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method does not properly convert characters into bytes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024638Z" creationid="pingfangx" creationdate="20191014T024638Z">
        <seg>该方法无法将字符正确转换为字节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method exists solely for use with &lt;c0&gt;&lt;a1&gt;suspend()&lt;/a1&gt;&lt;/c0&gt;, which has been deprecated because it is deadlock-prone.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082103Z" creationid="pingfangx" creationdate="20191014T082103Z">
        <seg>该方法只用于在使用 &lt;c0&gt;&lt;a1&gt;suspend()&lt;/a1&gt;&lt;/c0&gt;，它已被弃用，因为它具有死锁倾向。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method has been deprecated, as it is inherently deadlock-prone.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082527Z" creationid="pingfangx" creationdate="20191014T082527Z">
        <seg>该方法已过时，因为它具有固有的死锁倾向。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is &lt;c2&gt;final&lt;/c2&gt; in order to ensure that the &lt;c3&gt;equals&lt;/c3&gt; and &lt;c4&gt;hashCode&lt;/c4&gt; methods will be consistent in all subclasses.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093603Z" creationid="pingfangx" creationdate="20191014T093603Z">
        <seg>此方法为 &lt;c2&gt;final&lt;/c2&gt;，可确保 &lt;c3&gt;equals&lt;/c3&gt; 和 &lt;c4&gt;hashCode&lt;/c4&gt; 方法在所有子类中一致。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is designed primarily for convenient access to marker annotations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161321Z" creationid="pingfangx" creationdate="20191014T161321Z">
        <seg>此方法主要是为了便于访问标记注释而设计的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120902Z" creationid="pingfangx" creationdate="20191015T120902Z">
        <seg>此方法相当于：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is inherently deadlock-prone.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093329Z" creationid="pingfangx" creationdate="20191014T093329Z">
        <seg>此方法容易导致死锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is inherently unsafe.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154452Z" creationid="pingfangx" creationdate="20191013T154427Z">
        <seg>该方法具有固有的不安全性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is invoked only by Java code; when the garbage collector clears references it does so directly, without invoking this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155158Z" creationid="pingfangx" creationdate="20191014T155158Z">
        <seg>只有 Java 代码才调用此方法；当垃圾回收器清除引用时，可以直接进行操作，无需调用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is invoked only by Java code; when the garbage collector enqueues references it does so directly, without invoking this method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155203Z" creationid="pingfangx" creationdate="20191014T155203Z">
        <seg>只有 Java 代码才调用此方法；当垃圾回收器将引用加入队列时，可以直接进行操作，无需调用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is provided so that class loaders can be made to ignore any command line or persistent assertion status settings and "start with a clean slate."</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073541Z" creationid="pingfangx" creationdate="20191014T073541Z">
        <seg>提供此方法的目的是使类装入器可以忽略任何命令行或持久断言状态设置和“从头开始”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is provided so that this class can implement the &lt;c0&gt;&lt;a1&gt;CharSequence&lt;/a1&gt;&lt;/c0&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041712Z" creationid="pingfangx" creationdate="20191014T041712Z">
        <seg>提供该方法使得本类可以实现 &lt;c0&gt;&lt;a1&gt;CharSequence&lt;/a1&gt;&lt;/c0&gt; 接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is similar to the &lt;c0&gt;wait&lt;/c0&gt; method of one argument, but it allows finer control over the amount of time to wait for a notification before giving up.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133403Z" creationid="pingfangx" creationdate="20191014T133403Z">
        <seg>此方法类似于一个参数的 &lt;c0&gt;wait&lt;/c0&gt; 方法，但它允许更好地控制在放弃之前等待通知的时间量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is supported for the benefit of hash tables such as those provided by &lt;c0&gt;&lt;a1&gt;HashMap&lt;/a1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T131725Z" creationid="pingfangx" creationdate="20191014T131712Z">
        <seg>支持此方法是为了提高哈希表（例如 &lt;c0&gt;&lt;a1&gt;HashMap&lt;/a1&gt;&lt;/c0&gt; 提供的哈希表）的性能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is used only for debugging.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084515Z" creationid="pingfangx" creationdate="20191014T084515Z">
        <seg>该方法仅用于调试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is used solely in conjunction with &lt;t0&gt;Thread.suspend&lt;/t0&gt; and &lt;t1&gt;ThreadGroup.suspend&lt;/t1&gt;, both of which have been deprecated, as they are inherently deadlock-prone.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093316Z" creationid="pingfangx" creationdate="20191014T093316Z">
        <seg>此方法只用于联合 &lt;t0&gt;Thread.suspend&lt;/t0&gt; 和 &lt;t1&gt;ThreadGroup.suspend&lt;/t1&gt; 时，因为它们所固有的容易导致死锁的特性，所以两者都已废弃。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method may be overridden, though it typically isn't necessary or desirable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094531Z" creationid="pingfangx" creationdate="20191014T094531Z">
        <seg>可以重写此方法，虽然一般来说没有必要。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method must be invoked before the thread is started.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T085058Z" creationid="pingfangx" creationdate="20191014T085058Z">
        <seg>必须在启动线程之前调用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method predates the general-purpose exception chaining facility.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T110949Z" creationid="pingfangx" creationdate="20191015T110949Z">
        <seg>该方法早于通用异常链设施。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns &lt;c1&gt;true&lt;/c1&gt; if and only if &lt;c2&gt;this&lt;/c2&gt; and the argument refer to the same object; since this method is &lt;c3&gt;final&lt;/c3&gt;, this guarantee holds for all subclasses.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T093554Z" creationid="pingfangx" creationdate="20191014T093554Z">
        <seg>当且仅当 &lt;c1&gt;this&lt;/c1&gt; 和参数引用同一对象时，此方法才返回 &lt;c2&gt;true&lt;/c2&gt;，由于此方法为 &lt;c3&gt;final&lt;/c3&gt;，这保证了保持所有子类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns immediately if the subprocess has already terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075645Z" creationid="pingfangx" creationdate="20191014T075645Z">
        <seg>如果已终止该子进程，此方法立即返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method should only be called by a thread that is the owner of this object's monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T132821Z" creationid="pingfangx" creationdate="20191014T132821Z">
        <seg>此方法只应由作为此对象监视器的所有者的线程来调用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method synchronizes on &lt;c0&gt;this&lt;/c0&gt; (the destination) object but does not synchronize on the source (&lt;c1&gt;sb&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064458Z" creationid="pingfangx" creationdate="20191014T064458Z">
        <seg>该方法在 &lt;c0&gt;this&lt;/c0&gt;（目标）对象上实现同步，但不在源（&lt;c1&gt;sb&lt;/c1&gt;）上实现同步。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method synchronizes on this (the destination) object but does not synchronize on the source (&lt;c0&gt;s&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T064817Z" creationid="pingfangx" creationdate="20191014T064817Z">
        <seg>该方法在 this（目标）对象上实现同步，但不在源（&lt;c0&gt;s&lt;/c0&gt;）上实现同步。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method was deprecated in API level 1.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T024637Z" creationid="pingfangx" creationdate="20191014T024637Z">
        <seg>此方法在 API 级别 1 中已弃用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method was originally designed to destroy this thread without any cleanup.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081833Z" creationid="pingfangx" creationdate="20191014T081833Z">
        <seg>该方法最初用于破坏该线程，但不作任何清除。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method will be invoked on an invocation handler when a method is invoked on a proxy instance that it is associated with.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T170133Z" creationid="pingfangx" creationdate="20191014T170133Z">
        <seg>在与方法关联的代理实例上调用方法时，将在调用处理程序上调用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method will be invoked the first time a thread accesses the variable with the &lt;c0&gt;&lt;a1&gt;get()&lt;/a1&gt;&lt;/c0&gt; method, unless the thread previously invoked the &lt;c2&gt;&lt;a3&gt;set(T)&lt;/a3&gt;&lt;/c2&gt; method, in which case the &lt;t4&gt;initialValue&lt;/t4&gt; method will not be invoked for the thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100910Z" creationid="pingfangx" creationdate="20191014T100910Z">
        <seg>线程第一次使用 &lt;c0&gt;&lt;a1&gt;get()&lt;/a1&gt;&lt;/c0&gt; 方法访问变量时将调用此方法，但如果线程之前调用了 &lt;c2&gt;&lt;a3&gt;set(T)&lt;/a3&gt;&lt;/c2&gt; 方法，则不会对该线程再调用 &lt;t4&gt;initialValue&lt;/t4&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method will return &lt;t1&gt;null&lt;/t1&gt; in such implementations if this class loader's parent is the bootstrap class loader.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T073608Z" creationid="pingfangx" creationdate="20191014T073608Z">
        <seg>如果该类由引导类加载器加载，则此方法在这类实现中将返回 &lt;t1&gt;null&lt;/t1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method will return a zero-length array if this thread has not started, has started but has not yet been scheduled to run by the system, or has terminated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T090658Z" creationid="pingfangx" creationdate="20191014T090658Z">
        <seg>如果该线程尚未启动或已经终止，则该方法将返回一个零长度数组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This object (which is already a string!) is itself returned.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030133Z" creationid="pingfangx" creationdate="20191014T030133Z">
        <seg>该对象(已经是一个字符串！)本身返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This ordering is referred to as the class's &lt;i0&gt;natural ordering&lt;/i0&gt;, and the class's &lt;t1&gt;compareTo&lt;/t1&gt; method is referred to as its &lt;i2&gt;natural comparison method&lt;/i2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101615Z" creationid="pingfangx" creationdate="20191014T101615Z">
        <seg>这种排序被称为类的&lt;i0&gt;自然排序&lt;/i0&gt;，类的 &lt;t1&gt;compareTo&lt;/t1&gt; 方法被称为它的&lt;i2&gt;自然比较方法&lt;/i2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This package also supports the generation and storage of cryptographic public key pairs, as well as a number of exportable cryptographic operations including those for message digest and signature generation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T151922Z" creationid="pingfangx" creationdate="20191011T151922Z">
        <seg>此包也支持密码公钥对的生成和存储，以及包括信息摘要和签名生成在内的可输出密码操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This package contains three main groups of classes and interfaces:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T033111Z" creationid="pingfangx" creationdate="20191012T033111Z">
        <seg>此包包含类和接口的三大主要组：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This package includes a few small standardized extensible frameworks, as well as some classes that provide useful functionality and are otherwise tedious or difficult to implement.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T105040Z" creationid="pingfangx" creationdate="20191025T105040Z">
        <seg>此包包括了几个小的、已标准化的可扩展框架，以及一些提供有用功能的类，没有这些类，这些功能会很难实现或实现起来冗长乏味。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This parameter can also be changed dynamically using method &lt;c2&gt;&lt;a3&gt;setKeepAliveTime(long, TimeUnit)&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124430Z" creationid="pingfangx" creationdate="20191025T124430Z">
        <seg>也可以使用方法 &lt;c2&gt;&lt;a3&gt;setKeepAliveTime(long, TimeUnit)&lt;/a3&gt;&lt;/c2&gt; 动态地更改此参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This policy avoids lockups when handling sets of requests that might have internal dependencies.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125021Z" creationid="pingfangx" creationdate="20191025T125021Z">
        <seg>此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This process will be repeated until an annotation for this type is found, or the top of the class hierarchy (Object) is reached.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151859Z" creationid="pingfangx" creationdate="20191014T151859Z">
        <seg>此过程会重复进行，直到找到此类型的注释或到达了该类层次结构的顶层 (Object) 为止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This protection domain will typically be granted &lt;c2&gt;java.security.AllPermission&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112552Z" creationid="pingfangx" creationdate="20191015T112552Z">
        <seg>此保护域通常被授予 &lt;c2&gt;java.security.AllPermission&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This provides a means of reducing resource consumption when the pool is not being actively used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124419Z" creationid="pingfangx" creationdate="20191025T124419Z">
        <seg>这提供了当池处于非活动状态时减少资源消耗的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This provides a simple feedback control mechanism that will slow down the rate that new tasks are submitted.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125557Z" creationid="pingfangx" creationdate="20191025T125557Z">
        <seg>此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This relaxation permits better-performing implementations where strict reproducibility is not required.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150230Z" creationid="pingfangx" creationdate="20191013T150230Z">
        <seg>此类在不需要严格重复的地方可以得到更好的执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This restriction means that not all of the exception types returned by invoking &lt;c5&gt;getExceptionTypes&lt;/c5&gt; on the &lt;c6&gt;Method&lt;/c6&gt; object passed to the &lt;c7&gt;invoke&lt;/c7&gt; method can necessarily be thrown successfully by the &lt;c8&gt;invoke&lt;/c8&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113243Z" creationid="pingfangx" creationdate="20191015T113243Z">
        <seg>此限制表示并非所有的由传递到 &lt;c5&gt;invoke&lt;/c5&gt; 方法的 &lt;c6&gt;Method&lt;/c6&gt; 对象上调用 &lt;c7&gt;getExceptionTypes&lt;/c7&gt; 返回的异常类型都可以由 &lt;c8&gt;invoke&lt;/c8&gt; 方法成功抛出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sequence is altered to represent a new character sequence that is identical to the old character sequence, except that it contains the character &lt;c1&gt;ch&lt;/c1&gt; at position &lt;c2&gt;index&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041352Z" creationid="pingfangx" creationdate="20191014T041352Z">
        <seg>此序列将被转换，以表示等同于原字符序列的新字符序列，唯一的不同在于新序列在 &lt;c1&gt;index&lt;/c1&gt; 处包含 &lt;c2&gt;ch&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sequence is shortened by one &lt;c1&gt;char&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040240Z" creationid="pingfangx" creationdate="20191014T040240Z">
        <seg>此序列将缩短一个 &lt;c1&gt;char&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This subclass should override the &lt;c1&gt;run&lt;/c1&gt; method of class &lt;c2&gt;Thread&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081052Z" creationid="pingfangx" creationdate="20191014T081052Z">
        <seg>该子类应重写 &lt;c1&gt;Thread&lt;/c1&gt; 类的 &lt;c2&gt;run&lt;/c2&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type should be used to annotate the declarations of types whose annotations affect the use of annotated elements by their clients.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151829Z" creationid="pingfangx" creationdate="20191014T151829Z">
        <seg>应使用此类型来注释这些类型的声明：其注释会影响由其客户端注释的元素的使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This versioning information is retrieved and made available by the &lt;c1&gt;&lt;a2&gt;ClassLoader&lt;/a2&gt;&lt;/c1&gt; instance that loaded the class(es).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094830Z" creationid="pingfangx" creationdate="20191014T094830Z">
        <seg>通过用于加载类的 &lt;c1&gt;&lt;a2&gt;ClassLoader&lt;/a2&gt;&lt;/c1&gt; 实例，可以获取并获得此版本信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread &lt;v1&gt;T&lt;/v1&gt; becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T133711Z" creationid="pingfangx" creationdate="20191014T133711Z">
        <seg>出于线程调度目的，在发生以下四种情况之一前，线程 &lt;v1&gt;T&lt;/v1&gt; 被禁用，且处于休眠状态：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread &lt;v2&gt;T&lt;/v2&gt; then returns from the invocation of the &lt;c3&gt;wait&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134317Z" creationid="pingfangx" creationdate="20191014T134317Z">
        <seg>然后，线程 &lt;v2&gt;T&lt;/v2&gt; 从 &lt;c3&gt;wait&lt;/c3&gt; 方法的调用中返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread pools address two different problems: they usually provide improved performance when executing large numbers of asynchronous tasks, due to reduced per-task invocation overhead, and they provide a means of bounding and managing the resources, including threads, consumed when executing a collection of tasks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123321Z" creationid="pingfangx" creationdate="20191025T123321Z">
        <seg>线程池可以解决两个不同问题：由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源（包括执行任务集时使用的线程）的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread safety is the responsibility of classes that extend and implement this interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101411Z" creationid="pingfangx" creationdate="20191014T101411Z">
        <seg>线程安全由扩展和实现此接口的类负责。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread state for a runnable thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104511Z" creationid="pingfangx" creationdate="20191014T104511Z">
        <seg>可运行线程的线程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread state for a terminated thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104512Z" creationid="pingfangx" creationdate="20191014T104512Z">
        <seg>已终止线程的线程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread state for a thread blocked waiting for a monitor lock.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104508Z" creationid="pingfangx" creationdate="20191014T104508Z">
        <seg>受阻塞并且正在等待监视器锁的某一线程的线程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread state for a thread which has not yet started.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104509Z" creationid="pingfangx" creationdate="20191014T104509Z">
        <seg>至今尚未启动的线程的状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread state for a waiting thread with a specified waiting time.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104513Z" creationid="pingfangx" creationdate="20191014T104513Z">
        <seg>具有指定等待时间的某一等待线程的线程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thread state for a waiting thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104514Z" creationid="pingfangx" creationdate="20191014T104514Z">
        <seg>某一等待线程的线程状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Threads should possess the "modifyThread" &lt;c9&gt;RuntimePermission&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124302Z" creationid="pingfangx" creationdate="20191025T124302Z">
        <seg>线程应该有 “modifyThread”&lt;c9&gt;RuntimePermission&lt;/c9&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Threads with higher priority are executed in preference to threads with lower priority.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080852Z" creationid="pingfangx" creationdate="20191014T080852Z">
        <seg>高优先级线程的执行优先于低优先级线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Three types of reference objects are provided, each weaker than the last: &lt;e1&gt;soft&lt;/e1&gt;, &lt;e2&gt;weak&lt;/e2&gt;, and &lt;e3&gt;phantom&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T085534Z" creationid="pingfangx" creationdate="20191012T085534Z">
        <seg>有三种类型的引用对象，按从弱到强依次为： &lt;e1&gt;软&lt;/e1&gt; 引用、 &lt;e2&gt;弱&lt;/e2&gt; 引用和 &lt;e3&gt;虚&lt;/e3&gt; 引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throwing &lt;c0&gt;null&lt;/c0&gt; as if it were a &lt;c1&gt;Throwable&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T104842Z" creationid="pingfangx" creationdate="20191014T104842Z">
        <seg>将 &lt;c0&gt;null&lt;/c0&gt; 作为 &lt;c1&gt;Throwable&lt;/c1&gt; 值抛出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throwing a "wrapped exception" (i.e., an exception containing a cause) allows the upper layer to communicate the details of the failure to its caller without incurring either of these shortcomings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113309Z" creationid="pingfangx" creationdate="20191013T113309Z">
        <seg>抛出“经过包装的异常”（即包含 cause 的异常）允许高层与其调用方交流失败详细信息，而不会招致上述任何一个缺点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown by &lt;c0&gt;String&lt;/c0&gt; methods to indicate that an index is either negative or greater than the size of the string.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073129Z" creationid="pingfangx" creationdate="20191012T073129Z">
        <seg>此异常由 &lt;c0&gt;String&lt;/c0&gt; 方法抛出，指示索引或者为负，或者超出字符串的大小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown by a &lt;c0&gt;Scanner&lt;/c0&gt; to indicate that the token retrieved does not match the pattern for the expected type, or that the token is out of range for the expected type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050429Z" creationid="pingfangx" creationdate="20191012T050429Z">
        <seg>由 &lt;c0&gt;Scanner&lt;/c0&gt; 抛出，表明获取的标记与期望类型的模式不匹配，或者该标记超出期望类型的范围。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown by a method invocation on a proxy instance if its invocation handler's &lt;c0&gt;&lt;a1&gt;invoke&lt;/a1&gt;&lt;/c0&gt; method throws a checked exception (a &lt;c2&gt;Throwable&lt;/c2&gt; that is not assignable to &lt;c3&gt;RuntimeException&lt;/c3&gt; or &lt;c4&gt;Error&lt;/c4&gt;) that is not assignable to any of the exception types declared in the &lt;c5&gt;throws&lt;/c5&gt; clause of the method that was invoked on the proxy instance and dispatched to the invocation handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092231Z" creationid="pingfangx" creationdate="20191012T092231Z">
        <seg>如果代理实例的调用处理程序的 &lt;c0&gt;&lt;a1&gt;invoke&lt;/a1&gt;&lt;/c0&gt; 方法抛出一个经过检查的异常（不可分配给 &lt;c2&gt;RuntimeException&lt;/c2&gt; 或 &lt;c3&gt;Error&lt;/c3&gt; 的 &lt;c4&gt;Throwable&lt;/c4&gt; ），且该异常不可分配给该方法（在代理实例上调用该方法，并将其指派到调用处理程序）的 &lt;c5&gt;throws&lt;/c5&gt; 子句中声明的任何异常类，则由代理实例上的方法调用抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown by methods in &lt;c0&gt;&lt;a1&gt;Locale&lt;/a1&gt;&lt;/c0&gt; and &lt;c2&gt;&lt;a3&gt;Locale.Builder&lt;/a3&gt;&lt;/c2&gt; to indicate that an argument is not a well-formed BCP 47 tag.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050550Z" creationid="pingfangx" creationdate="20191012T050550Z">
        <seg>由方法 &lt;c0&gt;&lt;a1&gt;Locale&lt;/a1&gt;&lt;/c0&gt; 和 &lt;c2&gt;&lt;a3&gt;Locale.Builder&lt;/a3&gt;&lt;/c2&gt; 抛出以指示参数不是一个正确格式的 BCP 47 标签。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown by methods in the &lt;c0&gt;Stack&lt;/c0&gt; class to indicate that the stack is empty.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050345Z" creationid="pingfangx" creationdate="20191012T050345Z">
        <seg>该异常由 &lt;c0&gt;Stack&lt;/c0&gt; 类中的方法抛出，以表明堆栈为空。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown by the &lt;c0&gt;nextElement&lt;/c0&gt; method of an &lt;c1&gt;Enumeration&lt;/c1&gt; to indicate that there are no more elements in the enumeration.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050434Z" creationid="pingfangx" creationdate="20191012T050434Z">
        <seg>由 &lt;c0&gt;Enumeration&lt;/c0&gt; 的 &lt;c1&gt;nextElement&lt;/c1&gt; 方法抛出，表明枚举中没有更多的元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown by the security manager to indicate a security violation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073127Z" creationid="pingfangx" creationdate="20191012T073127Z">
        <seg>由安全管理器抛出的异常，指示存在安全侵犯。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown if an application attempts to access or modify a field, or to call a method that it does not have access to.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073532Z" creationid="pingfangx" creationdate="20191012T073219Z">
        <seg>当应用程序试图访问或修改它不能访问的字段，或调用它不能访问的方法时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown if an application tries to access or modify a specified field of an object, and that object no longer has that field.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073546Z" creationid="pingfangx" creationdate="20191012T073231Z">
        <seg>如果应用程序试图访问或修改一个指定的对象字段，而该对象不再包含该字段时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073548Z" creationid="pingfangx" creationdate="20191012T073233Z">
        <seg>当应用程序试图调用类（静态或实例）的指定方法，而该类已不再具有该方法的定义时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown if an application tries to create an array with negative size.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073034Z" creationid="pingfangx" creationdate="20191012T073034Z">
        <seg>如果应用程序试图创建大小为负的数组，则抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown if the Java Virtual Machine cannot find an appropriate native-language definition of a method declared &lt;c0&gt;native&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073432Z" creationid="pingfangx" creationdate="20191012T073432Z">
        <seg>当 Java 虚拟机无法找到声明为 &lt;c0&gt;native&lt;/c0&gt; 的方法的适当本地语言定义时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown if the Java Virtual Machine or a &lt;c0&gt;ClassLoader&lt;/c0&gt; instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the &lt;c1&gt;new&lt;/c1&gt; expression) and no definition of the class could be found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073707Z" creationid="pingfangx" creationdate="20191012T073228Z">
        <seg>当 Java 虚拟机或 &lt;c0&gt;ClassLoader&lt;/c0&gt; 实例试图在类的定义中加载（作为通常方法调用的一部分或者作为使用 &lt;c1&gt;new&lt;/c1&gt; 表达式创建的新实例的一部分），但无法找到该类的定义时，抛出此错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate some unexpected internal error has occurred in the Java Virtual Machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073659Z" creationid="pingfangx" creationdate="20191012T073223Z">
        <seg>该错误指示 Java 虚拟机中出现一些意外的内部错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that a HTTP request needs to be retried but cannot be retried automatically, due to streaming mode being enabled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083434Z" creationid="pingfangx" creationdate="20191011T083434Z">
        <seg>抛出此异常指示 HTTP 请求需要重试，但由于启用了流模式而无法自动重试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that a malformed URL has occurred.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083435Z" creationid="pingfangx" creationdate="20191011T083435Z">
        <seg>抛出这一异常指示出现了错误的 URL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that a method has been passed an illegal or inappropriate argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073013Z" creationid="pingfangx" creationdate="20191012T073013Z">
        <seg>抛出的异常表明向方法传递了一个不合法或不正确的参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that a program has attempted to access an element of an annotation type that was added to the annotation type definition after the annotation was compiled (or serialized).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082805Z" creationid="pingfangx" creationdate="20191012T082805Z">
        <seg>若某个注释在编译（或序列化）后将某个注释类型添加到其类型定义中，而程序试图该注释类型的元素时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that a program has attempted to access an element of an annotation whose type has changed after the annotation was compiled (or serialized).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082804Z" creationid="pingfangx" creationdate="20191012T082804Z">
        <seg>若某个注释的类型在对该注释进行编译（或序列化）后发生了更改，而程序试图访问该注释的元素时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073019Z" creationid="pingfangx" creationdate="20191012T073019Z">
        <seg>抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that a thread is not in an appropriate state for the requested operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073023Z" creationid="pingfangx" creationdate="20191012T073023Z">
        <seg>指示线程没有处于请求操作所要求的适当状态时抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that an array has been accessed with an illegal index.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072925Z" creationid="pingfangx" creationdate="20191012T072925Z">
        <seg>用非法索引访问数组时抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that an assertion has failed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073631Z" creationid="pingfangx" creationdate="20191012T073138Z">
        <seg>抛出该错误指示某个断言失败。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that an attempt has been made to store the wrong type of object into an array of objects.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072928Z" creationid="pingfangx" creationdate="20191012T072928Z">
        <seg>试图将错误类型的对象存储到一个对象数组时抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073025Z" creationid="pingfangx" creationdate="20191012T073025Z">
        <seg>指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of properties, as per the &lt;c0&gt;&lt;a1&gt;Properties&lt;/a1&gt;&lt;/c0&gt; specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050431Z" creationid="pingfangx" creationdate="20191012T050431Z">
        <seg>当按照 &lt;c0&gt;&lt;a1&gt;Properties&lt;/a1&gt;&lt;/c0&gt; 规范，输入内容不符合属性集的正确 XML 文档类型，从而无法完成操作时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that an unknown service exception has occurred.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083539Z" creationid="pingfangx" creationdate="20191011T083539Z">
        <seg>抛出这一异常指示出现了未知服务异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that the &lt;c0&gt;clone&lt;/c0&gt; method in class &lt;c1&gt;Object&lt;/c1&gt; has been called to clone an object, but that the object's class does not implement the &lt;c2&gt;Cloneable&lt;/c2&gt; interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072942Z" creationid="pingfangx" creationdate="20191012T072942Z">
        <seg>当调用 &lt;c0&gt;Object&lt;/c0&gt; 类中的 &lt;c1&gt;clone&lt;/c1&gt; 方法复制对象，但该对象的类无法实现 &lt;c2&gt;Cloneable&lt;/c2&gt; 接口时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that the IP address of a host could not be determined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083538Z" creationid="pingfangx" creationdate="20191011T083538Z">
        <seg>指示主机 IP 地址无法确定而抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073452Z" creationid="pingfangx" creationdate="20191012T073452Z">
        <seg>当 Java 虚拟机崩溃或用尽了它继续操作所需的资源时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that the application has attempted to convert a string to one of the numeric types, but that the string does not have the appropriate format.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073046Z" creationid="pingfangx" creationdate="20191012T073046Z">
        <seg>当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072932Z" creationid="pingfangx" creationdate="20191012T072932Z">
        <seg>当试图将对象强制转换为不是实例的子类时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that the requested operation is not supported.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073132Z" creationid="pingfangx" creationdate="20191012T073132Z">
        <seg>当不支持请求的操作时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that there is an error creating or accessing a Socket.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083536Z" creationid="pingfangx" creationdate="20191011T083517Z">
        <seg>抛出此异常指示在创建或访问一个 Socket 时存在错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown to indicate that there is an error in the underlying protocol, such as a TCP error.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083439Z" creationid="pingfangx" creationdate="20191011T083439Z">
        <seg>抛出此异常指示在底层协议中存在错误，如 TCP 错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when a particular method cannot be found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073038Z" creationid="pingfangx" creationdate="20191012T073038Z">
        <seg>无法找到某一特定方法时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when a semantically malformed parameterized type is encountered by a reflective method that needs to instantiate it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092212Z" creationid="pingfangx" creationdate="20191012T092212Z">
        <seg>当反射方法遇到语义错误的参数化类型，而反射方法需要实例化该类型时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when a serious I/O error has occurred.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065640Z" creationid="pingfangx" creationdate="20191011T065640Z">
        <seg>当发生严重的 I/O 错误时，抛出此错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when a stack overflow occurs because an application recurses too deeply.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073239Z" creationid="pingfangx" creationdate="20191012T073239Z">
        <seg>当应用程序递归太深而发生堆栈溢出时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when a syntactically malformed signature attribute is encountered by a reflective method that needs to interpret the generic signature information for a type, method or constructor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092234Z" creationid="pingfangx" creationdate="20191012T092234Z">
        <seg>当需要解释类型、方法或构造方法的一般签名信息的反射方法遇到语法错误的签名属性时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073032Z" creationid="pingfangx" creationdate="20191012T073032Z">
        <seg>当线程在活动之前或活动期间处于正在等待、休眠或占用状态且该线程被中断时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an application attempts to use &lt;c0&gt;null&lt;/c0&gt; in a case where an object is required.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073043Z" creationid="pingfangx" creationdate="20191012T073043Z">
        <seg>当应用程序试图在需要对象的地方使用 &lt;c0&gt;null&lt;/c0&gt; 时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an application tries to access a type using a string representing the type's name, but no definition for the type with the specified name can be found.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073130Z" creationid="pingfangx" creationdate="20191012T073130Z">
        <seg>当应用程序试图使用表示类型名称的字符串对类型进行访问，但无法找到带有指定名称的类型定义时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an application tries to access an enum constant by name and the enum type contains no constant with the specified name.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072945Z" creationid="pingfangx" creationdate="20191012T072945Z">
        <seg>当应用程序试图通过名称和枚举类型访问那些不包含具有指定名称的常量的枚举常量时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an application tries to call an abstract method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073136Z" creationid="pingfangx" creationdate="20191012T073136Z">
        <seg>当应用程序试图调用一个抽象方法时，抛出此错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an application tries to create an instance of a class using the &lt;c0&gt;newInstance&lt;/c0&gt; method in class &lt;c1&gt;Class&lt;/c1&gt;, but the specified class object cannot be instantiated.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073029Z" creationid="pingfangx" creationdate="20191012T073029Z">
        <seg>当应用程序试图使用 &lt;c0&gt;Class&lt;/c0&gt; 类中的 &lt;c1&gt;newInstance&lt;/c1&gt; 方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an application tries to load in a class through its string name using:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072935Z" creationid="pingfangx" creationdate="20191012T072935Z">
        <seg>当应用程序试图使用以下方法通过字符串名加载类时，抛出该异常：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an application tries to use the Java &lt;c0&gt;new&lt;/c0&gt; construct to instantiate an abstract class or an interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073540Z" creationid="pingfangx" creationdate="20191012T073222Z">
        <seg>当应用程序试图使用 Java 的 &lt;c0&gt;new&lt;/c0&gt; 结构来实例化一个抽象类或一个接口时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an exceptional arithmetic condition has occurred.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T072002Z" creationid="pingfangx" creationdate="20191012T072002Z">
        <seg>当出现异常的运算条件时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an incompatible class change has occurred to some class definition.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073536Z" creationid="pingfangx" creationdate="20191012T073220Z">
        <seg>在某些类定义中出现不兼容的类更改时抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an instance is required to have a Serializable interface.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065519Z" creationid="pingfangx" creationdate="20191011T065519Z">
        <seg>当实例需要具有序列化接口时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when an unknown but serious exception has occurred in the Java Virtual Machine.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073425Z" creationid="pingfangx" creationdate="20191012T073425Z">
        <seg>当 Java 虚拟机中出现一个未知但严重的异常时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when control information that was read from an object stream violates internal consistency checks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065525Z" creationid="pingfangx" creationdate="20191011T065525Z">
        <seg>当从对象流中读取的控制信息与内部一致性检查相冲突时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when serialization or deserialization is not active.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065516Z" creationid="pingfangx" creationdate="20191011T065516Z">
        <seg>当序列化和反序列化不活动时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when the "verifier" detects that a class file, though well formed, contains some sort of internal inconsistency or security problem.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073449Z" creationid="pingfangx" creationdate="20191012T073449Z">
        <seg>当“校验器”检测到一个类文件虽然格式正确，但包含着一些内部不一致性或安全性问题时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when the Java Virtual Machine attempts to read a class file and determines that the file is malformed or otherwise cannot be interpreted as a class file.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073210Z" creationid="pingfangx" creationdate="20191012T073210Z">
        <seg>当 Java 虚拟机试图读取类文件并确定该文件存在格式错误或无法解释为类文件时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when the Java Virtual Machine attempts to read a class file and determines that the major and minor version numbers in the file are not supported.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073438Z" creationid="pingfangx" creationdate="20191012T073438Z">
        <seg>当 Java 虚拟机试图读取一个类文件，并确定文件的主辅版本号不受支持时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073551Z" creationid="pingfangx" creationdate="20191012T073237Z">
        <seg>因为内存溢出或没有可用的内存提供给垃圾回收器时，Java 虚拟机无法分配一个对象，这时抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when the Java Virtual Machine detects a circularity in the superclass hierarchy of a class being loaded.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T073207Z" creationid="pingfangx" creationdate="20191012T073207Z">
        <seg>当 Java 虚拟机检测类的超类层次的循环加载抛出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when the Serialization runtime detects one of the following problems with a Class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065503Z" creationid="pingfangx" creationdate="20191011T065503Z">
        <seg>当 Serialization 运行时检测到某个类具有以下问题之一时，抛出此异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thrown when the annotation parser attempts to read an annotation from a class file and determines that the annotation is malformed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T082807Z" creationid="pingfangx" creationdate="20191012T082807Z">
        <seg>当注释解析器试图从类文件读取注释并确定注释出现异常时，抛出该错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throws CloneNotSupportedException.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094056Z" creationid="pingfangx" creationdate="20191014T094056Z">
        <seg>抛出 CloneNotSupportedException。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus the length (in &lt;c3&gt;char&lt;/c3&gt;s) of the text range is &lt;c4&gt;endIndex-beginIndex&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040226Z" creationid="pingfangx" creationdate="20191014T040226Z">
        <seg>因此文本范围的长度（&lt;c3&gt;char&lt;/c3&gt; 形式）为 &lt;c4&gt;endIndex-beginIndex&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus the methods are not strictly guaranteed to be non-blocking -- a thread may block transiently before performing the operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T120752Z" creationid="pingfangx" creationdate="20191025T120752Z">
        <seg>因而，该方法不能严格保证不被阻塞 - 执行操作之前可能暂时阻塞线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T134943Z" creationid="pingfangx" creationdate="20191025T134943Z">
        <seg>因此，面对并发的修改，迭代器很快就会完全失败，而不冒在将来不确定的时间发生任意不确定行为的风险。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T131812Z" creationid="pingfangx" creationdate="20191025T131812Z">
        <seg>所以，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, no more than corePoolSize threads will ever be created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125053Z" creationid="pingfangx" creationdate="20191025T125053Z">
        <seg>这样，创建的线程就不会超过 corePoolSize。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, on return from the &lt;c4&gt;wait&lt;/c4&gt; method, the synchronization state of the object and of thread &lt;c5&gt;T&lt;/c5&gt; is exactly as it was when the &lt;c6&gt;wait&lt;/c6&gt; method was invoked.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134624Z" creationid="pingfangx" creationdate="20191014T134624Z">
        <seg>所以，从 &lt;c4&gt;wait&lt;/c4&gt; 方法返回时，该对象和线程 &lt;c5&gt;T&lt;/c5&gt; 的同步状态与调用 &lt;c6&gt;wait&lt;/c6&gt; 方法时的情况完全相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, the order of the high-low surrogates is never reversed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063433Z" creationid="pingfangx" creationdate="20191014T063433Z">
        <seg>因此，高-低代理项的顺序不会反转。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, this method performs a "shallow copy" of this object, not a "deep copy" operation.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135834Z" creationid="pingfangx" creationdate="20191014T135834Z">
        <seg>所以，此方法执行的是该对象的“浅表复制”，而不“深层复制”操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100550Z" creationid="pingfangx" creationdate="20191026T100550Z">
        <seg>相同的 hashCodes 非不可比较的时候，用于排序插入的打断实用方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Timing</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111323Z" creationid="pingfangx" creationdate="20191025T111323Z">
        <seg>计时</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To achieve this independence, it may be necessary to modify one or more fields of the object returned by &lt;c0&gt;super.clone&lt;/c0&gt; before returning it.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135446Z" creationid="pingfangx" creationdate="20191014T135446Z">
        <seg>要获得此独立性，在 &lt;c0&gt;super.clone&lt;/c0&gt; 返回对象之前，有必要对该对象的一个或多个字段进行修改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To ameliorate impact, when keys are &lt;a2&gt;Comparable&lt;/a2&gt;, this class may use comparison order among keys to help break ties.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T051340Z" creationid="pingfangx" creationdate="20191026T051340Z">
        <seg>为了改善影响，当键是 &lt;a2&gt;Comparable&lt;/a2&gt;，这个类可以使用键之间的比较，以帮助打破僵局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid compatibility issues, the names of &lt;c5&gt;Condition&lt;/c5&gt; methods are different from the corresponding &lt;c6&gt;Object&lt;/c6&gt; versions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122848Z" creationid="pingfangx" creationdate="20191025T122848Z">
        <seg>为了避免兼容性问题，&lt;c5&gt;Condition&lt;/c5&gt; 方法的名称与对应的 &lt;c6&gt;Object&lt;/c6&gt; 版本中的不同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be useful across a wide range of contexts, this class provides many adjustable parameters and extensibility hooks.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123332Z" creationid="pingfangx" creationdate="20191025T123332Z">
        <seg>为了便于跨大量上下文使用，此类提供了很多可调整的参数和扩展钩子 (hook)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a proxy for some interface &lt;c0&gt;Foo&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111959Z" creationid="pingfangx" creationdate="20191015T111959Z">
        <seg>创建某一接口 &lt;c0&gt;Foo&lt;/c0&gt; 的代理：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To determine the class(es) referred to, the Java virtual machine invokes the &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;loadClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; method of the class loader that originally created the class.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072301Z" creationid="pingfangx" creationdate="20191014T072301Z">
        <seg>为了确定引用的类，Java 虚拟机将调用最初创建该类的类加载器的 &lt;c0&gt;&lt;a1&gt;&lt;t2&gt;loadClass&lt;/t2&gt;&lt;/a1&gt;&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To help ensure portability of Java programs, the definitions of some of the numeric functions in this package require that they produce the same results as certain published algorithms.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095421Z" creationid="pingfangx" creationdate="20191014T095421Z">
        <seg>为了确保 Java 程序的可移植性，此包中的某些数学函数的定义需要与某些已发布的算法生成相同的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To start a process with an explicit set of environment variables, first call &lt;c0&gt;&lt;a1&gt;Map.clear()&lt;/a1&gt;&lt;/c0&gt; before adding environment variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075902Z" creationid="pingfangx" creationdate="20191014T075902Z">
        <seg>要利用一组明确的环境变量启动进程，在添加环境变量之前，首先调用 &lt;c0&gt;&lt;a1&gt;Map.clear()&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To wait "forever", you can use a value of &lt;c2&gt;Long.MAX_VALUE&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111424Z" creationid="pingfangx" creationdate="20191025T111424Z">
        <seg>要“永远”等待，可以使用 &lt;c2&gt;Long.MAX_VALUE&lt;/c2&gt; 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tree bins (i.e., bins whose elements are all TreeNodes) are ordered primarily by hashCode, but in the case of ties, if two elements are of the same "class C implements Comparable&lt;c0&gt;", type then their compareTo method is used for ordering.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T080413Z" creationid="pingfangx" creationdate="20191026T080413Z">
        <seg>Tree bins （即 TreeNode 的 bin）主要通过 hashCode 排序，但如果两个元素都是相同的 "class C implements Comparable&lt;c0&gt;"，将会使用它们的 compareTo 方法来排序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tree version of putVal.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100747Z" creationid="pingfangx" creationdate="20191026T100747Z">
        <seg>树版本的 putVal。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tries to remove from the work queue all &lt;c0&gt;&lt;a1&gt;Future&lt;/a1&gt;&lt;/c0&gt; tasks that have been cancelled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T130234Z" creationid="pingfangx" creationdate="20191025T130234Z">
        <seg>尝试从工作队列移除所有已取消的 &lt;c0&gt;&lt;a1&gt;Future&lt;/a1&gt;&lt;/c0&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Twice the old capacity, plus &lt;c0&gt;2&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040317Z" creationid="pingfangx" creationdate="20191014T040317Z">
        <seg>旧容量的两倍加 &lt;c0&gt;2&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two &lt;c4&gt;ProcessBuilder&lt;/c4&gt; instances always contain independent process environments, so changes to the returned map will never be reflected in any other &lt;c5&gt;ProcessBuilder&lt;/c5&gt; instance or the values returned by &lt;c6&gt;&lt;a7&gt;System.getenv&lt;/a7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080044Z" creationid="pingfangx" creationdate="20191014T080044Z">
        <seg>两个 &lt;c4&gt;ProcessBuilder&lt;/c4&gt; 实例总是包含独立的进程环境，因此，针对返回的映射的更改从不会在任何其他 &lt;c5&gt;ProcessBuilder&lt;/c5&gt; 实例或由 &lt;c6&gt;&lt;a7&gt;System.getenv&lt;/a7&gt;&lt;/c6&gt; 返回的值中反映出来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two corresponding &lt;t0&gt;String&lt;/t0&gt;, &lt;t1&gt;Class&lt;/t1&gt;, enum, or annotation typed members whose values are &lt;t2&gt;x&lt;/t2&gt; and &lt;t3&gt;y&lt;/t3&gt; are considered equal if &lt;t4&gt;x.equals(y)&lt;/t4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150331Z" creationid="pingfangx" creationdate="20191014T150331Z">
        <seg>如果 &lt;t0&gt;x.equals(y)&lt;/t0&gt; 为真，则认为值分别为 &lt;t1&gt;x&lt;/t1&gt; 和 &lt;t2&gt;y&lt;/t2&gt; 的两个对应的 &lt;t3&gt;String&lt;/t3&gt;、&lt;t4&gt;Class&lt;/t4&gt;、enum 或 annotation 类型的成员相等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two corresponding &lt;t0&gt;double&lt;/t0&gt; members whose values are &lt;t1&gt;x&lt;/t1&gt; and &lt;t2&gt;y&lt;/t2&gt; are considered equal if &lt;t3&gt;Double.valueOf(x).equals(Double.valueOf(y))&lt;/t3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150310Z" creationid="pingfangx" creationdate="20191014T150310Z">
        <seg>如果 &lt;t0&gt;Double.valueOf(x).equals(Double.valueOf(y))&lt;/t0&gt; 为真，则认为值分别为 &lt;t1&gt;x&lt;/t1&gt; 和 &lt;t2&gt;y&lt;/t2&gt; 的两个对应的 &lt;t3&gt;double&lt;/t3&gt; 成员相等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two corresponding &lt;t0&gt;float&lt;/t0&gt; members whose values are &lt;t1&gt;x&lt;/t1&gt; and &lt;t2&gt;y&lt;/t2&gt; are considered equal if &lt;t3&gt;Float.valueOf(x).equals(Float.valueOf(y))&lt;/t3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150252Z" creationid="pingfangx" creationdate="20191014T150252Z">
        <seg>如果 &lt;t0&gt;Float.valueOf(x).equals(Float.valueOf(y))&lt;/t0&gt; 为真，则认为值分别为 &lt;t1&gt;x&lt;/t1&gt; 和 &lt;t2&gt;y&lt;/t2&gt; 的两个对应的 &lt;t3&gt;float&lt;/t3&gt; 成员相等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two corresponding array typed members &lt;t0&gt;x&lt;/t0&gt; and &lt;t1&gt;y&lt;/t1&gt; are considered equal if &lt;t2&gt;Arrays.equals(x, y)&lt;/t2&gt;, for the appropriate overloading of &lt;c3&gt;&lt;a4&gt;equals(boolean[], boolean[])&lt;/a4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T151453Z" creationid="pingfangx" creationdate="20191014T150345Z">
        <seg>对于适当重载的 &lt;c3&gt;&lt;a4&gt;equals(boolean[], boolean[])&lt;/a4&gt;&lt;/c3&gt;，如果 &lt;t2&gt;Arrays.equals(x, y)&lt;/t2&gt; 为真, 则认为两个对应的数组类型的成员 &lt;t0&gt;x&lt;/t0&gt; 和 &lt;t1&gt;y&lt;/t1&gt; 相等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two corresponding primitive typed members whose values are &lt;t0&gt;x&lt;/t0&gt; and &lt;t1&gt;y&lt;/t1&gt; are considered equal if &lt;t2&gt;x == y&lt;/t2&gt;, unless their type is &lt;t3&gt;float&lt;/t3&gt; or &lt;t4&gt;double&lt;/t4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T150238Z" creationid="pingfangx" creationdate="20191014T150238Z">
        <seg>如果 &lt;t2&gt;x == y&lt;/t2&gt;，则认为值分别为 &lt;t0&gt;x&lt;/t0&gt; 和 &lt;t1&gt;y&lt;/t1&gt; 的两个对应的基本类型成员相等，除非它们的类型是 &lt;t3&gt;float&lt;/t3&gt; 或 &lt;t4&gt;double&lt;/t4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two enum constants e1 and e2 are of the same enum type if and only if e1.getDeclaringClass() == e2.getDeclaringClass().</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094205Z" creationid="pingfangx" creationdate="20191014T094205Z">
        <seg>当且仅当 e1.getDeclaringClass() == e2.getDeclaringClass() 时，两个枚举常量 e1 和 e2 的枚举类型才相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two stack trace elements &lt;c1&gt;a&lt;/c1&gt; and &lt;c2&gt;b&lt;/c2&gt; are equal if and only if:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095256Z" creationid="pingfangx" creationdate="20191014T095256Z">
        <seg>当且仅当满足下列条件时，堆栈跟踪元素 &lt;c1&gt;a&lt;/c1&gt; 和 &lt;c2&gt;b&lt;/c2&gt; 相同：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two supplied methods, &lt;c2&gt;&lt;a3&gt;remove(Runnable)&lt;/a3&gt;&lt;/c2&gt; and &lt;c4&gt;&lt;a5&gt;purge()&lt;/a5&gt;&lt;/c4&gt; are available to assist in storage reclamation when large numbers of queued tasks become cancelled.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125758Z" creationid="pingfangx" creationdate="20191025T125758Z">
        <seg>&lt;c2&gt;&lt;a3&gt;remove(Runnable)&lt;/a3&gt;&lt;/c2&gt; 和 &lt;c4&gt;&lt;a5&gt;purge()&lt;/a5&gt;&lt;/c4&gt; 这两种方法可用于在取消大量已排队任务时帮助进行存储回收。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T080424Z" creationid="pingfangx" creationdate="20191013T101057Z">
        <seg>Type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type is the common superinterface for all types in the Java programming language.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091529Z" creationid="pingfangx" creationdate="20191012T091529Z">
        <seg>Type 是 Java 编程语言中所有类型的公共高级接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TypeVariable is the common superinterface for type variables of kinds.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T091534Z" creationid="pingfangx" creationdate="20191012T091534Z">
        <seg>TypeVariable 是各种类型变量的公共高级接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typesafe enumeration for byte orders</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T084052Z" creationid="pingfangx" creationdate="20191011T084052Z">
        <seg>字节顺序的类型安全的枚举</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, an anonymous inner class will be used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T100914Z" creationid="pingfangx" creationdate="20191014T100914Z">
        <seg>通常将使用匿名内部类完成此操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, it is stored in the manifest that is distributed with the classes.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094832Z" creationid="pingfangx" creationdate="20191014T094832Z">
        <seg>通常，此信息存储在与类一起分发的清单中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, these instances are freshly created in the context of the exceptional situation so as to include relevant information (such as stack trace data).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T113220Z" creationid="pingfangx" creationdate="20191013T113220Z">
        <seg>通常，这些实例是在异常情况的上下文中新近创建的，因此包含了相关的信息（比如堆栈跟踪数据）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, this is the point at which the throwable corresponding to the stack trace was created.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095206Z" creationid="pingfangx" creationdate="20191014T095206Z">
        <seg>通常，这是创建对应于堆栈跟踪的 throwable 的点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, this means copying any mutable objects that comprise the internal "deep structure" of the object being cloned and replacing the references to these objects with references to the copies.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135449Z" creationid="pingfangx" creationdate="20191014T135449Z">
        <seg>这通常意味着要复制包含正在被复制对象的内部“深层结构”的所有可变对象，并使用对副本的引用替换对这些对象的引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when a character with an invalid Unicode code point as defined by &lt;c0&gt;&lt;a1&gt;isValidCodePoint(int)&lt;/a1&gt;&lt;/c0&gt; is passed to the &lt;c2&gt;&lt;a3&gt;Formatter&lt;/a3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050503Z" creationid="pingfangx" creationdate="20191012T050503Z">
        <seg>将具有 &lt;c0&gt;&lt;a1&gt;isValidCodePoint(int)&lt;/a1&gt;&lt;/c0&gt; 所定义的无效 Unicode 代码点的字符传递给 &lt;c2&gt;&lt;a3&gt;Formatter&lt;/a3&gt;&lt;/c2&gt; 时，抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when a content-mutation method such as &lt;t0&gt;put&lt;/t0&gt; or &lt;t1&gt;compact&lt;/t1&gt; is invoked upon a read-only buffer.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114407Z" creationid="pingfangx" creationdate="20191011T114407Z">
        <seg>当在只读缓冲区上调用内容可变（content-mutation）的方法（例如 &lt;t0&gt;put&lt;/t0&gt; 或 &lt;t1&gt;compact&lt;/t1&gt; 方法）时，抛出此未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when a conversion and flag are incompatible.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050348Z" creationid="pingfangx" creationdate="20191012T050348Z">
        <seg>转换与标志不兼容时抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when a format string contains an illegal syntax or a format specifier that is incompatible with the given arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050412Z" creationid="pingfangx" creationdate="20191012T050412Z">
        <seg>当格式字符串包含非法语法，或者包含与给定参数不兼容的格式说明符时，将抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when a relative &lt;i0&gt;get&lt;/i0&gt; operation reaches the source buffer's limit.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114355Z" creationid="pingfangx" creationdate="20191011T114355Z">
        <seg>当相关 &lt;i0&gt;get&lt;/i0&gt; 操作达到源缓冲区限制时，抛出此未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when a relative &lt;i0&gt;put&lt;/i0&gt; operation reaches the target buffer's limit.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114354Z" creationid="pingfangx" creationdate="20191011T114354Z">
        <seg>当相关 &lt;i0&gt;put&lt;/i0&gt; 操作达到目标缓冲区限制时，抛出此未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when an attempt is made to reset a buffer when its mark is not defined.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114357Z" creationid="pingfangx" creationdate="20191011T114357Z">
        <seg>当试图重置一个尚未定义其标记的缓冲区时，抛出此未检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when an illegal combination flags is given.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050417Z" creationid="pingfangx" creationdate="20191012T050417Z">
        <seg>当给出非法组合标志时，抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when an unknown conversion is given.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050558Z" creationid="pingfangx" creationdate="20191012T050558Z">
        <seg>给定未知的转换时所抛出的未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when an unknown flag is given.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050559Z" creationid="pingfangx" creationdate="20191012T050559Z">
        <seg>给定未知标志时所抛出的未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when duplicate flags are provided in the format specifier.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050343Z" creationid="pingfangx" creationdate="20191012T050343Z">
        <seg>格式说明符中提供重复标志时抛出的未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when the argument corresponding to the format specifier is of an incompatible type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050408Z" creationid="pingfangx" creationdate="20191012T050408Z">
        <seg>当对应于格式说明符的参数为不兼容的类型时，抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when the format width is a negative value other than &lt;t0&gt;-1&lt;/t0&gt; or is otherwise unsupported.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050425Z" creationid="pingfangx" creationdate="20191012T050425Z">
        <seg>当格式宽度为除 &lt;t0&gt;-1&lt;/t0&gt; 以外的负值或其他不受支持的值时，将抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when the format width is required.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050433Z" creationid="pingfangx" creationdate="20191012T050433Z">
        <seg>请求格式宽度时抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when the formatter has been closed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050350Z" creationid="pingfangx" creationdate="20191012T050350Z">
        <seg>格式器已关闭时抛出的未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when the precision is a negative value other than &lt;t0&gt;-1&lt;/t0&gt;, the conversion does not support a precision, or the value is otherwise unsupported.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050424Z" creationid="pingfangx" creationdate="20191012T050424Z">
        <seg>当精度为除 &lt;t0&gt;-1&lt;/t0&gt; 以外的负值、转换类型不支持某个精度或者值在其他方面不受支持时，将抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unchecked exception thrown when there is a format specifier which does not have a corresponding argument or if an argument index refers to an argument that does not exist.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T050432Z" creationid="pingfangx" creationdate="20191012T050432Z">
        <seg>如果格式说明符没有相应的参数，或者参数索引引用了不存在的参数时，则抛出未经检查的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Undefined bidirectional character type.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143945Z" creationid="pingfangx" creationdate="20191013T143945Z">
        <seg>未定义的双向字符类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless otherwise noted, passing a &lt;c0&gt;null&lt;/c0&gt; argument to a constructor or method in this class will cause a &lt;c1&gt;&lt;a2&gt;NullPointerException&lt;/a2&gt;&lt;/c1&gt; to be thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T081339Z" creationid="pingfangx" creationdate="20191014T081339Z">
        <seg>除非另行说明，否则将 &lt;c0&gt;null&lt;/c0&gt; 参数传递给此类中的构造方法或方法将抛出 &lt;c1&gt;&lt;a2&gt;NullPointerException&lt;/a2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless otherwise noted, passing a &lt;t0&gt;null&lt;/t0&gt; argument to a constructor or method in any class or interface in this package will cause a &lt;c1&gt;&lt;a2&gt;NullPointerException&lt;/a2&gt;&lt;/c1&gt; to be thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T112215Z" creationid="pingfangx" creationdate="20191011T112215Z">
        <seg>除非另有说明，向此包的任何类或接口中的构造方法或方法传递 &lt;t0&gt;null&lt;/t0&gt; 变量，将会抛出 &lt;c1&gt;&lt;a2&gt;NullPointerException&lt;/a2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless otherwise noted, passing a &lt;t0&gt;null&lt;/t0&gt; argument to a constructor or method in this class will cause a &lt;c1&gt;&lt;a2&gt;NullPointerException&lt;/a2&gt;&lt;/c1&gt; to be thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T022009Z" creationid="pingfangx" creationdate="20191014T022009Z">
        <seg>除非另行说明，否则将 &lt;t0&gt;null&lt;/t0&gt; 参数传递给此类中的构造方法或方法将抛出 &lt;c1&gt;&lt;a2&gt;NullPointerException&lt;/a2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a &lt;t0&gt;NullPointerException&lt;/t0&gt; to be thrown.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T085301Z" creationid="pingfangx" creationdate="20191010T085301Z">
        <seg>除非另有说明，否则向此包的任何类或接口中的构造方法或方法传递 null 参数时，都将抛出 &lt;t0&gt;NullPointerException&lt;/t0&gt; 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140644Z" creationid="pingfangx" creationdate="20191025T140644Z">
        <seg>除非实现类另有指定，否则按条目集迭代的顺序执行操作(如果指定了迭代顺序)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless otherwise specified, the behavior with respect to supplementary characters and surrogate &lt;c3&gt;char&lt;/c3&gt; values is as follows:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143722Z" creationid="pingfangx" creationdate="20191013T143722Z">
        <seg>除非另有指定，否则与增补字符和代理项 &lt;c3&gt;char&lt;/c3&gt; 值有关的行为如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike soft and weak references, phantom references are not automatically cleared by the garbage collector as they are enqueued.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154702Z" creationid="pingfangx" creationdate="20191014T154702Z">
        <seg>与软引用和弱引用不同，虚引用在加入队列时并没有通过垃圾回收器自动清除。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike some of the numeric methods of class &lt;c0&gt;StrictMath&lt;/c0&gt;, all implementations of the equivalent functions of class &lt;c1&gt;Math&lt;/c1&gt; are not defined to return the bit-for-bit same results.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T150306Z" creationid="pingfangx" creationdate="20191013T150228Z">
        <seg>与 &lt;c0&gt;StrictMath&lt;/c0&gt; 类的某些数学方法不同，并非 &lt;c1&gt;Math&lt;/c1&gt; 类所有等价函数的实现都定义为返回逐位相同的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike the other methods in this interface, this method ignores inherited annotations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T161211Z" creationid="pingfangx" creationdate="20191014T161211Z">
        <seg>与此接口中的其他方法不同，该方法将忽略继承的注释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unpaired surrogates within the text range given by &lt;c2&gt;index&lt;/c2&gt; and &lt;c3&gt;codePointOffset&lt;/c3&gt; count as one code point each.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041326Z" creationid="pingfangx" creationdate="20191014T041326Z">
        <seg>&lt;c2&gt;index&lt;/c2&gt; 和 &lt;c3&gt;codePointOffset&lt;/c3&gt; 给出的文本范围内的不成对代理项是按一个代码点算作一个项进行计数的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unpaired surrogates within this sequence count as one code point each.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T040235Z" creationid="pingfangx" creationdate="20191014T040235Z">
        <seg>该序列中每个未配对的代理项都被作为一个代码点进行计数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125443Z" creationid="pingfangx" creationdate="20191025T125443Z">
        <seg>使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use of this method for any other purpose is strongly discouraged.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125753Z" creationid="pingfangx" creationdate="20191025T125753Z">
        <seg>强烈反对出于其他任何目的而使用此方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uses the constructor represented by this &lt;c0&gt;Constructor&lt;/c0&gt; object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T104219Z" creationid="pingfangx" creationdate="20191015T104219Z">
        <seg>使用此 &lt;c0&gt;Constructor&lt;/c0&gt; 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a value of &lt;c4&gt;Long.MAX_VALUE&lt;/c4&gt; &lt;c5&gt;&lt;a6&gt;NANOSECONDS&lt;/a6&gt;&lt;/c5&gt; effectively disables idle threads from ever terminating prior to shut down.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124439Z" creationid="pingfangx" creationdate="20191025T124439Z">
        <seg>使用 &lt;c4&gt;Long.MAX_VALUE&lt;/c4&gt;&lt;c5&gt;&lt;a6&gt;NANOSECONDS&lt;/a6&gt;&lt;/c5&gt; 的值在关闭前有效地从以前的终止状态禁用空闲线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Utility class for HTML form decoding.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083410Z" creationid="pingfangx" creationdate="20191011T083410Z">
        <seg>HTML 格式解码的实用工具类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Utility class for HTML form encoding.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083412Z" creationid="pingfangx" creationdate="20191011T083412Z">
        <seg>HTML 格式编码的实用工具类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Utility classes commonly useful in concurrent programming.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T105034Z" creationid="pingfangx" creationdate="20191025T105034Z">
        <seg>在并发编程中很常用的实用工具类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Virtual machine implementations are, however, encouraged to bias against clearing recently-created or recently-used soft references.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T155733Z" creationid="pingfangx" creationdate="20191014T155733Z">
        <seg>然而，虚拟机实现不鼓励清除最近访问或使用过的软引用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Virtually all Java core classes that implement &lt;t0&gt;Comparable&lt;/t0&gt; have natural orderings that are consistent with equals.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T101906Z" creationid="pingfangx" creationdate="20191014T101906Z">
        <seg>实际上，所有实现 &lt;t0&gt;Comparable&lt;/t0&gt; 的 Java 核心类都具有与 equals 一致的自然排序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Waits at most &lt;c0&gt;millis&lt;/c0&gt; milliseconds for this thread to die.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082030Z" creationid="pingfangx" creationdate="20191014T082030Z">
        <seg>等待该线程终止的时间最长为 &lt;c0&gt;millis&lt;/c0&gt; 毫秒。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Waits at most &lt;c0&gt;millis&lt;/c0&gt; milliseconds plus &lt;c1&gt;nanos&lt;/c1&gt; nanoseconds for this thread to die.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082038Z" creationid="pingfangx" creationdate="20191014T082038Z">
        <seg>等待该线程终止的时间最长为 &lt;c0&gt;millis&lt;/c0&gt; 毫秒 + &lt;c1&gt;nanos&lt;/c1&gt; 纳秒。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Waits for this thread to die.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T082026Z" creationid="pingfangx" creationdate="20191014T082026Z">
        <seg>等待该线程终止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wakes up a single thread that is waiting on this object's monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094941Z" creationid="pingfangx" creationdate="20191012T094941Z">
        <seg>唤醒在此对象监视器上等待的单个线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wakes up all threads that are waiting on this object's monitor.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T094943Z" creationid="pingfangx" creationdate="20191012T094943Z">
        <seg>唤醒在此对象监视器上等待的所有线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We don't require a total order, just a consistent insertion rule to maintain equivalence across rebalancings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100602Z" creationid="pingfangx" creationdate="20191026T100602Z">
        <seg>我们不需要全部排序，只需要一个一致的插入规则来维护重新包装之间的等价关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "AN" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143926Z" creationid="pingfangx" creationdate="20191013T143926Z">
        <seg>Unicode 规范中的弱双向字符类型“AN”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "BN" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143927Z" creationid="pingfangx" creationdate="20191013T143927Z">
        <seg>Unicode 规范中的弱双向字符类型“BN”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "CS" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143928Z" creationid="pingfangx" creationdate="20191013T143928Z">
        <seg>Unicode 规范中的弱双向字符类型“CS”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "EN" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143928Z" creationid="pingfangx" creationdate="20191013T143928Z">
        <seg>Unicode 规范中的弱双向字符类型“EN”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "ES" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143929Z" creationid="pingfangx" creationdate="20191013T143929Z">
        <seg>Unicode 规范中的弱双向字符类型“ES”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "ET" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143930Z" creationid="pingfangx" creationdate="20191013T143930Z">
        <seg>Unicode 规范中的弱双向字符类型“ET”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "NSM" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143934Z" creationid="pingfangx" creationdate="20191013T143934Z">
        <seg>Unicode 规范中的弱双向字符类型“NSM”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak bidirectional character type "PDF" in the Unicode specification.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T143936Z" creationid="pingfangx" creationdate="20191013T143936Z">
        <seg>Unicode 规范中的弱双向字符类型“PDF”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090716Z" creationid="pingfangx" creationdate="20191012T090716Z">
        <seg>弱引用对象，它们并不禁止其指示对象变得可终结，并被终结，然后被回收。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak references are most often used to implement canonicalizing mappings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T160114Z" creationid="pingfangx" creationdate="20191014T160114Z">
        <seg>弱引用最常用于实现规范化的映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named &lt;c0&gt;main&lt;/c0&gt; of some designated class).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080930Z" creationid="pingfangx" creationdate="20191014T080930Z">
        <seg>当 Java 虚拟机启动时，通常都会有单个非守护线程（它通常会调用某个指定类的 &lt;c0&gt;main&lt;/c0&gt; 方法）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the &lt;c0&gt;invoke&lt;/c0&gt; method of its invocation handler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T165303Z" creationid="pingfangx" creationdate="20191014T165303Z">
        <seg>对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序的 &lt;c0&gt;invoke&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a new task is submitted in method &lt;c7&gt;&lt;a8&gt;execute(Runnable)&lt;/a8&gt;&lt;/c7&gt;, and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T123940Z" creationid="pingfangx" creationdate="20191025T123940Z">
        <seg>当新任务在方法 &lt;c7&gt;&lt;a8&gt;execute(Runnable)&lt;/a8&gt;&lt;/c7&gt; 中提交时，如果运行的线程少于 corePoolSize，则创建新线程来处理请求，即使其他辅助线程是空闲的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a parameterized type p is created, the generic type declaration that p instantiates is resolved, and all type arguments of p are created recursively.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071630Z" creationid="pingfangx" creationdate="20191015T071630Z">
        <seg>当创建参数化类型 p 时，p 实例化的一般类型声明会被解析，并且按递归方式创建 p 的所有类型参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a thread is about to terminate due to an uncaught exception the Java Virtual Machine will query the thread for its &lt;t0&gt;UncaughtExceptionHandler&lt;/t0&gt; using &lt;c1&gt;&lt;a2&gt;getUncaughtExceptionHandler()&lt;/a2&gt;&lt;/c1&gt; and will invoke the handler's &lt;t3&gt;uncaughtException&lt;/t3&gt; method, passing the thread and the exception as arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T092613Z" creationid="pingfangx" creationdate="20191014T092613Z">
        <seg>当某一线程因未捕获的异常而即将终止时，Java 虚拟机将使用 &lt;c1&gt;&lt;a2&gt;getUncaughtExceptionHandler()&lt;/a2&gt;&lt;/c1&gt; 查询该线程以获得其 &lt;t0&gt;UncaughtExceptionHandler&lt;/t0&gt; 的线程，并调用处理程序的 &lt;t3&gt;uncaughtException&lt;/t3&gt; 方法，将线程和异常作为参数传递。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a thread is terminated, this thread ID may be reused.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T084610Z" creationid="pingfangx" creationdate="20191014T084610Z">
        <seg>线程终止时，该线程 ID 可以被重新使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a thread sees an update to an atomic variable caused by a &lt;c8&gt;weakCompareAndSet&lt;/c8&gt;, it does not necessarily see updates to any &lt;e9&gt;other&lt;/e9&gt; variables that occurred before the &lt;c10&gt;weakCompareAndSet&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122145Z" creationid="pingfangx" creationdate="20191025T122145Z">
        <seg>当一个线程看到对 &lt;c8&gt;weakCompareAndSet&lt;/c8&gt; 导致的原子变量的更新时，它不一定能看到在 &lt;c10&gt;weakCompareAndSet&lt;/c10&gt; 之前发生的对任何&lt;e9&gt;其他&lt;/e9&gt; 变量的更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When allocated, length is always a power of two.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083541Z" creationid="pingfangx" creationdate="20191026T083541Z">
        <seg>在分配时，长度总是 2 的幂。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an object implementing interface &lt;c0&gt;Runnable&lt;/c0&gt; is used to create a thread, starting the thread causes the object's &lt;c1&gt;run&lt;/c1&gt; method to be called in that separately executing thread.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T154755Z" creationid="pingfangx" creationdate="20191013T154755Z">
        <seg>使用实现接口 &lt;c0&gt;Runnable&lt;/c0&gt; 的对象创建一个线程时，启动该线程将导致在独立执行的线程中调用对象的 &lt;c1&gt;run&lt;/c1&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When bin lists are treeified, split, or untreeified, we keep them in the same relative access/traversal order (i.e., field Node.next) to better preserve locality, and to slightly simplify handling of splits and traversals that invoke iterator.remove.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081717Z" creationid="pingfangx" creationdate="20191026T081717Z">
        <seg>当 bin 列表被树化，分裂或者取消树化时，我们使它们保持相同的相对访问/遍历顺序（即，字段 Node.next）以更好地保持局部性，并略微简化调用 iterator.remove 的分割和遍历的处理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When code running in some thread creates a new &lt;c0&gt;Thread&lt;/c0&gt; object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080919Z" creationid="pingfangx" creationdate="20191014T080919Z">
        <seg>当某个线程中运行的代码创建一个新 &lt;c0&gt;Thread&lt;/c0&gt; 对象时，该新线程的初始优先级被设定为创建线程的优先级，并且当且仅当创建线程是守护线程时，新线程才是守护程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When discussing the accuracy of a method as a whole rather than at a specific argument, the number of ulps cited is for the worst-case error at any argument.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T151239Z" creationid="pingfangx" creationdate="20191013T151239Z">
        <seg>当作为一个整体而不是针对具体参数讨论方法的准确性时，引入的 ulp 数用于任何参数最差情况下的误差。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When many threads are expected to access a given collection, a &lt;c10&gt;ConcurrentHashMap&lt;/c10&gt; is normally preferable to a synchronized &lt;c11&gt;HashMap&lt;/c11&gt;, and a &lt;c12&gt;ConcurrentSkipListMap&lt;/c12&gt; is normally preferable to a synchronized &lt;c13&gt;TreeMap&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T111947Z" creationid="pingfangx" creationdate="20191025T111947Z">
        <seg>当期望许多线程访问一个给定 collection 时，&lt;c10&gt;ConcurrentHashMap&lt;/c10&gt; 通常优于同步的 &lt;c11&gt;HashMap&lt;/c11&gt;，&lt;c12&gt;ConcurrentSkipListMap&lt;/c12&gt; 通常优于同步的 &lt;c13&gt;TreeMap&lt;/c13&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When passing information to a Java subprocess, &lt;a0&gt;system properties&lt;/a0&gt; are generally preferred over environment variables.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080102Z" creationid="pingfangx" creationdate="20191014T080102Z">
        <seg>当将信息传递给 Java 子进程时，&lt;a0&gt;系统属性&lt;/a0&gt;通常优先于环境变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When requested to find a class or resource, a &lt;t2&gt;ClassLoader&lt;/t2&gt; instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T072041Z" creationid="pingfangx" creationdate="20191014T072041Z">
        <seg>需要查找类或资源时，&lt;t2&gt;ClassLoader&lt;/t2&gt; 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When such a &lt;i0&gt;duplicate method&lt;/i0&gt; is invoked on a proxy instance, the &lt;c1&gt;Method&lt;/c1&gt; object passed to the invocation handler will not necessarily be the one whose declaring class is assignable from the reference type of the interface that the proxy's method was invoked through.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113030Z" creationid="pingfangx" creationdate="20191015T113030Z">
        <seg>在代理实例上调用&lt;i0&gt;重复方法&lt;/i0&gt; 时，传递到调用处理程序的 &lt;c1&gt;Method&lt;/c1&gt; 对象没有必要成为其声明类可以从接口（通过该接口调用代理方法）的引用类型指派的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is &lt;i5&gt;rehashed&lt;/i5&gt; (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T132426Z" creationid="pingfangx" creationdate="20191025T132426Z">
        <seg>当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 &lt;i5&gt;rehash&lt;/i5&gt; 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the weak references to a weakly-reachable object are cleared, the object becomes eligible for finalization.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090659Z" creationid="pingfangx" creationdate="20191012T090659Z">
        <seg>当清除对某一弱可到达对象的弱引用时，便可以终止此对象了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When two or more interfaces of a proxy class contain a method with the same name and parameter signature, the order of the proxy class's interfaces becomes significant.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113018Z" creationid="pingfangx" creationdate="20191015T113018Z">
        <seg>当代理类的两个或多个接口包含一个具有相同名称和参数签名的方法时，代理类的接口顺序变得非常重要。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using comparators on insertion, to keep a total ordering (or as close as is required here) across rebalancings, we compare classes and identityHashCodes as tie-breakers.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081750Z" creationid="pingfangx" creationdate="20191026T081750Z">
        <seg>为了在整个重定位过程中保持总体排序（或尽可能接近此处所需），我们比较类和 identityHashCodes 用作联合破坏。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When we say that a class's natural ordering is &lt;i5&gt;consistent with equals&lt;/i5&gt;, we mean that the quotient for the natural ordering is the equivalence relation defined by the class's &lt;c6&gt;&lt;a7&gt;equals(Object)&lt;/a7&gt;&lt;/c6&gt; method:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T102006Z" creationid="pingfangx" creationdate="20191014T102006Z">
        <seg>当说到类的自然排序&lt;i5&gt;与 equals 一致&lt;/i5&gt; 时，是指自然排序的商是由类的 &lt;c6&gt;&lt;a7&gt;equals(Object)&lt;/a7&gt;&lt;/c6&gt; 方法定义的等价关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever a process builder is created, the environment is initialized to a copy of the current process environment (see &lt;c0&gt;&lt;a1&gt;getenv()&lt;/a1&gt;&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080039Z" creationid="pingfangx" creationdate="20191014T080039Z">
        <seg>无论进程生成器何时创建，都需要将环境初始化为一份当前进程环境的副本（请参阅 &lt;c0&gt;&lt;a1&gt;getenv()&lt;/a1&gt;&lt;/c0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence) this class synchronizes only on the string buffer performing the operation, not on the source.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063931Z" creationid="pingfangx" creationdate="20191014T063931Z">
        <seg>当发生与源序列有关的操作（如源序列中的追加或插入操作）时，该类只在执行此操作的字符串缓冲区上而不是在源上实现同步。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever it is invoked on the same object more than once during an execution of a Java application, the &lt;c0&gt;hashCode&lt;/c0&gt; method must consistently return the same integer, provided no information used in &lt;c1&gt;equals&lt;/c1&gt; comparisons on the object is modified.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T131838Z" creationid="pingfangx" creationdate="20191014T131838Z">
        <seg>在 Java 应用程序执行期间，在对同一对象多次调用 &lt;c0&gt;hashCode&lt;/c0&gt; 方法时，必须一致地返回相同的整数，前提是将对象进行 &lt;c1&gt;equals&lt;/c1&gt; 比较时所用的信息没有被修改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where &lt;c1&gt;fdlibm&lt;/c1&gt; provides more than one definition for a function (such as &lt;c2&gt;acos&lt;/c2&gt;), use the "IEEE 754 core function" version (residing in a file whose name begins with the letter &lt;c3&gt;e&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095450Z" creationid="pingfangx" creationdate="20191014T095450Z">
        <seg>其中 &lt;c1&gt;fdlibm&lt;/c1&gt; 使用“IEEE 754 核心函数”版本（位于名字以字母 &lt;c2&gt;e&lt;/c2&gt; 开头的文件中）为一个函数提供了多个定义（如 &lt;c3&gt;acos&lt;/c3&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where possible, it is recommended that this class be used in preference to &lt;c2&gt;StringBuffer&lt;/c2&gt; as it will be faster under most implementations.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T030332Z" creationid="pingfangx" creationdate="20191014T030332Z">
        <seg>如果可能，建议优先采用该类，因为在大多数实现中，它比 &lt;c2&gt;StringBuffer&lt;/c2&gt; 要快。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T080149Z" creationid="pingfangx" creationdate="20191014T080149Z">
        <seg>哪些命令有效取决于系统，但是该命令至少必须有一个非 null 字符串的非空列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Which string lists represent a valid operating system command is system-dependent.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075748Z" creationid="pingfangx" creationdate="20191014T075748Z">
        <seg>在此，表示有效的操作系统命令的字符串列表是依赖于系统的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While it is typically the case that:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135321Z" creationid="pingfangx" creationdate="20191014T135321Z">
        <seg>一般情况下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While methods like &lt;c0&gt;&lt;a1&gt;getByName(String)&lt;/a1&gt;&lt;/c0&gt; are guaranteed not to return an Inet6Address when looking up host names, it is possible, by passing literals, to create such an object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T080452Z" creationid="pingfangx" creationdate="20191011T080452Z">
        <seg>虽然可以保证在查找主机名时 &lt;c0&gt;&lt;a1&gt;getByName(String)&lt;/a1&gt;&lt;/c0&gt; 之类的方法不返回 Inet6Address，但仍然可能通过传递字面值来创建此类对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While some programs will choose to dedicate a thread to removing reference objects from one or more queues and processing them, this is by no means necessary.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T090243Z" creationid="pingfangx" creationdate="20191012T090243Z">
        <seg>虽然某些程序会选择专门使用一个线程从一个或多个队列中移除引用对象并处理它们，但这是绝对没有必要的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While this style of queuing can be useful in smoothing out transient bursts of requests, it admits the possibility of unbounded work queue growth when commands continue to arrive on average faster than they can be processed.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T125417Z" creationid="pingfangx" creationdate="20191025T125417Z">
        <seg>这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While this will rarely occur in practice, applications must guard against it by testing for the condition that should have caused the thread to be awakened, and continuing to wait if the condition is not satisfied.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T134639Z" creationid="pingfangx" creationdate="20191014T134639Z">
        <seg>虽然这种情况在实践中很少发生，但是应用程序必须通过以下方式防止其发生，即对应该导致该线程被提醒的条件进行测试，如果不满足该条件，则继续等待。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>WildcardType represents a wildcard type expression, such as &lt;c0&gt;?&lt;/c0&gt;, &lt;c1&gt;? extends Number&lt;/c1&gt;, or &lt;c2&gt;? super Integer&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191012T092047Z" creationid="pingfangx" creationdate="20191012T092047Z">
        <seg>WildcardType 表示一个通配符类型表达式，如 &lt;c0&gt;?&lt;/c0&gt; 、 &lt;c1&gt;? extends Number&lt;/c1&gt; 或 &lt;c2&gt;? super Integer&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within each &lt;c0&gt;ClassLoader&lt;/c0&gt; instance all classes from the same java package have the same Package object.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095031Z" creationid="pingfangx" creationdate="20191014T095031Z">
        <seg>在每一个 &lt;c0&gt;ClassLoader&lt;/c0&gt; 实例中，相同 java 包中的所有类都有相同的 Package 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wraps an &lt;c0&gt;&lt;a1&gt;IOException&lt;/a1&gt;&lt;/c0&gt; with an unchecked exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T065554Z" creationid="pingfangx" creationdate="20191011T065554Z">
        <seg>用非检查型异常包装 &lt;c0&gt;&lt;a1&gt;IOException&lt;/a1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write out the threshold, loadfactor, and any hidden stuff</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095444Z" creationid="pingfangx" creationdate="20191026T095444Z">
        <seg>写出阈值、负载因子和任何隐藏的东西</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes and reads of &lt;c2&gt;volatile&lt;/c2&gt; fields have similar memory consistency effects as entering and exiting monitors, but do &lt;e3&gt;not&lt;/e3&gt; entail mutual exclusion locking.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T113313Z" creationid="pingfangx" creationdate="20191025T113313Z">
        <seg>&lt;c2&gt;volatile&lt;/c2&gt; 字段的读取和写入与进入和退出监视器具有相似的内存一致性效果，但&lt;e3&gt;不&lt;/e3&gt; 需要互斥锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191010T094635Z" creationid="pingfangx" creationdate="20191010T094635Z">
        <seg>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also hold floats using &lt;c8&gt;&lt;a9&gt;floatToRawIntBits(float)&lt;/a9&gt;&lt;/c8&gt; and &lt;c10&gt;&lt;a11&gt;intBitsToFloat(int)&lt;/a11&gt;&lt;/c10&gt; conversions, and doubles using &lt;c12&gt;&lt;a13&gt;doubleToRawLongBits(double)&lt;/a13&gt;&lt;/c12&gt; and &lt;c14&gt;&lt;a15&gt;longBitsToDouble(long)&lt;/a15&gt;&lt;/c14&gt; conversions.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T122441Z" creationid="pingfangx" creationdate="20191025T122441Z">
        <seg>也可以使用 &lt;c8&gt;&lt;a9&gt;floatToRawIntBits(float)&lt;/a9&gt;&lt;/c8&gt; 和 &lt;c10&gt;&lt;a11&gt;intBitsToFloat(int)&lt;/a11&gt;&lt;/c10&gt; 转换来保持 float 值，使用 &lt;c12&gt;&lt;a13&gt;doubleToRawLongBits(double)&lt;/a13&gt;&lt;/c12&gt; 和 &lt;c14&gt;&lt;a15&gt;longBitsToDouble(long)&lt;/a15&gt;&lt;/c14&gt; 转换来保持 double 值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You probably want to prestart threads if you construct the pool with a non-empty queue.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T124113Z" creationid="pingfangx" creationdate="20191025T124113Z">
        <seg>如果构造带有非空队列的池，则可能希望预先启动线程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;c0&gt;Type&lt;/c0&gt; object representing the type that this type is a member of.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071748Z" creationid="pingfangx" creationdate="20191015T071748Z">
        <seg>&lt;c0&gt;Type&lt;/c0&gt; 对象，表示此类型是其成员之一的类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;i0&gt;command&lt;/i0&gt;, a list of strings which signifies the external program file to be invoked and its arguments, if any.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075741Z" creationid="pingfangx" creationdate="20191014T075741Z">
        <seg>&lt;i0&gt;命令&lt;/i0&gt; 是一个字符串列表，它表示要调用的外部程序文件及其参数（如果有）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt;i0&gt;working directory&lt;/i0&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075811Z" creationid="pingfangx" creationdate="20191014T075811Z">
        <seg>&lt;i0&gt;工作目录&lt;/i0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a collection view of the values contained in this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141349Z" creationid="pingfangx" creationdate="20191025T141349Z">
        <seg>此映射中包含的值的 collection 视图</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a proxy class that is defined in the specified class loader and that implements the specified interfaces</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T115130Z" creationid="pingfangx" creationdate="20191015T115130Z">
        <seg>用指定的类加载器定义的代理类，它可以实现指定的接口</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a proxy instance with the specified invocation handler of a proxy class that is defined by the specified class loader and that implements the specified interfaces</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120919Z" creationid="pingfangx" creationdate="20191015T120919Z">
        <seg>一个带有代理类的指定调用处理程序的代理实例，它由指定的类加载器定义，并实现指定的接口</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a set view of the keys contained in this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141119Z" creationid="pingfangx" creationdate="20191025T141119Z">
        <seg>此映射中包含的键的 set 视图</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a set view of the mappings contained in this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140635Z" creationid="pingfangx" creationdate="20191025T140635Z">
        <seg>此映射所包含的映射关系的 set 视图。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a shallow copy of this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140546Z" creationid="pingfangx" creationdate="20191025T140546Z">
        <seg>此映射的浅表副本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>advance to first entry</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095741Z" creationid="pingfangx" creationdate="20191026T095741Z">
        <seg>前进到第一个条目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>aka 16</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T082153Z" creationid="pingfangx" creationdate="20191026T082153Z">
        <seg>即 16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>all annotations present on this element</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090638Z" creationid="pingfangx" creationdate="20191015T090638Z">
        <seg>此元素上存在的所有注释</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>all other fields defaulted</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090316Z" creationid="pingfangx" creationdate="20191026T090316Z">
        <seg>其他所有字段默认</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>always check first node</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090830Z" creationid="pingfangx" creationdate="20191026T090830Z">
        <seg>总是检查第一个节点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an &lt;i0&gt;environment&lt;/i0&gt;, which is a system-dependent mapping from &lt;i1&gt;variables&lt;/i1&gt; to &lt;i2&gt;values&lt;/i2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T075803Z" creationid="pingfangx" creationdate="20191014T075803Z">
        <seg>&lt;i0&gt;环境&lt;/i0&gt; 是从&lt;i1&gt;变量&lt;/i1&gt; 到&lt;i2&gt;值&lt;/i2&gt; 的依赖于系统的映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array of &lt;c0&gt;Type&lt;/c0&gt; objects representing the actual type arguments to this type</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071708Z" creationid="pingfangx" creationdate="20191015T071708Z">
        <seg>表示此类型的实际类型参数的 &lt;c0&gt;Type&lt;/c0&gt; 对象的数组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array of &lt;c0&gt;Type&lt;/c0&gt;s representing the upper bound(s) of this type variable</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082230Z" creationid="pingfangx" creationdate="20191015T082230Z">
        <seg>表示此类型变量的上边界的 &lt;c0&gt;Type&lt;/c0&gt; 的数组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array of &lt;c0&gt;TypeVariable&lt;/c0&gt; objects that represent the type variables declared by this generic declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T165024Z" creationid="pingfangx" creationdate="20191014T165024Z">
        <seg>表示由此一般声明声明的类型变量的 &lt;c0&gt;TypeVariable&lt;/c0&gt; 对象的数组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array of Types representing the lower bound(s) of this type variable</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T085943Z" creationid="pingfangx" creationdate="20191015T085943Z">
        <seg>表示此类型变量下边界的类型的数组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array of Types representing the upper bound(s) of this type variable</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T085945Z" creationid="pingfangx" creationdate="20191015T085945Z">
        <seg>表示此类型变量上边界的类型的数组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an array of objects containing the values of the arguments passed in the method invocation on the proxy instance, or &lt;c1&gt;null&lt;/c1&gt; if interface method takes no arguments.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121148Z" creationid="pingfangx" creationdate="20191015T121148Z">
        <seg>包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 &lt;c1&gt;null&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an object representing the declaring class of the underlying member</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T062727Z" creationid="pingfangx" creationdate="20191015T062727Z">
        <seg>表示声明底层成员的类的对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and the following cast operation will succeed (rather than throwing a &lt;c0&gt;ClassCastException&lt;/c0&gt;):</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112707Z" creationid="pingfangx" creationdate="20191015T112707Z">
        <seg>并且以下的强制转换操作将会成功（而不抛出 &lt;c0&gt;ClassCastException&lt;/c0&gt;）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>any character for which &lt;c0&gt;&lt;a1&gt;isDigit(char)&lt;/a1&gt;&lt;/c0&gt; returns &lt;c2&gt;true&lt;/c2&gt;, e.g. 0, 1, 2, ...</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095024Z" creationid="pingfangx" creationdate="20191014T095014Z">
        <seg>&lt;c0&gt;&lt;a1&gt;isDigit(char)&lt;/a1&gt;&lt;/c0&gt; 会对其返回 &lt;c2&gt;true&lt;/c2&gt; 的任何字符，如 0、1、2 等等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>behaves in exactly the same way as the invocation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T041658Z" creationid="pingfangx" creationdate="20191014T041658Z">
        <seg>与下列方法调用完全相同：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bypass checks</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083242Z" creationid="pingfangx" creationdate="20191026T083242Z">
        <seg>绕过检查</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>clear, flip, rewind, and mark/reset</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T102729Z" creationid="pingfangx" creationdate="20191011T102729Z">
        <seg>清除，反转，重绕和标记/重置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>current entry</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095722Z" creationid="pingfangx" creationdate="20191026T095722Z">
        <seg>当前条目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>current index, modified on advance/split</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095821Z" creationid="pingfangx" creationdate="20191026T095821Z">
        <seg>当前索引，在前进/拆分时修改</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>current node</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095804Z" creationid="pingfangx" creationdate="20191026T095804Z">
        <seg>当前节点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>current slot</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095734Z" creationid="pingfangx" creationdate="20191026T095734Z">
        <seg>当前插槽</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>detach</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100923Z" creationid="pingfangx" creationdate="20191026T100923Z">
        <seg>分离</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>double threshold</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094645Z" creationid="pingfangx" creationdate="20191026T094645Z">
        <seg>阈值加倍</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum classes cannot have finalize methods.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T094058Z" creationid="pingfangx" creationdate="20191014T094058Z">
        <seg>枚举类不能有 finalize 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>existing mapping for key</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094407Z" creationid="pingfangx" creationdate="20191026T094407Z">
        <seg>已存在键的映射</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>false when initially constructing this map, else true (relayed to method afterNodeInsertion).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090618Z" creationid="pingfangx" creationdate="20191026T090618Z">
        <seg>在初始化构造 map 时为 false,否则为 true (传到方法 afterNodeInsertio)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>field holds the initial array capacity, or zero signifying</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T084332Z" creationid="pingfangx" creationdate="20191026T084332Z">
        <seg>则此字段保存初始数组容量，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>find successor</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100858Z" creationid="pingfangx" creationdate="20191026T100858Z">
        <seg>寻找继任者</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for cast to Comparable</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083449Z" creationid="pingfangx" creationdate="20191026T083449Z">
        <seg>用于转为 Comparable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for comodification checks</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095855Z" creationid="pingfangx" creationdate="20191026T095855Z">
        <seg>用于共同修改检查</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for fast-fail</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095727Z" creationid="pingfangx" creationdate="20191026T095727Z">
        <seg>用于快速失败</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>force init</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095911Z" creationid="pingfangx" creationdate="20191026T095911Z">
        <seg>强制初始化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getAnnotation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>getAnnotation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getAnnotations</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>getAnnotations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getDeclaredAnnotations</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>getDeclaredAnnotations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hash for key</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090815Z" creationid="pingfangx" creationdate="20191026T090815Z">
        <seg>键的哈希</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if B is a parameterized type or a type variable, it is created, (see &lt;c0&gt;&lt;a1&gt;ParameterizedType&lt;/a1&gt;&lt;/c0&gt; for the details of the creation process for parameterized types).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082216Z" creationid="pingfangx" creationdate="20191015T082209Z">
        <seg>如果 B 是一个参数化类型或一个类型变量，则会创建它（请参见 &lt;c0&gt;&lt;a1&gt;ParameterizedType&lt;/a1&gt;&lt;/c0&gt;，了解创建参数化类型过程的详细信息）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if any of the actual type arguments refers to a non-existent type declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071728Z" creationid="pingfangx" creationdate="20191015T071728Z">
        <seg>如果任何实际类型参数引用不存在的类型声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if any of the actual type parameters refer to a parameterized type that cannot be instantiated for any reason</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071741Z" creationid="pingfangx" creationdate="20191015T071741Z">
        <seg>如果任何实际类型参数引用参数化类型，该类型出于某种原因无法被实例化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if any of the bounds refer to a parameterized type that cannot be instantiated for any reason</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082237Z" creationid="pingfangx" creationdate="20191015T082237Z">
        <seg>如果任一边界引用出于某种原因不能被实例化的参数化类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if any of the bounds refers to a non-existent type declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082233Z" creationid="pingfangx" creationdate="20191015T082233Z">
        <seg>如果任一边界引用不存在的类型声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if any of the restrictions on the parameters that may be passed to &lt;c0&gt;getProxyClass&lt;/c0&gt; are violated</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T115615Z" creationid="pingfangx" creationdate="20191015T115615Z">
        <seg>如果违反传递到 &lt;c0&gt;getProxyClass&lt;/c0&gt; 的参数上的任何限制</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if false do not move other nodes while removing</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095000Z" creationid="pingfangx" creationdate="20191026T095000Z">
        <seg>如果为 false，则在移除时不要移动其他节点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if false, the table is in creation mode.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T093038Z" creationid="pingfangx" creationdate="20191026T093038Z">
        <seg>如果为 false，该表是在创建模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the &lt;c0&gt;interfaces&lt;/c0&gt; array argument or any of its elements are &lt;c1&gt;null&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120409Z" creationid="pingfangx" creationdate="20191015T120409Z">
        <seg>如果 &lt;c0&gt;interfaces&lt;/c0&gt; 数组参数或其任何元素为 &lt;c1&gt;null&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the &lt;c0&gt;interfaces&lt;/c0&gt; array argument or any of its elements are &lt;c1&gt;null&lt;/c1&gt;, or if the invocation handler, &lt;c2&gt;h&lt;/c2&gt;, is &lt;c3&gt;null&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120922Z" creationid="pingfangx" creationdate="20191015T120922Z">
        <seg>如果 &lt;c0&gt;interfaces&lt;/c0&gt; 数组参数或其任何元素为 &lt;c1&gt;null&lt;/c1&gt;，或如果调用处理程序 &lt;c2&gt;h&lt;/c2&gt; 为 &lt;c3&gt;null&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the argument is not a proxy instance</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113512Z" creationid="pingfangx" creationdate="20191015T113512Z">
        <seg>如果参数不是一个代理实例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the generic signature of this generic declaration does not conform to the format specified in &lt;c0&gt;The Java™ Virtual Machine Specification&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T165049Z" creationid="pingfangx" creationdate="20191014T165049Z">
        <seg>如果此一般声明的一般签名不符合 &lt;c0&gt;The Java™ Virtual Machine Specification&lt;/c0&gt; 指定的格式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the given annotation class is null</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>如果给定的注释类为 null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the initial capacity is negative         or the load factor is nonpositive</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090254Z" creationid="pingfangx" creationdate="20191026T090254Z">
        <seg>如果初始容量为负或者加载因子为非正</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the initial capacity is negative or the load factor is nonpositive</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140502Z" creationid="pingfangx" creationdate="20191025T140502Z">
        <seg>如果初始容量为负或者加载因子为非正</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the initial capacity is negative.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140508Z" creationid="pingfangx" creationdate="20191025T140508Z">
        <seg>如果初始容量为负。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the owner type refers to a non-existent type declaration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071754Z" creationid="pingfangx" creationdate="20191015T071754Z">
        <seg>如果所有者类型引用了一个不存在的类型声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the owner type refers to a parameterized type that cannot be instantiated for any reason</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T071813Z" creationid="pingfangx" creationdate="20191015T071813Z">
        <seg>如果所有者类型引用了出于某些原因无法实例化的参数化类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if the specified map is null</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140523Z" creationid="pingfangx" creationdate="20191025T140523Z">
        <seg>如果指定的映射为 null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if true only remove if value is equal</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094916Z" creationid="pingfangx" creationdate="20191026T094916Z">
        <seg>如果为 true，则仅当值相等时移除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if true, don't change existing value</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T093047Z" creationid="pingfangx" creationdate="20191026T093006Z">
        <seg>如果为 true，则不改变现有的值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>initial capacity was placed in threshold</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094701Z" creationid="pingfangx" creationdate="20191026T094701Z">
        <seg>初始容量被放置在阈值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>initialize fence and size on first use</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095901Z" creationid="pingfangx" creationdate="20191026T095901Z">
        <seg>首次使用时初始化围栏和大小</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is equivalent to:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T020941Z" creationid="pingfangx" creationdate="20191014T020941Z">
        <seg>等效于：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>isAccessible</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>isAccessible</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>isAnnotationPresent</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>isAnnotationPresent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iterators</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095715Z" creationid="pingfangx" creationdate="20191026T095715Z">
        <seg>迭代器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>k==null : key.equals(k))&lt;/c2&gt;, then this method returns &lt;c3&gt;v&lt;/c3&gt;; otherwise it returns &lt;c4&gt;null&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140913Z" creationid="pingfangx" creationdate="20191025T140744Z">
        <seg>k==null : key.equals(k))&lt;/c2&gt; 的，则此方法返回 &lt;c3&gt;v&lt;/c3&gt;；否则返回 &lt;c4&gt;null&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>key whose mapping is to be removed from the map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141222Z" creationid="pingfangx" creationdate="20191025T141222Z">
        <seg>其映射关系要从映射中移除的键</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>key with which the specified value is associated</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141241Z" creationid="pingfangx" creationdate="20191025T141241Z">
        <seg>与指定值相关联的键</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>key with which the specified value is to be associated</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141139Z" creationid="pingfangx" creationdate="20191025T141139Z">
        <seg>指定值将要关联的键</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mappings to be stored in this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141217Z" creationid="pingfangx" creationdate="20191025T141217Z">
        <seg>要在此映射中存储的映射关系</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>more: less than 1 in ten million</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T081147Z" creationid="pingfangx" creationdate="20191026T081147Z">
        <seg>更多：小于千万分之一。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>needed to unlink next upon deletion</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100427Z" creationid="pingfangx" creationdate="20191026T100427Z">
        <seg>删除后需要取消链接</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next entry to return</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095720Z" creationid="pingfangx" creationdate="20191026T095720Z">
        <seg>下一个要返回的条目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>null : cause.toString())&lt;/c0&gt; (which typically contains the class and detail message of &lt;c1&gt;cause&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T115916Z" creationid="pingfangx" creationdate="20191013T114813Z">
        <seg>null :cause.toString())&lt;/c0&gt; 的详细消息来构造新的错误（通常包含 &lt;c1&gt;cause&lt;/c1&gt; 的类和详细消息）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>null : cause.toString())&lt;/t0&gt; (which typically contains the class and detail message of &lt;t1&gt;cause&lt;/t1&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191013T120534Z" creationid="pingfangx" creationdate="20191013T120534Z">
        <seg>null :cause.toString())&lt;/t0&gt;（它通常包含了 &lt;t1&gt;cause&lt;/t1&gt; 的类和详细消息）的详细消息，构造一个新异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>null : cause.toString())&lt;/t1&gt; (which typically contains the class and detail message of &lt;t2&gt;cause&lt;/t2&gt;).</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T154124Z" creationid="pingfangx" creationdate="20191014T153949Z">
        <seg>null :cause.toString())&lt;/t1&gt; 的详细消息来构造新的错误（通常包含 &lt;t2&gt;cause&lt;/t2&gt; 的类和详细消息）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>one past last index</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095835Z" creationid="pingfangx" creationdate="20191026T095835Z">
        <seg>上一个索引</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>or more simply:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T112131Z" creationid="pingfangx" creationdate="20191015T112131Z">
        <seg>或使用以下更简单的方法：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p was s's direct parent</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100919Z" creationid="pingfangx" creationdate="20191026T100919Z">
        <seg>p 是 s 的直接父</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>preserve order</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094739Z" creationid="pingfangx" creationdate="20191026T094739Z">
        <seg>维持顺序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>previous value, or null if none</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T093103Z" creationid="pingfangx" creationdate="20191026T093103Z">
        <seg>以前的值，如果没有则为 null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range of 0.25...4.0</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095647Z" creationid="pingfangx" creationdate="20191026T095647Z">
        <seg>范围 0.25...4.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>red-black tree links</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100319Z" creationid="pingfangx" creationdate="20191026T100319Z">
        <seg>红黑树链接</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>root of tree</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100725Z" creationid="pingfangx" creationdate="20191026T100725Z">
        <seg>树的根</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>setAccessible</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>setAccessible</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>size estimate</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095838Z" creationid="pingfangx" creationdate="20191026T095838Z">
        <seg>规模估算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>spliterators</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095801Z" creationid="pingfangx" creationdate="20191026T095801Z">
        <seg>分割器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>swap colors</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100901Z" creationid="pingfangx" creationdate="20191026T100901Z">
        <seg>交换颜色</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>symmetric</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101102Z" creationid="pingfangx" creationdate="20191026T101102Z">
        <seg>对称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the (possibly wrapped) value of the indexed component in the specified array</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103530Z" creationid="pingfangx" creationdate="20191015T103530Z">
        <seg>指定数组中索引组件的（可能已封装的）值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the &lt;c1&gt;Method&lt;/c1&gt; instance corresponding to the interface method invoked on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121245Z" creationid="pingfangx" creationdate="20191015T121112Z">
        <seg>对应于在代理实例上调用的接口方法的 &lt;c1&gt;Method&lt;/c1&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the Class object corresponding to the annotation type</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>对应于注释类型的 Class 对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the bit of hash to split on</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101032Z" creationid="pingfangx" creationdate="20191026T101032Z">
        <seg>要拆分的哈希位</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the cause of this exception.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111154Z" creationid="pingfangx" creationdate="20191015T111154Z">
        <seg>此异常的原因。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the character at index &lt;i0&gt;k&lt;/i0&gt; in the old character sequence, if &lt;i1&gt;k&lt;/i1&gt; is less than &lt;c2&gt;offset&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T062312Z" creationid="pingfangx" creationdate="20191014T062312Z">
        <seg>如果 &lt;i1&gt;k&lt;/i1&gt; 小于 &lt;c2&gt;offset&lt;/c2&gt;，则等于原字符序列中索引 &lt;i0&gt;k&lt;/i0&gt; 处的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the character at index &lt;i0&gt;k&lt;/i0&gt; in this sequence, if &lt;i1&gt;k&lt;/i1&gt; is less than &lt;c2&gt;dstOffset&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063020Z" creationid="pingfangx" creationdate="20191014T063020Z">
        <seg>如果 &lt;i1&gt;k&lt;/i1&gt; 小于 &lt;c2&gt;dstOffset&lt;/c2&gt;，则等于原序列中索引 &lt;i0&gt;k&lt;/i0&gt; 处的字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the character at index &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;+start-dstOffset&lt;/c1&gt; in the argument &lt;c2&gt;s&lt;/c2&gt;, if &lt;i3&gt;k&lt;/i3&gt; is greater than or equal to &lt;c4&gt;dstOffset&lt;/c4&gt; but is less than &lt;c5&gt;dstOffset+end-start&lt;/c5&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063228Z" creationid="pingfangx" creationdate="20191014T063228Z">
        <seg>如果 &lt;i3&gt;k&lt;/i3&gt; 大不等于 &lt;c4&gt;dstOffset&lt;/c4&gt; 但小于 &lt;c5&gt;dstOffset+end-start&lt;/c5&gt;，则等于 &lt;c2&gt;s&lt;/c2&gt; 参数中索引 &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;+start-dstOffset&lt;/c1&gt; 中的字符。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the character at index &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;-(end-start)&lt;/c1&gt; in this sequence, if &lt;i2&gt;k&lt;/i2&gt; is greater than or equal to &lt;c3&gt;dstOffset+end-start&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T063141Z" creationid="pingfangx" creationdate="20191014T063141Z">
        <seg>如果 &lt;i2&gt;k&lt;/i2&gt; 大于等于 &lt;c3&gt;dstOffset+end-start&lt;/c3&gt;，则等于原序列中索引 &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;-(end-start)&lt;/c1&gt; 处的字符</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the character at index &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;-offset&lt;/c1&gt; in the argument &lt;c2&gt;str&lt;/c2&gt;, if &lt;i3&gt;k&lt;/i3&gt; is not less than &lt;c4&gt;offset&lt;/c4&gt; but is less than &lt;c5&gt;offset+str.length()&lt;/c5&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T062605Z" creationid="pingfangx" creationdate="20191014T062605Z">
        <seg>如果 &lt;i3&gt;k&lt;/i3&gt; 不小于 &lt;c4&gt;offset&lt;/c4&gt; 但小于 &lt;c5&gt;offset+str.length()&lt;/c5&gt;，则等于 &lt;c2&gt;str&lt;/c2&gt; 参数中索引 &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;-offset&lt;/c1&gt; 中的字符。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the character at index &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;-str.length()&lt;/c1&gt; in the old character sequence, if &lt;i2&gt;k&lt;/i2&gt; is not less than &lt;c3&gt;offset+str.length()&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T062645Z" creationid="pingfangx" creationdate="20191014T062645Z">
        <seg>如果 &lt;i2&gt;k&lt;/i2&gt; 不小于 &lt;c3&gt;offset+str.length()&lt;/c3&gt;，则等于原字符序列中索引 &lt;i0&gt;k&lt;/i0&gt;&lt;c1&gt;-str.length()&lt;/c1&gt; 处的字符</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the class loader to define the proxy class</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T114027Z" creationid="pingfangx" creationdate="20191015T114027Z">
        <seg>定义代理类的类加载器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the class to test</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120432Z" creationid="pingfangx" creationdate="20191015T120432Z">
        <seg>要测试的类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the detail message</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111206Z" creationid="pingfangx" creationdate="20191015T111206Z">
        <seg>详细消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the exception to throw from the method invocation on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121227Z" creationid="pingfangx" creationdate="20191015T121227Z">
        <seg>从代理实例上的方法调用抛出的异常。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the function to apply to each entry</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141328Z" creationid="pingfangx" creationdate="20191025T141328Z">
        <seg>应用于每个条目的函数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the generic declaration declared for this type variable.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082828Z" creationid="pingfangx" creationdate="20191015T082828Z">
        <seg>为此类型变量声明的一般声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the index</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103723Z" creationid="pingfangx" creationdate="20191015T103723Z">
        <seg>索引</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the index of the table being split</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101025Z" creationid="pingfangx" creationdate="20191026T101025Z">
        <seg>被拆分表的索引</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the initial capacity</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140457Z" creationid="pingfangx" creationdate="20191025T140457Z">
        <seg>初始容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the initial capacity.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140504Z" creationid="pingfangx" creationdate="20191025T140504Z">
        <seg>初始容量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the invocation handler for the proxy instance</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T114755Z" creationid="pingfangx" creationdate="20191015T113459Z">
        <seg>此代理实例的调用处理程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the invocation handler for this proxy instance</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113331Z" creationid="pingfangx" creationdate="20191015T113331Z">
        <seg>此代理实例的调用处理程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the invocation handler for this proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113258Z" creationid="pingfangx" creationdate="20191015T113258Z">
        <seg>此代理实例的调用处理程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the invocation handler to dispatch method invocations to</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T115717Z" creationid="pingfangx" creationdate="20191015T115717Z">
        <seg>指派方法调用的调用处理程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the key</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090819Z" creationid="pingfangx" creationdate="20191026T090819Z">
        <seg>键</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the key whose associated value is to be returned</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140931Z" creationid="pingfangx" creationdate="20191025T140931Z">
        <seg>要返回其关联值的键</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the list of interfaces for the proxy class to implement</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T114801Z" creationid="pingfangx" creationdate="20191015T114801Z">
        <seg>代理类要实现的接口列表</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the load factor</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140459Z" creationid="pingfangx" creationdate="20191025T140459Z">
        <seg>加载因子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090532Z" creationid="pingfangx" creationdate="20191026T090532Z">
        <seg>映射</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the map whose mappings are to be placed in this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140514Z" creationid="pingfangx" creationdate="20191025T140514Z">
        <seg>映射，其映射关系将存放在此映射中</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the name of this type variable, as it appears in the source code</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T082249Z" creationid="pingfangx" creationdate="20191015T082249Z">
        <seg>此类型变量的名称，它出现在源代码中</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the node, or null if none</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T090826Z" creationid="pingfangx" creationdate="20191026T090826Z">
        <seg>节点，如果没有则为 null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the number of key-value mappings in this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141330Z" creationid="pingfangx" creationdate="20191025T141330Z">
        <seg>此映射中的键-值映射关系数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the previous value associated with &lt;t0&gt;key&lt;/t0&gt;, or         &lt;t1&gt;null&lt;/t1&gt; if there was no mapping for &lt;t2&gt;key&lt;/t2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T092909Z" creationid="pingfangx" creationdate="20191026T092909Z">
        <seg>与 &lt;t0&gt;key&lt;/t0&gt; 关联的旧值；如果 &lt;t1&gt;key&lt;/t1&gt; 没有任何映射关系，则返回 &lt;t2&gt;null&lt;/t2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the previous value associated with &lt;t0&gt;key&lt;/t0&gt;, or &lt;t1&gt;null&lt;/t1&gt; if there was no mapping for &lt;t2&gt;key&lt;/t2&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141145Z" creationid="pingfangx" creationdate="20191025T141145Z">
        <seg>与 &lt;t0&gt;key&lt;/t0&gt; 关联的旧值；如果 &lt;t1&gt;key&lt;/t1&gt; 没有任何映射关系，则返回 &lt;t2&gt;null&lt;/t2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the proxy instance that the method was invoked on</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T120946Z" creationid="pingfangx" creationdate="20191015T120946Z">
        <seg>在其上调用方法的代理实例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the proxy instance to return the invocation handler for</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T113431Z" creationid="pingfangx" creationdate="20191015T113431Z">
        <seg>返回调用处理程序的代理实例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the simple name of the underlying member</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T062738Z" creationid="pingfangx" creationdate="20191015T062738Z">
        <seg>底层成员的简单名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the table for recording bin heads</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T101017Z" creationid="pingfangx" creationdate="20191026T101017Z">
        <seg>记录 bin 头的表</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the type of keys maintained by this map</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T060528Z" creationid="pingfangx" creationdate="20191026T060528Z">
        <seg>此映射所维护的键的类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the type of mapped values</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T060530Z" creationid="pingfangx" creationdate="20191026T060530Z">
        <seg>所映射值的类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the undeclared checked exception that was thrown</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T111136Z" creationid="pingfangx" creationdate="20191015T111136Z">
        <seg>抛出的经过检查的未声明异常</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the value of the indexed component in the specified array</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T103621Z" creationid="pingfangx" creationdate="20191015T103621Z">
        <seg>指定数组中索引组件的值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the value of the object's &lt;c0&gt;accessible&lt;/c0&gt; flag</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105934Z" creationid="pingfangx" creationdate="20191015T105934Z">
        <seg>此对象的 &lt;c0&gt;accessible&lt;/c0&gt; 标志的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the value to match if matchValue, else ignored</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094945Z" creationid="pingfangx" creationdate="20191026T094945Z">
        <seg>如果 matchValue 为 true 表示匹配值，否则忽略</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the value to put</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T092947Z" creationid="pingfangx" creationdate="20191026T092947Z">
        <seg>要设置的值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the value to return from the method invocation on the proxy instance.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T121150Z" creationid="pingfangx" creationdate="20191015T121150Z">
        <seg>从代理实例的方法调用返回的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the value to which the specified key is mapped, or &lt;c0&gt;null&lt;/c0&gt; if this map contains no mapping for the key</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140934Z" creationid="pingfangx" creationdate="20191025T140934Z">
        <seg>指定键所映射的值；如果此映射不包含该键的映射关系，则返回 &lt;c0&gt;null&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>they are guaranteed to traverse elements as they existed upon construction exactly once, and may (but are not guaranteed to) reflect any modifications subsequent to construction.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112744Z" creationid="pingfangx" creationdate="20191025T112744Z">
        <seg>它们保证遍历元素，因为它们在构造上确实存在一次，并且可能(但不能保证)反映在构造之后的任何修改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>they may proceed concurrently with other operations</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112728Z" creationid="pingfangx" creationdate="20191025T112728Z">
        <seg>他们可以与其他操作同时进行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>they will never throw &lt;c0&gt;&lt;a1&gt;ConcurrentModificationException&lt;/a1&gt;&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T112733Z" creationid="pingfangx" creationdate="20191025T112733Z">
        <seg>它们不会抛出 &lt;c0&gt;&lt;a1&gt;ConcurrentModificationException&lt;/a1&gt;&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>this element's annotation for the specified annotation type if present on this element, else null</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T090634Z" creationid="pingfangx" creationdate="20191015T090634Z">
        <seg>如果该元素的指定注释类型的注释存在于此对象上，则返回这些注释，否则返回 null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>this shouldn't happen, since we are Cloneable</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T095318Z" creationid="pingfangx" creationdate="20191026T095318Z">
        <seg>这不应该发生，因为我们是 Cloneable 的</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tiếng Việt</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114417Z" creationid="pingfangx" creationdate="20191011T114417Z">
        <seg>tiếng Việt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>to entities capable of performing I/O operations; and</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T101842Z" creationid="pingfangx" creationdate="20191011T101609Z">
        <seg>它们表示到能够执行 IO 操作；</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>too small</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T100840Z" creationid="pingfangx" creationdate="20191026T100840Z">
        <seg>太小</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if an annotation for the specified annotation type is present on this element, else false</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T105709Z" creationid="pingfangx" creationdate="20191015T105709Z">
        <seg>如果指定注释类型的注释存在于此对象上，则返回 true，否则返回 false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if and only if this member was introduced by the compiler.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191015T062749Z" creationid="pingfangx" creationdate="20191015T062749Z">
        <seg>当且仅当编译器引入此对象时，才返回 true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type arg is c</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T083411Z" creationid="pingfangx" creationdate="20191026T083411Z">
        <seg>类型参数是 c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value expected to be associated with the specified key</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141250Z" creationid="pingfangx" creationdate="20191025T141250Z">
        <seg>应与指定键关联的值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value to be associated with the specified key</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T141141Z" creationid="pingfangx" creationdate="20191025T141141Z">
        <seg>指定键将要关联的值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value whose presence in this map is to be tested</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T140609Z" creationid="pingfangx" creationdate="20191025T140609Z">
        <seg>要测试其是否在此映射中存在的值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>where &lt;c0&gt;equals&lt;/c0&gt; has the semantics of &lt;c1&gt;&lt;a2&gt;Objects.equals&lt;/a2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T095313Z" creationid="pingfangx" creationdate="20191014T095313Z">
        <seg>其中 &lt;c0&gt;equals&lt;/c0&gt; 具有 &lt;c1&gt;&lt;a2&gt;Objects.equals&lt;/a2&gt;&lt;/c1&gt; 语义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>which translate between bytes and Unicode characters;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T083733Z" creationid="pingfangx" creationdate="20191011T083733Z">
        <seg>它们在字节和 Unicode 字符之间进行转换；</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will be &lt;c0&gt;true&lt;/c0&gt;, but these are not absolute requirements.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135314Z" creationid="pingfangx" creationdate="20191014T135314Z">
        <seg>为 &lt;c0&gt;true&lt;/c0&gt;，但这些并非必须要满足的要求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will be &lt;c0&gt;true&lt;/c0&gt;, this is not an absolute requirement.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135340Z" creationid="pingfangx" creationdate="20191014T135340Z">
        <seg>为 &lt;c0&gt;true&lt;/c0&gt;，但这并非必须要满足的要求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will be true, and that the expression:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191014T135248Z" creationid="pingfangx" creationdate="20191014T135248Z">
        <seg>为 true，表达式：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>write your utility method as follows:</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191025T121052Z" creationid="pingfangx" creationdate="20191025T121052Z">
        <seg>编写实用方法如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>zero initial threshold signifies using defaults</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191026T094714Z" creationid="pingfangx" creationdate="20191026T094714Z">
        <seg>零初始阈值表示使用默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Русский</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114417Z" creationid="pingfangx" creationdate="20191011T114417Z">
        <seg>Русский</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>中文（简体)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114418Z" creationid="pingfangx" creationdate="20191011T114418Z">
        <seg>中文（简体)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>中文（繁體)</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114419Z" creationid="pingfangx" creationdate="20191011T114419Z">
        <seg>中文（繁體)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>日本語</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114415Z" creationid="pingfangx" creationdate="20191011T114415Z">
        <seg>日本語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>한국어</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="pingfangx" changedate="20191011T114416Z" creationid="pingfangx" creationdate="20191011T114416Z">
        <seg>한국어</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
